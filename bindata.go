package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_jenkins_multi_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x73\xdb\x36\x10\xbd\xfb\x57\x70\x74\xf1\x49\x90\x9d\x36\x9d\x1c\x68\xe5\x43\x89\x67\xd2\x89\x15\x8d\x14\x8d\xcf\x10\xb9\x96\x60\x81\x00\x07\x00\x5b\xa9\x99\xfc\xf7\x2e\x40\x00\x04\x4d\xa5\xb5\xc6\x39\x99\xd8\x2f\x2c\xde\xbe\x7d\x72\xfe\xf6\x50\xf1\xec\x2f\x50\x9a\x49\x71\x73\x79\x4d\xae\x2e\x33\x10\x85\x2c\x99\xd8\xde\x5c\xae\xbf\xdd\x8e\xdf\x5c\xbe\x9d\x5e\xe4\x85\xac\x88\x61\x7b\xca\xc9\x23\x88\x3d\x13\x9a\xd4\xbc\xd9\xda\xbf\x55\xc3\x0d\x7b\x94\x1b\x72\x67\x3f\xfe\x94\x9b\x85\x92\x8f\x50\x98\xac\x0d\xb8\x19\xf9\x84\x71\x08\x1c\xb7\x8e\x77\xd7\xe4\xfa\xf5\x68\x7a\x91\x65\x39\x2d\x0c\xde\xae\x27\xee\x50\x82\x2e\x14\xab\xad\x65\x9a\x4f\xd2\x93\xf5\xee\x01\xea\x8f\x50\x83\x28\xb1\x4b\x06\x7a\xfa\x40\xb9\x86\x7c\x32\xb0\xdb\xe0\x5a\xc9\x1a\x94\xf1\x47\x34\x68\x20\x25\xa3\x1b\x99\xbc\x82\xd5\xc0\x99\x00\xb2\xf0\x1f\x8b\x36\xe7\x18\xdb\x2f\xd1\x8c\xf8\x1c\xc7\x21\x34\xf4\x7f\x45\xde\x90\x3f\x46\x6d\x65\xac\x6d\xa8\xde\xcf\x69\x05\xd3\x9a\x2a\xca\x39\xf0\x0c\x0e\x50\x34\xb6\xf3\x7c\x12\x9d\x21\x5a\x1b\xba\x05\x67\xf9\xfe\x3d\x23\xab\x70\xca\x7e\xfc\xc8\x27\x9d\xaf\xed\x7a\x72\x46\xdb\xee\xdd\x93\xfe\xc3\x73\x5d\x54\x59\xc1\xa9\xd6\x37\xa3\x5d\x53\x6a\x29\x08\x5a\xc8\xbc\xe1\x7c\x35\xbb\x1b\xb5\xb0\x17\x54\x2c\x25\xad\xa6\x46\x35\x08\x67\x38\xb9\x81\x30\x4d\x37\x1c\xca\x00\x75\x3c\x5b\xe7\x86\xcb\x62\xff\xa1\x61\xbc\xbc\xdf\x81\xf8\x28\xff\x16\xda\x28\xa0\x95\x33\x21\x87\x42\xd2\xff\xc6\x0d\x8b\xad\xeb\xe7\x94\x1a\x44\xd9\x42\x46\xb1\xed\x16\x39\xed\x9f\x26\x45\xd1\x28\x05\xc2\xb8\xa0\x50\xe7\xa9\xd9\x75\x60\xbf\x30\xd1\x23\x7f\x06\xeb\x3f\xb4\x99\x71\xc0\xf5\x8e\xea\x76\x88\xee\xeb\x0a\x87\x12\x2d\xbd\x18\xcc\xd5\xc1\x92\x65\xc8\x06\x45\xc5\x16\x90\x13\xcd\xc6\xba\x90\x11\xd1\xf9\x9c\x7e\x16\xa1\xe6\x4c\x8a\x07\xb6\xed\x2a\x63\x3a\xfa\x23\xe5\x1c\xd3\x82\x21\x0d\xb2\x98\x2c\x90\xc2\x95\x0e\x5c\xe8\x0c\x69\x1c\x1c\x6a\xa9\xa1\x44\x06\x05\x40\x13\x4b\x1a\xe8\xf9\x82\x3d\x3d\x61\x90\xb5\xa4\x81\xb8\x38\x1a\x27\xb8\x6c\x38\xe8\x05\x35\x3b\x5c\xff\x81\x29\x8d\xaf\xe8\x61\x09\x38\x6a\x64\x39\xc2\x9b\x9c\x7a\x6d\x0a\x7b\x95\xf5\x1c\x57\x46\x51\x03\xdb\x63\xec\xf7\x84\x6b\x98\x8a\x38\x96\xcc\xe9\x4f\x2f\xad\x33\xa7\x29\xb8\xa4\xca\xbc\xe7\xdc\x3e\xad\x45\x2f\xb5\xf4\x60\x8e\xf9\x8e\x89\x27\x6a\xed\x19\xe7\x6e\x9a\x5f\x05\x26\x2f\x41\xe3\x88\xbb\x5b\x6f\xdf\x7f\xfe\xb2\x5e\x7e\x42\xe5\xfb\xcf\xb0\xb4\xa0\x23\xf7\x57\xc1\x8f\x9f\x1f\x70\x46\xb3\x9d\xe5\x59\x14\xd0\xd3\xce\x8e\x7a\x93\x97\x70\x0f\x09\x87\xca\xdc\x51\xd9\x2f\x43\x4a\x7d\x0b\x88\x61\xa2\xa1\xb6\xed\xae\xff\xd5\x7a\x36\xfb\xb4\x5a\xdd\xae\xbf\x38\x98\x4e\x44\x5c\x3c\xbb\xbd\x13\xab\xea\xdf\xed\x37\x3e\xaf\x9b\x0d\x67\x7a\x17\x05\x00\xfb\x66\x0f\x19\x99\xc3\xc1\xdc\x51\xbc\x99\xa7\x1b\x99\xd3\x86\xd8\x5b\x0b\x54\x10\xd5\x54\xfa\xa8\x0d\x54\x9a\x78\x85\x6d\x6f\x27\xae\x7c\x54\x6b\xaf\x4b\xc4\x75\x10\xa4\xfb\x5b\x6b\x8c\x3f\x38\x2e\x65\xf0\x6b\x73\x4d\x7e\x27\xbf\x8d\x52\xb4\x10\xe1\x56\xe0\xda\x2d\x8b\x92\xea\x7f\x7f\xed\x62\x6b\xb7\xea\x83\xf6\x71\x03\x4f\x47\x7b\x2c\x7f\xed\xc3\x22\x94\x09\x05\x3a\x99\xb3\xcd\xf5\x50\xed\x5d\x83\x53\xb4\xca\x03\x06\x14\xfb\x07\xca\xde\x35\x4f\x71\xeb\x45\x8e\x7d\xe8\xbb\x57\xe4\xd5\xeb\x01\x6c\x09\xaf\xcf\xbd\xee\x84\xac\x0e\x8a\x3e\xbb\xf0\x5c\x96\xb0\x08\x8e\x6e\x98\x81\xd1\x83\xb2\xf6\x3f\x1a\x3b\x2d\xdd\x49\x78\xb4\x9c\x16\x17\xbf\x3f\x3f\xd3\x18\xdf\xc8\x3d\x33\xbb\xb9\xec\x3a\x09\xa2\xf0\x33\x77\x22\x0b\x2f\xc3\xef\xc9\x2b\xcf\x2f\x37\x24\x17\x42\xd2\xdb\xe2\x56\xf6\xee\x15\xad\xeb\x16\xe3\xb3\xb4\xc2\xaf\xc7\xf4\xe2\xdf\x00\x00\x00\xff\xff\x09\x99\x6b\x44\x29\x0b\x00\x00")

func templates_jenkins_multi_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_multi_job_xml,
		"templates/jenkins/multi-job.xml",
	)
}

func templates_jenkins_multi_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_multi_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/multi-job.xml", size: 2857, mode: os.FileMode(420), modTime: time.Unix(1423172303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_normal_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xdd\x6f\x1b\xb9\x11\x7f\xd7\x5f\xb1\x70\x03\xb8\x3d\x54\xab\xd8\xd7\xe2\xae\x80\xac\x4b\x2c\x2b\x39\xb5\xb6\x62\x58\x52\xf2\x78\xa0\x76\x47\x12\xcf\xdc\xe5\x82\xe4\x3a\x56\xdd\xfc\xef\x1d\x2e\x3f\x96\xfb\x61\xc7\xc6\xdd\x4b\x80\x40\x2f\xda\x99\xe1\x70\x38\x9f\x3f\x72\xfc\xcb\x7d\xc6\xa2\x3b\x10\x92\xf2\xfc\xec\xf8\x24\x7e\x7d\x1c\x41\x9e\xf0\x94\xe6\xbb\xb3\xe3\xf5\xea\xdd\xf0\xe7\xe3\x5f\x26\x83\x71\x21\xf8\xef\x90\xa8\xc9\x20\x8a\xc6\x24\x51\x28\x2c\x47\xd5\x47\x0a\x32\x11\xb4\xd0\x14\x43\x60\x7c\x77\xc3\x15\x51\x5c\x44\x09\x23\x52\x9e\x1d\xed\xcb\x54\xf2\x3c\x56\x44\xde\xca\xf8\xd2\xb3\x8f\xb4\xb8\xd6\x40\x0e\x72\xc5\xff\x03\x50\x4c\x86\x27\xe3\x51\xf0\x69\xf8\x79\x99\x05\xec\xfa\xcb\x70\x89\x50\x74\x8b\x16\x5d\x34\xb5\xf4\x90\x9b\xf2\x0b\xaf\x27\x90\x5e\x84\xca\xc7\xa3\xfa\x28\xd5\xf7\x2d\x32\x2e\xa0\x80\x3c\x45\x0f\x51\x90\x93\x2d\x61\x12\xc6\xa3\x0e\x5d\x0b\xa3\xc3\x0a\x40\xb5\xe6\x13\x09\x12\xe2\x94\x92\x0d\x67\xf1\xef\x90\xdf\xd2\x5c\xc6\x05\x2d\x80\xd1\x1c\xe2\x6b\xfb\xe7\xda\xac\x39\x44\x05\x2b\x77\x34\x3f\x3b\x4a\x91\x8c\xb1\x39\x0c\x9d\xe8\xd0\x70\xde\xbc\x8e\x7f\x8e\x7f\xb2\x0e\x44\xdd\xda\xb5\x0b\x92\xc1\xe4\xe1\x21\x8a\x57\xf6\x23\xfa\xf2\x65\x3c\xf2\x1c\x27\x2a\x15\xd9\x81\x97\x5d\xba\xaf\x4a\xb8\xe6\x19\x93\x47\x2f\xb0\xd9\x78\xac\x79\x6a\xdc\x81\x6e\xa3\x78\x2e\xe7\x39\x55\x94\xb0\x7f\xf3\x0d\xee\xa3\x05\x65\x92\xb5\xb2\xc3\x1c\x4c\xc6\x3b\xaa\xe2\xf7\x54\x2d\xa7\x57\x47\xde\x0d\x48\x7b\x73\x1a\x9f\xc6\xff\x72\x29\x93\xf0\x7c\x4b\x77\x1f\x4d\xd6\x4e\x4e\xc7\xa3\x26\xc1\x08\x95\x12\xc4\x0d\x64\x5c\xc1\xb4\xe2\x4a\xef\x83\x9e\x2d\xd7\x2d\x61\x27\xab\xf5\x08\x56\xf9\x0a\xad\x5a\xdf\x5c\x56\x8e\xd2\x24\xa7\x6c\xf4\x6c\x6d\xb8\xae\xdf\xa4\xf1\x46\x90\x3c\xd9\xc3\x93\x16\x9e\x57\x32\xcb\x02\x92\xc0\xb6\x5c\x07\xeb\x87\x91\x36\xaf\xe6\xd3\x2d\x05\x51\xd9\x99\x87\x91\xef\x33\xb4\xad\x74\x3c\x6a\x9a\x32\x4e\xa9\x24\x1b\x06\xcb\x72\x93\xf1\xb4\x64\x75\xd2\x77\x19\x66\x81\x80\xa4\xc4\x28\xdc\x85\x1c\x25\x4a\x5c\xd1\xc7\xb1\x9b\xf0\xf7\x90\x83\x20\xaa\x66\x19\xff\x94\x48\xd3\xad\xc6\x6f\xfa\x55\x41\x5b\xe4\xa5\xda\x73\xf1\x41\x4c\x79\x96\x51\xa5\x40\x38\x05\x5d\x86\x4d\x28\x06\x24\xaf\xa2\x3c\xd5\xff\x3e\x71\x71\x2b\x0b\x92\x98\xb2\x30\x4c\x23\xf8\x19\xd3\xfe\x43\xa9\xbc\x80\x53\xdc\xa1\x1b\xf1\x42\x94\x39\x9c\x3b\x97\x5a\xd9\x26\xd1\xb9\x4d\x67\xc5\x35\x67\xcc\x49\x05\x14\x23\x42\x77\x39\x17\xb0\xe0\xd8\xaa\x0e\xc6\x7e\x27\xda\xc3\xf1\x25\xb0\xdc\x13\xc6\xf8\xe7\x29\xe3\xb9\x37\xb6\x4d\xb6\x49\x58\x52\x96\x4e\xf7\x9c\x63\x92\x3e\x51\x9c\xa5\xa2\x2c\xbe\x80\x2d\x29\x99\x3a\x0f\x96\x1c\x8d\xac\x1e\x14\x5a\x71\xce\x26\x56\x66\x3c\x72\x04\xdb\x07\x7d\xe4\xb6\x3b\xb7\x0d\xa3\x52\xf9\xf5\x02\x18\x06\xf3\x0e\x56\x44\xec\x40\x5d\x50\x51\x33\xb6\x20\xb0\xc5\x82\x23\xc0\x7d\xc2\xca\x14\xd2\x1b\xd8\xf9\x81\x14\x90\x75\x15\xca\xc0\x2a\x93\x2a\xba\xbf\x75\x88\xb3\x8c\x50\xe6\xa8\xf2\x96\x16\x2b\xb2\xb3\x69\xeb\xbe\x6c\x10\xf2\xc6\x96\x13\xdb\xe2\x74\xdc\x71\x62\xa2\xb1\x98\x31\x3a\x8d\xda\x04\x1c\x0e\x55\x2e\xb5\xd7\xdb\x1d\x93\x2c\x34\xeb\x4f\xaf\x87\xaf\xfa\x1c\xee\x15\xe4\xb2\x9e\xea\x23\xb4\xa8\xfa\xa3\x04\xdd\xed\xd0\x8d\x46\xce\x9e\x76\x5d\x48\x25\x80\x64\xd8\xcf\xa5\x69\xe8\x28\xe9\x26\x84\x5b\x11\xdf\x80\x86\x15\x50\xe5\xc8\xca\x10\xeb\x29\x84\x1d\x67\xe4\xbf\x4a\xab\xef\xda\x80\x8c\xca\xab\xed\x4d\x30\x6b\xdb\x52\x7e\xfa\xed\x05\xc8\x3d\x67\x69\xbb\x31\x2e\xd7\xd3\xe9\x6c\xb9\x6c\xf6\x41\x64\x72\x81\xf0\x86\xb0\xc9\xeb\xf1\xc8\xfd\xad\x99\x09\x67\x38\xef\xcf\x2f\xd7\x33\x3d\x56\x18\x17\x0d\x5e\x56\x30\x50\xe6\x4c\x36\x3f\x9a\x34\xdf\x6c\x5b\x46\x8d\x47\xcf\xf7\x8f\x4f\x97\xd0\xe7\x56\x02\xd2\x2b\x92\x97\x58\xbb\x07\x9b\x57\x98\x07\x3e\x04\x0e\x68\xb9\x1d\x70\x88\xf6\x39\x7e\xf2\x43\x64\x7f\x18\xe7\x60\x9e\xd8\x0e\x73\xcd\xa5\x32\x5d\xe4\x57\xce\x6f\x65\xb3\xc9\xb4\x99\x83\xc6\x68\x79\x74\xe7\xf0\x48\xe8\x9b\x20\xa9\x4c\xdb\xf9\x24\x48\x51\xf8\x34\x6b\x8f\x3f\x82\xa9\x59\x85\x22\x7e\x8b\xff\xa6\xfa\xdf\x79\xb0\xca\xe3\x04\x2f\x87\xf8\xe8\x1f\xf1\xeb\x1a\x1f\x55\xc4\x2b\x52\x54\xd8\x06\x53\x5d\x64\x36\xb6\x8e\x36\xe8\x9d\x90\x5f\xd9\xf7\xf9\xc0\xce\x02\x13\xac\x4d\x3c\xfa\xa6\xd4\xd8\xf8\xa5\x10\xcf\x42\xf4\x15\x60\xb6\x61\xbd\x4f\x5e\x3d\x9c\xaf\xe7\x97\x17\xbf\x2d\xd6\x57\xe7\xb3\x9b\x2f\xc3\x57\x0f\xef\xe7\xab\xdf\x6e\x66\x1f\xe7\xcb\xf9\x87\xc5\xdf\x19\xe4\x3b\xb5\x3f\xfb\x09\xeb\xa6\xbd\xb2\xae\xba\x14\x3f\x2f\xa8\x44\xf2\xa1\xf2\x82\x49\xe8\x2e\xfd\xf9\x68\xb0\x7b\x50\xd3\x4e\x3a\x41\x6e\xa4\xee\x37\x05\x07\xab\x5e\xd2\x69\x29\x38\x9b\xaa\x52\xd2\x73\x7b\x2b\x9b\x20\xed\x3b\x80\xfc\x0e\x20\xbf\x03\xc8\xef\x00\xd2\x04\x21\xef\xdd\x32\x44\x80\x35\xfa\xfa\xb6\x67\xe3\x23\x6d\xdf\xe0\x80\xfa\x79\x60\xc9\xc8\x1d\x5c\x92\x0d\x30\x3b\x0d\x30\xa2\x98\x90\x90\x2e\x78\x6a\x5f\x29\x42\x09\xac\xc1\x90\x3f\x68\x81\x8b\x84\xe4\x37\x9c\x64\x2e\x53\xdd\xe7\xa0\x6e\x45\x69\xab\x03\xa5\xc6\xd5\x8c\x27\xb7\xe6\x04\x7b\xc8\x2f\xf8\xe7\xdc\xa0\xcd\x8a\x84\x48\xde\x2d\xfa\xaa\x5c\x57\x99\x43\xb2\x4f\xab\xea\x48\x0d\xcc\x64\xc3\x9e\x87\x39\x6b\x2a\xc5\x9f\xaa\x45\x1e\x3c\x01\xcd\x5f\x00\xcc\x43\x58\xfe\x87\x40\x79\x17\x92\x3f\x01\xc8\x9f\x80\xe3\x8f\x83\xf1\xe7\x42\xf1\x16\x10\x7f\x3e\x0c\x6f\x24\x55\x95\xc7\xe1\x2d\x08\x7b\xef\x0e\xa2\xf8\xad\x7b\x65\x84\xa2\x0d\xc2\x5d\x9d\x24\xbc\x38\xb8\xe7\xc5\x78\x8a\x1f\x6e\x8d\xaf\xcc\x50\xe2\xcd\x49\xfc\xe3\x69\x7c\x52\x57\xa7\x7b\x77\xd5\xce\xb7\x3e\xd6\x45\x59\x81\xb9\x2a\x00\xc1\xc3\x6c\xb5\x60\x4b\x99\x9e\x4a\x5a\xde\xef\xa4\xe5\x2c\xdd\xdf\x99\xaa\xde\x58\x5f\xc1\x6c\xcb\x93\x35\x45\x02\x43\xbd\x9d\x57\xdc\xde\x73\xf9\xcb\x49\xe5\xc5\xa5\x5d\x79\x14\xe0\x0c\x4c\x5c\xb6\x21\xc9\xed\x8a\x5f\x12\xa9\x96\x65\x92\x80\x94\xdb\x92\xd9\xc8\x3d\xca\x0e\x50\x94\xcd\xb4\x77\xd5\x41\x96\x4a\x0f\xf1\xdd\x61\x82\x3d\xfa\x3d\xe3\x1b\xc2\x96\xa0\x14\x96\x4d\x9d\x92\x2d\x41\x8f\x62\xdc\xc1\x3c\x25\xe5\x38\xf9\xde\xe1\x5a\x10\x85\xa0\xb9\x72\x7e\x0b\x50\xc3\x63\x02\xfd\xbd\xf1\xd1\x98\xf7\xdd\xef\xc6\x8d\xe7\xf1\xe5\x1e\x58\x98\xfe\x59\x46\x72\xcc\xdc\xbf\x44\x0e\x6a\x47\x09\x9e\x4d\x87\x25\x23\x3b\x9a\x0c\xe0\xbe\xe0\x42\x45\xd7\xf3\xeb\xd9\xe5\x7c\x31\xb3\xd7\x81\xb3\x57\x7f\x85\x64\xcf\xa3\xa3\x57\x0f\x9e\xf3\x71\x76\xa3\x6f\x06\x5f\x8e\xa2\xff\x45\x49\xa9\xa2\xe1\xf6\x24\x1a\xa6\xc7\xc3\xe3\xbf\x39\x25\xfa\x02\xb1\xfc\xf5\xed\xf3\x16\x9f\xda\xc5\xfd\x6f\xbc\x01\xbc\xc7\x11\x19\x61\x05\x02\x2e\x1a\xee\x89\x48\x23\x73\x53\xc1\x8d\xea\x77\x91\x41\x05\x9c\xcc\x61\x9d\x5f\xb4\x5f\xfd\xf9\x1b\x6e\x6e\x79\xca\x8e\x19\x77\x9f\x2c\xca\x0d\xa2\x81\x7d\xfb\xcd\xc2\x80\x9b\x7e\xa7\x5f\xe1\xec\x0e\x46\x65\x56\x7d\x62\x29\x9e\x04\x63\x12\xc1\x27\x2d\x28\x76\xdc\xa0\x44\x52\xbc\xe6\x18\xbd\x33\x7d\x85\x5b\xe3\x28\xd0\x03\x25\x6c\x49\x4f\x8a\xd4\xa5\x96\xa7\x2b\x3e\xcf\x53\x7a\x47\x53\xbc\xdc\x3b\xc0\xdb\xa5\xf7\x39\xc2\x58\xff\xc4\xd3\x41\xd0\x07\x7a\x0e\xef\xb8\x6f\x45\xb2\xd7\x37\x51\x6f\x15\xf1\x59\xde\x69\x26\xa4\x59\x00\xba\x87\xe7\xec\x30\xdf\x76\xea\xba\x43\x76\xf2\xfa\x26\x2a\xd5\x07\x64\x5b\xc9\x80\xe0\x0d\xd0\x00\x73\x96\x15\xea\x60\x6d\xf3\x20\xbc\xc3\xe8\xf3\x4b\xff\xc1\x7a\x3d\xb4\x80\x7b\x65\xde\x55\x1a\x4f\x5a\xa4\xc4\x52\xce\xe2\x04\xa3\x2e\xca\x4c\x1e\xa4\x82\x4c\xc6\x8d\x62\x8f\xab\xdc\xf3\xf7\x60\x3b\x55\xe2\x2a\xbe\xee\x52\x6c\xbb\xa3\xcf\xaf\x6a\x49\xe7\xbe\x7f\x82\xb0\xec\xc7\x10\x96\x55\xf7\xbb\x30\xd9\x1c\xd4\x08\xe6\x80\x89\x4d\xc7\x7c\x9d\x77\xbd\xd2\xd6\x4f\x7f\xee\xc1\x1e\x71\xac\x9d\x91\xda\xb8\x86\x57\x5b\xcd\xb2\x20\x02\x4d\xc3\x4e\x4d\xff\x0b\x69\x63\x9b\xb6\xdf\x1a\x92\x43\x2b\xaa\x5f\x02\xfe\xd9\x71\x5b\x30\x37\x5e\xba\x5d\xfb\xc2\xdf\xa7\xf4\xd9\x8a\x35\x44\xbd\x76\x8c\x3a\x98\xae\xbb\x75\xd4\xba\x79\x6f\xe2\x1a\x0e\x78\xd9\xb6\x28\xa5\xfa\xc2\x5a\x43\xaa\x9a\x14\x0a\x5a\x43\x3e\x51\xb5\x5f\xf0\xda\x12\x57\x49\x8f\xb1\x6b\xf7\xb5\x67\xdb\x0b\xfd\xd7\x3a\xe5\xcb\xd5\xf5\xbd\x1f\x86\x2d\x3e\x40\x40\xff\x0f\x00\x00\xff\xff\x19\x0d\x96\x37\xcc\x1e\x00\x00")

func templates_jenkins_normal_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_normal_job_xml,
		"templates/jenkins/normal-job.xml",
	)
}

func templates_jenkins_normal_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_normal_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/normal-job.xml", size: 7884, mode: os.FileMode(420), modTime: time.Unix(1430308420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_pipeline_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templates_jenkins_pipeline_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_pipeline_xml,
		"templates/jenkins/pipeline.xml",
	)
}

func templates_jenkins_pipeline_xml() (*asset, error) {
	bytes, err := templates_jenkins_pipeline_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1423648470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templates_jenkins_multi_job_xml,
	"templates/jenkins/normal-job.xml": templates_jenkins_normal_job_xml,
	"templates/jenkins/pipeline.xml":   templates_jenkins_pipeline_xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"jenkins": &_bintree_t{nil, map[string]*_bintree_t{
			"multi-job.xml":  &_bintree_t{templates_jenkins_multi_job_xml, map[string]*_bintree_t{}},
			"normal-job.xml": &_bintree_t{templates_jenkins_normal_job_xml, map[string]*_bintree_t{}},
			"pipeline.xml":   &_bintree_t{templates_jenkins_pipeline_xml, map[string]*_bintree_t{}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
