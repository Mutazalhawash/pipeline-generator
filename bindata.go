// Code generated by go-bindata.
// sources:
// templates/jenkins/multi-job.xml
// templates/jenkins/normal-job.xml
// templates/jenkins/pipeline.xml
// DO NOT EDIT!

package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJenkinsMultiJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdd\x6f\xdb\x36\x10\x7f\xae\xff\x0a\xc1\x2f\x01\x06\x44\x4a\xba\x0f\x74\x80\xe2\xb6\x71\xda\xa2\x43\x9b\x78\x76\xbc\x3c\xd3\xd2\x59\x66\x4d\x89\x02\x49\xa5\xf1\x8a\xfe\xef\x3b\x7e\xc9\x94\xa5\x34\x49\x57\x0c\xcb\x4b\xc5\xfb\xe2\xf1\xee\x77\x1f\x6e\xfa\xf2\xae\x64\xd1\x2d\x08\x49\x79\x75\x76\x74\x1a\x9f\x1c\x45\x50\x65\x3c\xa7\x55\x71\x76\xb4\xbc\x7e\x7b\xfc\xe2\xe8\xe5\x64\x94\x66\xbc\x8c\x15\xdd\x12\x16\x7f\x82\x6a\x4b\x2b\x19\xd7\xac\x29\xf4\xbf\x65\xc3\x14\xfd\xc4\x57\xf1\x47\xfd\xf1\x07\x5f\xcd\x04\xff\x04\x99\x8a\xac\xc0\xd9\xd8\x29\x1c\x7b\xc1\x63\xcb\x78\x75\x1a\x9f\xfe\x3a\x9e\x8c\xa2\x28\x25\x99\xc2\xdb\x65\x62\x0e\x39\xc8\x4c\xd0\x5a\x53\x26\x69\x12\x9e\x34\x77\x0b\x50\x5f\x40\x0d\x55\x8e\x5e\x52\x90\x93\x35\x61\x12\xd2\xa4\x47\xd7\xc2\xb5\xe0\x35\x08\xe5\x8e\x48\x90\x10\xe7\x94\xac\x78\xf0\x0a\x5a\x03\xa3\x15\xc4\x33\xf7\x31\xb3\x3a\xbb\xd6\xfd\x1c\xc9\x18\x9f\xdd\xb1\x17\xf5\xfe\x9f\xc4\x2f\xe2\xdf\xc6\xd6\x32\xda\x56\x44\x6e\x2f\x49\x09\x93\x9a\x08\xc2\x18\xb0\x08\xee\x20\x6b\xb4\xe7\x69\xd2\x32\xbd\xb4\x54\xa4\x00\x43\xf9\xf2\x25\x8a\x17\xfe\x14\x7d\xfd\x9a\x26\x7b\x9e\xf5\x3a\x79\x82\xdb\xe6\xdd\x49\xf7\xe1\xa9\xcc\xca\x28\x63\x44\xca\xb3\xf1\xa6\xc9\x25\xaf\xda\xe4\x15\x54\xc5\xef\xa8\x5a\x4c\x3f\x8e\xdb\x07\x23\xed\xd5\xf3\xf8\x97\xf8\x04\xdf\xf6\xec\x19\x66\xbe\x5a\xd3\xe2\x2f\x8b\x90\xc9\xf3\x34\xe9\x12\xb4\x48\x23\x41\xcc\xa1\xe4\x0a\xa6\x86\x27\x35\xf5\x59\x3a\x70\xd7\xf2\x40\xd2\x08\xa2\x01\xc1\x4c\x1c\xd0\x95\xe5\xfc\x83\x09\x82\x26\x19\x2b\xc9\x23\xcd\xa0\xca\x90\x1b\xe9\x4a\x90\x2a\xdb\xc0\xfd\x3e\x9d\x1b\x81\x45\x0d\x99\xf3\xa6\xd2\xa1\xff\x29\x29\x89\x54\x20\xd2\xc4\x1c\x47\xf7\x78\xd2\x55\x4e\x93\xf0\xb6\x34\xa7\x92\xac\x18\x2c\x9a\x55\xc9\xf3\x86\xed\xd1\xda\x67\xd8\x4c\x0b\x04\x0c\x86\xf5\x36\xe4\x28\xd1\xa0\xc6\x10\xc7\xea\xe4\xfc\x1d\x54\x20\x88\xda\xb3\xec\xf3\x1b\xa4\xe9\xb2\x6a\x2f\x7d\x50\xd0\x1a\x24\x8d\xda\x70\x71\x25\xa6\xbc\x2c\xa9\xc2\x10\x78\x03\x7d\x86\x55\xc8\x18\x90\xca\xe4\x6f\xaa\xbf\x6e\xb8\xd8\xca\x9a\x64\x16\xcc\x96\x69\x05\x3f\x23\x58\xaf\x1a\xd5\x0a\x78\xc3\x3d\xba\x15\xaf\x45\x53\xc1\xb9\x0f\xa8\x93\xed\x12\x7d\xd8\x74\xd2\x67\x9c\x31\x2f\x15\x50\xac\x08\x2d\x2a\x2e\xe0\x92\x2b\xba\xde\x59\xff\xbd\xe8\x00\xc7\xaa\x20\x9c\x16\x1b\xac\x64\xfe\x79\xca\x78\xd5\x3a\x7b\x48\xb6\xc2\xab\x86\xb2\x7c\xba\xe1\x1c\x31\xf8\x8d\x5a\xc3\x76\xc0\xe2\x0b\x58\x13\xec\x85\xe7\x81\xca\x38\x71\x76\x50\xe8\x9a\x73\x36\x71\x32\x69\xe2\x09\xae\x81\xb5\x99\x5b\x17\xfe\x1a\x46\xa5\x6a\xf5\x05\x30\x4c\xe6\x2d\x5c\x13\x51\x80\xba\xa0\x62\xcf\x58\x83\xc0\xde\x08\x9e\x00\x77\x19\x6b\x72\xc8\xe7\x50\xb4\xcd\x37\x20\xeb\x12\x93\x81\x57\x16\x2a\xba\x2b\xf5\x88\x6f\x4a\x42\x99\xa7\xca\x2d\xad\xaf\x49\xe1\x60\xeb\x4f\x8e\x97\x95\xa1\x81\x1f\x8e\xdc\x07\xa3\x03\x77\x0a\x2a\xe9\x9e\x8b\xd5\x8a\x0e\x4d\x46\xba\x43\x66\xa4\x9a\x73\x52\x3a\xaf\xfd\xc9\x8c\x23\x5b\xaa\xf9\x41\xe9\xe6\x86\xb9\x62\x3c\xdb\x9a\x3c\xde\x6c\xa0\xba\xe0\x9f\x2b\xa9\x04\x90\xd2\x90\x70\x82\x7a\xa5\x07\xe5\xfa\xc6\x96\xf5\x63\x4c\xf5\xa4\xb4\x21\x25\x68\x51\xf8\xec\xe9\xfe\x8d\xad\x03\x53\x6f\x01\xe7\xed\x1c\x92\x47\x1e\xc4\xa8\xe8\xeb\xfa\xf1\x33\xff\xdc\x6a\xb6\xe3\xad\xde\x10\x69\x47\x98\xf9\x3a\xc1\xba\x6d\x29\x1d\x19\xd4\x95\x9e\x12\x45\xd8\x43\xb0\xb2\x0b\xc0\x89\xd8\xac\x34\x0b\x5b\x48\xcb\x7c\x8c\x3f\x33\x6f\xd3\xcf\x85\xa8\xfd\x4b\x91\xdf\x0e\x5c\xd3\x9a\x3c\x21\x14\xd2\x31\x99\xe1\x00\x2f\x7d\xe3\x0d\x08\xa1\x1c\xdc\xd5\x58\xb7\x39\x0e\x4e\x1f\xd0\x80\x12\x0a\x3a\xbc\xa0\x4f\x07\x08\xd2\x94\x50\x10\xd7\x06\x89\x19\x9c\xeb\xd6\x3e\x23\x6a\x83\xcb\x4f\x8f\x14\xca\x97\xe4\x6e\x0e\x98\x6a\xec\x82\x18\xde\xe0\xd4\x71\xb3\xd2\x57\x69\xce\x6e\xa1\x74\x01\x15\xbb\xd6\xdf\x01\x56\x5f\x15\xe3\x98\x53\xb3\x7d\x75\xd4\xf6\xe4\x50\x05\x57\x14\xa1\x5e\x33\xa6\x9f\x66\xa3\x17\x52\x3a\x61\x6e\xf5\x0d\x12\x07\x6c\x6d\x29\x63\x26\x9b\x57\x15\x2a\xcf\x41\x62\x8a\xf7\xb7\xbe\x7d\xfd\xfe\xc3\x72\xfe\x06\xf7\xbe\x6f\x8a\x85\x06\x0d\xb8\xaf\x2a\xb6\x7b\xbf\xc6\x1c\x4d\x37\x1a\x67\x6d\x87\x19\x66\x1e\x78\x6c\x57\x8a\x28\xf8\x1b\x5a\x27\x70\x87\x99\xc3\x2d\xd5\x5d\xc6\x54\x85\x01\x0f\xe0\xb4\x94\x83\x1b\x56\xc7\x1c\x22\x7c\x85\xcb\xdc\x9f\x0d\x34\x90\xdb\x61\x24\xf7\x05\x3b\xc0\xeb\xaa\x0f\x2d\x28\xf7\xbb\xd3\x79\x5e\xd2\x7b\x9f\xb9\xf1\xbb\xeb\x0d\x8b\x0c\x77\xf1\x7d\xf9\xba\x06\x10\x96\xbb\x0e\xa9\xa2\x55\x63\x5a\xf8\x3e\x67\x8b\xe5\x74\xfa\x66\xb1\x78\xbb\xfc\x60\x9c\x1a\x90\x18\x3d\xda\xbd\x81\xf6\xe4\x72\xed\xde\x9f\xd6\xcd\x0a\x27\xc4\xa6\x0d\x07\xfa\x4d\xd7\x51\x7c\x89\x93\xe2\x23\xc1\x9b\x59\xd8\x85\x70\x35\x8a\xf5\xad\x19\x76\x4d\xd1\x94\x72\x87\x0b\x62\x29\xe3\x4e\xd4\x63\x63\xbe\xdd\xcf\x5d\x2f\x8e\x6d\xec\x1d\xf5\xda\x12\x5b\x3c\x18\x95\xde\xef\x8b\x53\x44\xc8\xcf\xe3\x30\x5a\x07\x09\xfa\x91\xe0\xfb\x17\xd0\xfb\x4e\xd8\xf5\x20\x87\xfb\x80\x9f\x8b\xee\x27\xa4\xee\xce\xd2\xf4\xeb\x5e\x3e\xf4\x52\x30\x28\xed\xc0\xf1\x63\x33\xd5\x62\x23\xc0\x74\x80\x94\x0e\x46\x0e\x82\x51\xfb\x87\xd3\xbf\x21\xef\xdc\x71\x88\x82\x8e\xe4\xb1\x13\xc5\x54\x3d\xff\xfd\x09\x20\x78\xf0\xba\x81\xc1\xf8\x5f\xb4\xb6\xff\x59\x73\xb3\xff\x39\xa0\x51\xb3\xc7\x57\x8b\xac\x96\x33\x3c\xb1\x5c\x83\xba\x6f\x70\xb9\xa0\xdf\x50\xb5\xb9\xe4\x81\x43\xee\xa5\xf7\xb1\xef\x2f\xa7\x27\xa6\xf4\xe0\xb5\x4f\x37\xd7\x07\x3b\x86\xa4\xd3\x26\xed\x2c\xbd\x11\xa4\xae\xed\x9a\xf9\xa4\x66\xec\xca\x75\x32\xfa\x27\x00\x00\xff\xff\x88\x32\x71\x6b\x7c\x12\x00\x00")

func templatesJenkinsMultiJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsMultiJobXml,
		"templates/jenkins/multi-job.xml",
	)
}

func templatesJenkinsMultiJobXml() (*asset, error) {
	bytes, err := templatesJenkinsMultiJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/multi-job.xml", size: 4732, mode: os.FileMode(420), modTime: time.Unix(1443624201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsNormalJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xeb\x6f\x1b\xb9\x11\xff\xee\xbf\x62\xe1\x06\x70\x7b\xa8\x56\xb1\xaf\x68\xee\x00\x59\x17\x3f\xe4\xc4\x57\x59\x71\xf5\x48\x3e\x14\x45\x40\xed\x52\x12\x63\xee\x72\x41\x72\x9d\xa8\x6e\xfe\xf7\x1b\x3e\x97\xfb\x90\x6c\x23\xf9\x72\x40\x10\x20\xd0\xce\x0c\x87\xe4\x3c\x7f\x1c\x0f\x7e\xfb\x92\xd1\xe8\x1e\x73\x41\x58\x7e\x7a\x74\x1c\xbf\x3c\x8a\x70\x9e\xb0\x94\xe4\xeb\xd3\xa3\xc5\xfc\xaa\xf7\xcb\xd1\x6f\xc3\x83\x41\xc1\xd9\x27\x9c\xc8\xe1\x41\x14\x0d\x50\x22\x41\x58\xf4\xf5\x47\x8a\x45\xc2\x49\xa1\x28\x86\x40\xd9\x7a\xca\x24\x92\x8c\x47\x09\x45\x42\x9c\x1e\x6e\xca\x54\xb0\x3c\x96\x48\xdc\x89\x78\xec\xd9\x87\x4a\x5c\x69\x40\x5b\x31\x67\xff\xc2\xb8\x18\xf6\x8e\x07\xfd\xe0\xd3\xf0\xf3\x32\x0b\xd8\xd5\x97\xe1\x22\x2e\xc9\x0a\x4e\x74\x59\xd7\xd2\x41\xae\xcb\x4f\xbc\x9e\x40\x7a\x12\x2a\x1f\xf4\xab\xab\xe8\xef\x3b\x60\x5c\xe2\x02\xe7\x29\x58\x88\x60\x31\x5c\x21\x2a\xf0\xa0\xdf\xa2\x2b\x61\x30\x58\x81\x41\xad\xf9\x04\x82\xc0\x71\x4a\xd0\x92\xd1\xf8\x13\xce\xef\x48\x2e\xe2\x82\x14\x98\x92\x1c\xc7\xb7\xf6\xc7\xad\x59\xb3\x8d\x0a\x5a\xae\x49\x7e\x7a\x98\x02\x19\x7c\xb3\xed\x39\xd1\x9e\xe1\xbc\x7e\x19\xff\x12\xbf\xb2\x06\x04\xdd\xca\xb4\x13\x94\xe1\xe1\xc3\x43\x14\xcf\xed\x47\xf4\xf5\xeb\xa0\xef\x39\x4e\x54\x48\xb4\xc6\x5e\x76\xe6\xbe\xb4\x70\xc5\x33\x47\xee\x3f\xe3\xcc\xc6\x62\xf5\x5b\xc3\x0e\x64\x15\xc5\xd7\xe2\x3a\x27\x92\x20\xfa\x3b\x5b\xc2\x3e\x4a\x50\x24\x59\x23\x3a\xcc\xc5\x44\xbc\x26\x32\x7e\x43\xe4\xec\xe2\xe6\xd0\x9b\x01\x68\xaf\x4f\xe2\x93\xf8\x57\x17\x32\x09\xcb\x57\x64\xfd\xde\x44\xed\xf0\x64\xd0\xaf\x13\x8c\x50\x29\x30\x9f\xe2\x8c\x49\x7c\xa1\xb9\xc2\xdb\xa0\x63\xcb\x45\x43\xd8\xc9\x2a\x3d\x9c\x6a\x5b\xc1\xa9\x16\xd3\xb1\x36\x94\x22\x39\x65\xfd\x27\x6b\x83\x75\xdd\x47\x1a\x2c\x39\xca\x93\x0d\xde\x7b\xc2\x73\x2d\x33\x2b\x70\x12\x9c\x2d\x57\xce\xfa\xa9\xaf\x8e\x57\xf1\xc9\x8a\x60\xae\xcf\x99\x87\x9e\xef\x3a\x68\x53\xe9\xa0\x5f\x3f\xca\x20\x25\x02\x2d\x29\x9e\x95\xcb\x8c\xa5\x25\xad\x82\xbe\xcd\x30\x0b\x38\x4e\x4a\xf0\xc2\x7d\xc8\x91\xbc\x84\x15\x5d\x1c\xbb\x09\x7b\x83\x73\xcc\x91\xac\x58\xc6\x3e\x25\xd0\x54\xa9\xf1\x9b\x3e\x2a\x68\x93\xbc\x94\x1b\xc6\xdf\xf1\x0b\x96\x65\x44\x4a\xcc\x9d\x82\x36\xc3\x06\x14\xc5\x28\xd7\x5e\xbe\x50\xbf\x3e\x30\x7e\x27\x0a\x94\x98\xb4\x30\x4c\x23\xf8\x19\xc2\xfe\x5d\x29\xbd\x80\x53\xdc\xa2\x1b\xf1\x82\x97\x39\x3e\x77\x26\xb5\xb2\x75\xa2\x33\x9b\x8a\x8a\x5b\x46\xa9\x93\x0a\x28\x46\x84\xac\x73\xc6\xf1\x84\x41\xa9\xda\x9a\xf3\x3b\xd1\x0e\x8e\x4f\x81\xd9\x06\x51\xca\x3e\x5f\x50\x96\xfb\xc3\x36\xc9\x36\x08\x4b\x42\xd3\x8b\x0d\x63\x10\xa4\x7b\x92\xb3\x94\x84\xc6\x97\x78\x85\x4a\x2a\xcf\x83\x25\x87\x7d\xab\x07\x84\xe6\x8c\xd1\xa1\x95\x19\xf4\x1d\xc1\xd6\x41\xef\xb9\xd5\xda\x6d\x43\x89\x90\x7e\x3d\xc7\x14\x9c\x79\x8f\xe7\x88\xaf\xb1\xbc\x24\xbc\x62\xac\x30\x87\x12\x8b\x1d\x01\x7f\x49\x68\x99\xe2\x74\x8a\xd7\xbe\x21\x05\x64\x95\x85\x22\x38\x95\x09\x15\x55\xdf\x5a\xc4\x51\x86\x08\x75\x54\x71\x47\x8a\x39\x5a\xdb\xb0\x75\x5f\xd6\x09\x79\x6d\xcb\xa1\x2d\x71\xca\xef\xd0\x31\xe1\xb0\x10\x31\x2a\x8c\x9a\x04\x68\x0e\x3a\x96\x9a\xeb\xed\x8e\x49\x16\x1e\xeb\xbb\xe7\xc3\xa3\x36\xc7\x5f\x24\xce\x45\xd5\xd5\xfb\x70\x22\xfd\x43\x72\xb2\x5e\x83\x19\x8d\x9c\xbd\xed\xa2\x10\x92\x63\x94\x41\x3d\x17\xa6\xa0\x83\xa4\xeb\x10\x6e\x45\x3c\xc5\x0a\x56\x60\x1d\x23\x73\x43\xac\xba\x10\x54\x9c\xbe\xff\x2a\xad\xbe\x5b\x03\x32\xb4\x55\x9b\x9b\x40\xd4\x36\xa5\x7c\xf7\xdb\x70\x2c\x36\x8c\xa6\xcd\xc2\x38\x5b\x5c\x5c\x8c\x66\xb3\x7a\x1d\x04\x26\xe3\x00\x6f\x10\x1d\xbe\x1c\xf4\xdd\xcf\x8a\x99\x30\x0a\xfd\xfe\x7c\xbc\x18\xa9\xb6\x42\x19\xaf\xf1\xb2\x82\x62\x69\xee\x64\xe3\xa3\x4e\xf3\xc5\xb6\x71\xa8\x41\xff\xe9\xf6\xf1\xe1\x12\xda\xdc\x4a\xe0\xf4\x06\xe5\x25\xe4\xee\xd6\xc6\x15\xc4\x81\x77\x81\x03\x5a\x6e\x07\x68\xa2\x5d\x86\x1f\xfe\x14\xd9\x7f\xe0\xe7\xa0\x9f\xd8\x0a\x73\xcb\x84\x34\x55\xe4\x2d\x63\x77\xa2\x5e\x64\x9a\xcc\x83\x5a\x6b\xd9\xb9\x73\x78\x25\xb0\x4d\x10\x54\xa6\xec\x7c\xe0\xa8\x28\x7c\x98\x35\xdb\x1f\x82\xd0\xd4\xae\x88\xcf\xe0\xd7\x85\xfa\x75\x1e\xac\xf2\x38\xc1\xcb\x01\x3e\xfa\x47\xfc\xb2\xc2\x47\x9a\x78\x83\x0a\x8d\x6d\x20\xd4\x79\x66\x7d\xeb\x68\x07\x9d\x1d\xf2\x91\x7d\x9f\x0e\xec\x2c\x30\x81\xdc\x84\xab\x2f\x4b\x85\x8d\x9f\x0b\xf1\x2c\x44\x9f\x63\x88\x36\xc8\xf7\xe1\x8b\x87\xf3\xc5\xf5\xf8\xf2\xe3\x64\x71\x73\x3e\x9a\x7e\xed\xbd\x78\x78\x73\x3d\xff\x38\x1d\xbd\xbf\x9e\x5d\xbf\x9b\xfc\x9d\xe2\x7c\x2d\x37\xa7\xaf\x20\x6f\x9a\x2b\xab\xac\x4b\xe1\xf3\x92\x08\x20\x6f\xb5\x15\x4c\x40\xb7\xe9\x4f\x47\x83\xed\x8b\x76\x7b\x54\x92\x0c\x03\xda\xcc\xc0\x8a\xf1\xbc\xfa\xdd\xe9\xd5\x40\xf6\xf5\x71\xfc\xcf\xf8\xe4\xd0\xd6\xa8\x56\xe4\xd4\xf2\xe1\x4f\x85\x31\x75\x81\x6a\xd5\x29\x68\x78\x3a\x3f\x15\x18\x58\x89\x3a\xf2\xfb\x81\x4a\x7f\xa0\xd2\x1f\xa8\xf4\x07\x2a\x35\x4e\xc8\x3b\xb7\x0c\x61\x65\x05\xe9\xfe\xdc\x0d\x77\x47\xd9\x37\xe0\xa2\x9a\x39\xcc\x28\xba\xc7\x63\xb4\xc4\xd4\x76\x03\xf0\x28\x04\x24\x4e\x27\x2c\xb5\xa3\x8f\x50\x02\x72\x30\xe4\x1f\x34\x10\x4b\x82\xf2\x29\x43\x99\x8b\x54\xf7\x79\x50\x95\xa2\xb4\x51\x81\x52\x63\x6a\xca\x92\x3b\x73\x83\x0d\xce\x2f\xd9\xe7\xdc\x40\x58\x4d\x82\xe7\x81\x5b\xf4\xa8\x5c\x5b\x99\x83\xc7\xfb\x55\xb5\xa4\x0e\x4c\x67\x83\x9a\x07\x31\x6b\x32\xc5\xdf\xaa\x41\x3e\xd8\x83\xf7\x9f\x81\xf6\x43\xac\xff\x4d\x48\xbf\x8d\xf3\xf7\xa0\xfc\x3d\x18\x7f\x37\xc2\x7f\x2a\xbe\x6f\xa0\xfb\xa7\x63\xfb\x5a\x50\xe9\x38\x0e\x9f\x56\x50\x7b\xd7\x38\x8a\xcf\xdc\xe8\x12\x17\x4d\x64\xef\xf2\x24\x61\xc5\xd6\xcd\x2c\xe3\x0b\xf8\x70\x6b\x7c\x66\x86\x12\x80\x9a\x7e\x3e\x89\x8f\xab\xec\x74\xc3\x5c\x65\x7c\x6b\x63\x95\x94\x1a\x21\x6a\x07\x04\xd3\x5e\xbd\x60\x45\xa8\xea\x4a\x4a\xde\xef\xa4\xe4\x2c\xdd\x3f\xc4\x74\x6d\xac\xde\x75\xb6\xe4\x89\x8a\x22\x30\x05\xbd\xad\xd1\x70\xe7\xbd\xfc\x8b\x47\x5b\x71\x66\x57\x1e\x06\x38\x03\x02\x97\x2e\x51\x72\x37\x67\x63\x24\xe4\xac\x4c\x12\x2c\xc4\xaa\xa4\xd6\x73\x3b\xd9\x01\x8a\xb2\x91\x76\xa5\x2f\x32\x93\xaa\x89\xaf\xb7\x43\xa8\xd1\x6f\x28\x5b\x22\x3a\xc3\x52\x42\xda\x54\x21\xd9\x10\xf4\x28\xc6\x5d\xcc\x53\x52\x06\x9d\xef\x0a\xd6\x62\x5e\x70\x92\x4b\x67\xb7\x00\x35\xec\x12\xe8\xae\x8d\x3b\x7d\xde\xf5\x68\x1c\xd4\x66\xee\xb3\x0d\xa6\x61\xf8\x67\x19\xca\x21\x72\xff\x12\x39\xfc\x1e\x25\x70\x37\xe5\x96\x0c\xad\x49\x72\x80\xbf\x14\x8c\xcb\xe8\xf6\xfa\x76\x34\xbe\x9e\x8c\xec\x1b\xe3\xf4\xc5\x5f\x71\xb2\x61\xd1\xe1\x8b\x07\xcf\x79\x3f\x9a\xaa\xe7\xc6\xd7\xc3\xe8\xff\x51\x52\xca\xa8\xb7\x3a\x8e\x7a\xe9\x51\xef\xe8\x6f\x4e\x89\x7a\x95\xcc\xde\x9e\x3d\x6d\xf1\x89\x5d\xdc\x3d\x38\x0e\xe0\x3d\xb4\xc8\x08\x32\x10\xc3\xa2\xde\x06\xf1\x34\x32\xcf\x1f\xd8\xa8\x1a\xb6\x1c\x68\xe0\x64\x2e\xeb\xec\xa2\xec\xea\xef\x5f\x33\x73\xc3\x52\xb6\xcd\xb8\x47\x6a\x51\x2e\x01\x0d\x6c\x9a\x83\x90\xb3\x3c\xe5\x8c\xa4\x63\x70\x5f\xac\xfe\x83\xe8\xa8\x5e\xe3\x8c\xaf\xdd\x43\x29\x21\x41\x8b\xd3\x4b\x3e\x7e\xa4\x6e\xd1\xad\xd3\x1d\xb4\x55\x2d\xd3\x53\x22\xea\x51\x52\x65\xee\x06\x23\x2a\x37\xdb\x60\x74\x92\xbf\x6d\x92\x7c\x6d\x1a\x13\x85\xb9\x00\x4f\x05\xf5\xca\xd0\x7c\x21\xd0\x1b\xea\x86\xfc\x9f\x70\xd3\xff\x42\x09\xa8\x58\x3e\xa4\x0d\x74\x1a\xd9\x3f\x0f\x55\x3b\xaa\x7e\x58\xe6\xef\xf2\x2b\x80\x2b\x55\x27\x6c\x50\xfd\x89\x05\xbe\xe5\xf8\x9e\xb0\x52\xe8\xc4\x3e\x13\x53\x87\xa0\x02\x24\xb8\x53\x24\x50\x33\x93\xaa\xd3\xee\x51\xb2\x43\x20\x50\x71\x89\xa9\x44\xef\x11\x2d\x2b\x1c\xdc\xa0\xb6\xac\x2a\x02\x37\x21\xba\x15\x44\xf4\x12\xc0\xb9\x50\x64\x5f\x05\x8e\x2a\xa1\x83\xab\xcd\xe7\x4c\x22\x7a\x46\x69\xbf\x9b\xf3\x96\xac\x37\x3b\x58\x13\xc6\x33\xb4\x6b\xdd\x98\x7d\xae\x38\x2b\x6d\xe0\xf6\x4e\x01\x5d\xed\x63\xca\x77\x10\xb1\x57\x75\xbe\xa9\xe8\x8d\x35\x1d\xba\xcc\xc1\xf6\x69\x33\x12\x4d\x7d\x76\x5d\x87\xc6\xda\x6d\xaa\x58\xad\x8c\x0f\x9f\x25\x4d\x2f\xa1\x0b\x27\xf2\xa6\xfe\xe2\xeb\x62\x55\x35\x38\x57\xc3\xaa\xa2\x94\x78\x82\x3f\xdb\xae\xd0\x20\xd6\xea\xf5\x14\x0b\x46\xef\xf1\xd4\x62\xfd\x5b\x24\x37\xf5\x7a\xdd\x29\xe0\xb3\x09\xa9\xb7\x5b\xde\xb2\x4c\x50\x19\x20\xaf\xac\x90\xad\x3e\xcf\x2e\x12\xfb\x46\x84\x58\xc0\x01\x55\xd5\x15\xdd\x7d\xe0\x53\x09\xe5\x34\xfe\x7d\x01\xff\xc3\x45\x20\x95\xcf\x78\xb2\x51\xd3\x27\x1f\xd2\x5a\x02\x42\x39\x80\xf2\x52\x6b\x55\xd2\x06\xad\xd5\x77\x01\x77\x05\x7c\xb7\x46\xfd\x45\x74\xcc\xf2\xf5\x4c\xa6\x84\x85\x7f\x26\xad\x88\xa1\xfa\x4b\x24\x91\xbf\x60\x80\x16\x4c\xb5\x9b\x25\x88\xe2\x2b\xa4\xbb\x2b\x9c\x0c\x2a\x76\x8b\xdc\x55\xca\x77\x5e\x76\x8f\x05\xcd\x63\xb5\xdb\x78\x37\x2a\x5e\x2b\x4b\x65\xfa\x13\x4c\x75\x1c\xd8\x8a\xe3\x84\x14\x04\x10\x74\x70\x09\x15\x6f\x46\xef\x48\xcd\xf9\x16\x36\x8d\x43\x88\xb9\x57\xa4\x82\x4e\x39\x64\xcb\x75\x9e\x92\x7b\x92\x96\x60\x52\xf7\x12\x6c\xd1\xbb\xac\x61\x4e\xbf\xe7\xea\x01\xae\xeb\xb8\xbc\xe3\xd6\x6d\x18\x55\x7f\x4e\x17\x6d\x70\x88\xea\x80\x46\x75\xc4\x9c\x6e\xaf\x57\x2d\x9c\xd6\x22\x3b\x79\x35\xae\x14\xf2\x1d\xb0\xad\x64\x40\xf0\x07\x50\x03\x83\x51\x56\xc8\xad\x3d\x9b\x1f\xaa\xb4\x18\x5d\x76\xe9\xbe\x58\x77\x70\xe0\x2f\xd2\x0c\xdf\x6b\x7f\xf7\x40\x25\x40\xb3\x2c\x4e\xc0\xeb\xbc\xcc\xc4\x56\x48\x9c\x89\xb8\x06\xde\x62\x8d\x25\xfc\xb0\xd4\xbe\x12\x62\xed\x5f\x37\x39\xb5\x68\xd7\xc7\x97\x5e\xd2\x1a\x0a\x1f\xc3\x33\xfb\xe7\xf0\x99\x5d\x1b\x3a\x76\x8f\xe8\xde\xa8\x04\xb8\x27\x6a\x6a\x69\x76\x44\x1c\xba\x3a\x14\x21\xd1\x18\x7e\x86\x2f\x78\xab\x3e\x5b\xc2\xe6\xff\x2e\x71\x89\x53\x33\xc2\x11\xd5\x6b\xb1\x83\x57\x9d\xa3\x6b\xac\xb7\xfb\x20\xc3\x00\x9c\xd5\xc7\xa8\xa9\x7f\x0b\x07\x0f\x15\x13\x6c\x2d\x7f\xa8\x44\xea\x94\xb6\x8e\xff\xbe\x9e\x7a\x24\x52\x6a\x31\xd2\x30\x46\xe1\x2e\x4e\xfe\x87\xd3\xda\x1e\xcd\x28\xa8\x49\xf6\xac\xa8\x82\x84\xbf\x3e\x23\x08\x1e\xdd\xae\x39\x8e\xee\x52\xfa\xdd\xa3\xeb\x1b\x23\xec\x1b\xa2\xac\x33\xd2\x34\xb1\x08\xc7\x12\x81\x17\xfd\x8b\x58\x34\x8d\x94\x12\x35\xe1\xad\x66\x10\x15\x29\x14\xb4\x46\xff\x40\xe4\x66\xc2\x82\x03\xd9\x9b\xee\x62\xef\x4e\xa7\x67\xba\xb4\x71\xdb\xe7\xab\x6b\x07\x3b\x98\x24\x78\x13\x05\x23\x83\x3f\x02\x00\x00\xff\xff\xef\x45\xef\xdb\x52\x26\x00\x00")

func templatesJenkinsNormalJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsNormalJobXml,
		"templates/jenkins/normal-job.xml",
	)
}

func templatesJenkinsNormalJobXml() (*asset, error) {
	bytes, err := templatesJenkinsNormalJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/normal-job.xml", size: 9810, mode: os.FileMode(420), modTime: time.Unix(1444050804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsPipelineXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templatesJenkinsPipelineXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsPipelineXml,
		"templates/jenkins/pipeline.xml",
	)
}

func templatesJenkinsPipelineXml() (*asset, error) {
	bytes, err := templatesJenkinsPipelineXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1443542096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templatesJenkinsMultiJobXml,
	"templates/jenkins/normal-job.xml": templatesJenkinsNormalJobXml,
	"templates/jenkins/pipeline.xml":   templatesJenkinsPipelineXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"jenkins": &bintree{nil, map[string]*bintree{
			"multi-job.xml":  &bintree{templatesJenkinsMultiJobXml, map[string]*bintree{}},
			"normal-job.xml": &bintree{templatesJenkinsNormalJobXml, map[string]*bintree{}},
			"pipeline.xml":   &bintree{templatesJenkinsPipelineXml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
