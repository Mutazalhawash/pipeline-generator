package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_jenkins_multi_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x73\xdb\x36\x10\xbd\xfb\x57\x70\x74\xf1\x49\x90\x9d\x36\x9d\x1c\x68\xe5\x43\x89\x67\xd2\x89\x15\x8d\x14\x8d\xcf\x10\xb9\x96\x60\x81\x00\x07\x00\x5b\xa9\x99\xfc\xf7\x2e\x40\x00\x04\x4d\xa5\xb5\xc6\x39\x99\xd8\x2f\x2c\xde\xbe\x7d\x72\xfe\xf6\x50\xf1\xec\x2f\x50\x9a\x49\x71\x73\x79\x4d\xae\x2e\x33\x10\x85\x2c\x99\xd8\xde\x5c\xae\xbf\xdd\x8e\xdf\x5c\xbe\x9d\x5e\xe4\x85\xac\x88\x61\x7b\xca\xc9\x23\x88\x3d\x13\x9a\xd4\xbc\xd9\xda\xbf\x55\xc3\x0d\x7b\x94\x1b\x72\x67\x3f\xfe\x94\x9b\x85\x92\x8f\x50\x98\xac\x0d\xb8\x19\xf9\x84\x71\x08\x1c\xb7\x8e\x77\xd7\xe4\xfa\xf5\x68\x7a\x91\x65\x39\x2d\x0c\xde\xae\x27\xee\x50\x82\x2e\x14\xab\xad\x65\x9a\x4f\xd2\x93\xf5\xee\x01\xea\x8f\x50\x83\x28\xb1\x4b\x06\x7a\xfa\x40\xb9\x86\x7c\x32\xb0\xdb\xe0\x5a\xc9\x1a\x94\xf1\x47\x34\x68\x20\x25\xa3\x1b\x99\xbc\x82\xd5\xc0\x99\x00\xb2\xf0\x1f\x8b\x36\xe7\x18\xdb\x2f\xd1\x8c\xf8\x1c\xc7\x21\x34\xf4\x7f\x45\xde\x90\x3f\x46\x6d\x65\xac\x6d\xa8\xde\xcf\x69\x05\xd3\x9a\x2a\xca\x39\xf0\x0c\x0e\x50\x34\xb6\xf3\x7c\x12\x9d\x21\x5a\x1b\xba\x05\x67\xf9\xfe\x3d\x23\xab\x70\xca\x7e\xfc\xc8\x27\x9d\xaf\xed\x7a\x72\x46\xdb\xee\xdd\x93\xfe\xc3\x73\x5d\x54\x59\xc1\xa9\xd6\x37\xa3\x5d\x53\x6a\x29\x08\x5a\xc8\xbc\xe1\x7c\x35\xbb\x1b\xb5\xb0\x17\x54\x2c\x25\xad\xa6\x46\x35\x08\x67\x38\xb9\x81\x30\x4d\x37\x1c\xca\x00\x75\x3c\x5b\xe7\x86\xcb\x62\xff\xa1\x61\xbc\xbc\xdf\x81\xf8\x28\xff\x16\xda\x28\xa0\x95\x33\x21\x87\x42\xd2\xff\xc6\x0d\x8b\xad\xeb\xe7\x94\x1a\x44\xd9\x42\x46\xb1\xed\x16\x39\xed\x9f\x26\x45\xd1\x28\x05\xc2\xb8\xa0\x50\xe7\xa9\xd9\x75\x60\xbf\x30\xd1\x23\x7f\x06\xeb\x3f\xb4\x99\x71\xc0\xf5\x8e\xea\x76\x88\xee\xeb\x0a\x87\x12\x2d\xbd\x18\xcc\xd5\xc1\x92\x65\xc8\x06\x45\xc5\x16\x90\x13\xcd\xc6\xba\x90\x11\xd1\xf9\x9c\x7e\x16\xa1\xe6\x4c\x8a\x07\xb6\xed\x2a\x63\x3a\xfa\x23\xe5\x1c\xd3\x82\x21\x0d\xb2\x98\x2c\x90\xc2\x95\x0e\x5c\xe8\x0c\x69\x1c\x1c\x6a\xa9\xa1\x44\x06\x05\x40\x13\x4b\x1a\xe8\xf9\x82\x3d\x3d\x61\x90\xb5\xa4\x81\xb8\x38\x1a\x27\xb8\x6c\x38\xe8\x05\x35\x3b\x5c\xff\x81\x29\x8d\xaf\xe8\x61\x09\x38\x6a\x64\x39\xc2\x9b\x9c\x7a\x6d\x0a\x7b\x95\xf5\x1c\x57\x46\x51\x03\xdb\x63\xec\xf7\x84\x6b\x98\x8a\x38\x96\xcc\xe9\x4f\x2f\xad\x33\xa7\x29\xb8\xa4\xca\xbc\xe7\xdc\x3e\xad\x45\x2f\xb5\xf4\x60\x8e\xf9\x8e\x89\x27\x6a\xed\x19\xe7\x6e\x9a\x5f\x05\x26\x2f\x41\xe3\x88\xbb\x5b\x6f\xdf\x7f\xfe\xb2\x5e\x7e\x42\xe5\xfb\xcf\xb0\xb4\xa0\x23\xf7\x57\xc1\x8f\x9f\x1f\x70\x46\xb3\x9d\xe5\x59\x14\xd0\xd3\xce\x8e\x7a\x93\x97\x70\x0f\x09\x87\xca\xdc\x51\xd9\x2f\x43\x4a\x7d\x0b\x88\x61\xa2\xa1\xb6\xed\xae\xff\xd5\x7a\x36\xfb\xb4\x5a\xdd\xae\xbf\x38\x98\x4e\x44\x5c\x3c\xbb\xbd\x13\xab\xea\xdf\xed\x37\x3e\xaf\x9b\x0d\x67\x7a\x17\x05\x00\xfb\x66\x0f\x19\x99\xc3\xc1\xdc\x51\xbc\x99\xa7\x1b\x99\xd3\x86\xd8\x5b\x0b\x54\x10\xd5\x54\xfa\xa8\x0d\x54\x9a\x78\x85\x6d\x6f\x27\xae\x7c\x54\x6b\xaf\x4b\xc4\x75\x10\xa4\xfb\x5b\x6b\x8c\x3f\x38\x2e\x65\xf0\x6b\x73\x4d\x7e\x27\xbf\x8d\x52\xb4\x10\xe1\x56\xe0\xda\x2d\x8b\x92\xea\x7f\x7f\xed\x62\x6b\xb7\xea\x83\xf6\x71\x03\x4f\x47\x7b\x2c\x7f\xed\xc3\x22\x94\x09\x05\x3a\x99\xb3\xcd\xf5\x50\xed\x5d\x83\x53\xb4\xca\x03\x06\x14\xfb\x07\xca\xde\x35\x4f\x71\xeb\x45\x8e\x7d\xe8\xbb\x57\xe4\xd5\xeb\x01\x6c\x09\xaf\xcf\xbd\xee\x84\xac\x0e\x8a\x3e\xbb\xf0\x5c\x96\xb0\x08\x8e\x6e\x98\x81\xd1\x83\xb2\xf6\x3f\x1a\x3b\x2d\xdd\x49\x78\xb4\x9c\x16\x17\xbf\x3f\x3f\xd3\x18\xdf\xc8\x3d\x33\xbb\xb9\xec\x3a\x09\xa2\xf0\x33\x77\x22\x0b\x2f\xc3\xef\xc9\x2b\xcf\x2f\x37\x24\x17\x42\xd2\xdb\xe2\x56\xf6\xee\x15\xad\xeb\x16\xe3\xb3\xb4\xc2\xaf\xc7\xf4\xe2\xdf\x00\x00\x00\xff\xff\x09\x99\x6b\x44\x29\x0b\x00\x00")

func templates_jenkins_multi_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_multi_job_xml,
		"templates/jenkins/multi-job.xml",
	)
}

func templates_jenkins_multi_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_multi_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/multi-job.xml", size: 2857, mode: os.FileMode(420), modTime: time.Unix(1423172303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_normal_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xdd\x6f\x1b\xb9\x11\x7f\xd7\x5f\xb1\x70\x03\xb8\x3d\x54\xab\x38\xd7\xe2\xae\x80\xac\x4b\x2c\x2b\x39\x15\xb6\x63\x58\x52\xf2\x78\xa0\x76\x47\x12\x4f\xdc\xe5\x82\xe4\x3a\x56\xdd\xfc\xef\x1d\x7e\xed\x72\x3f\xe4\xd8\xe8\xbd\x1c\x10\xe8\x45\x9c\x19\x92\xf3\x3d\x3f\xee\xf8\x97\x87\x8c\x45\xf7\x20\x24\xe5\xf9\xf9\xe9\x59\xfc\xfa\x34\x82\x3c\xe1\x29\xcd\xb7\xe7\xa7\xab\xe5\xfb\xe1\xcf\xa7\xbf\x4c\x06\xe3\x42\xf0\xdf\x21\x51\x93\x41\x14\x8d\x49\xa2\x50\x58\x8e\xcc\x22\x05\x99\x08\x5a\x68\x8a\x25\xec\x01\x8a\x4b\x28\x20\x4f\xf1\x1c\x0a\x72\xb2\x21\x4c\xc2\x78\xd4\xa1\x6b\x61\x3c\xb6\x00\xa1\xdc\x12\x09\x12\xe2\x94\x92\x35\x67\xf1\xef\x90\xef\x69\x2e\xe3\x82\x16\xc0\x68\x0e\xf1\xad\xfb\x73\x6b\xf7\x1c\xa2\x82\x95\x5b\x9a\x9f\x9f\xa4\x48\x46\x0b\x0e\x43\x2f\x3a\xb4\x9c\xb7\xaf\xe3\x9f\xe3\x9f\x4e\xec\xc9\x78\xb6\x22\x72\x7f\x43\x32\x98\x3c\x3e\x46\xf1\xd2\x2d\xa2\xaf\x5f\xc7\xa3\x8a\xe3\x45\xa5\x22\x5b\xa8\x64\x17\x7e\x65\x84\x6b\x9e\x55\x79\xf4\x02\x9d\x8d\xd1\xa3\xa6\xd5\x78\x03\xdd\x44\xf1\x5c\xce\x73\xaa\x28\x61\xff\xe6\x6b\xbc\x47\x0b\xca\x24\x8b\x12\x46\xa4\x3c\x3f\xd9\x95\xa9\xe4\x79\x6c\x0d\x93\xf1\x96\xaa\xf8\x03\x55\x8b\xe9\xf5\x49\xe5\x06\xa4\xbd\x7d\x13\xbf\x89\xff\xe5\x2c\x1e\x27\x3c\xdf\xd0\xed\x27\x1b\xdb\xc9\x9b\xf1\xa8\x49\xb0\x42\xa5\x04\x71\x07\x19\x57\x30\x35\x5c\x59\xf9\xa0\xe7\xca\x55\x4b\xd8\xcb\xea\x73\x04\x33\xbe\x42\xad\x56\x77\x57\xc6\x51\x9a\xe4\x0f\x1b\x3d\xfb\x34\xdc\xd7\xaf\xd2\x78\x2d\x48\x9e\xec\xe0\x49\x0d\x2f\x8c\xcc\xa2\x80\x24\xd0\x2d\xd7\xc1\xfa\x61\xa4\xd5\xab\xf9\x74\x43\x41\x18\x3d\xf3\x30\xf2\x7d\x8a\xb6\x0f\x1d\x8f\x9a\xaa\x8c\x53\x2a\xc9\x9a\xc1\xa2\x5c\x67\x3c\x2d\x59\x9d\xf4\x5d\x86\xdd\x20\x20\x29\x31\x0a\xf7\x21\x47\x89\x12\x77\xf4\x71\xdc\x25\xfc\x03\xe4\x20\x88\xaa\x59\xd6\x3f\x25\xd2\x74\x41\x56\x97\x7e\x53\xd0\x1e\x48\x4a\xb5\xe3\xe2\xa3\x98\xf2\x2c\xa3\x4a\x81\xf0\x07\x74\x19\x2e\xa1\x18\x90\xdc\x44\x79\xaa\xff\x7d\xe6\x62\x2f\x0b\x92\xd8\xb2\xb0\x4c\x2b\xf8\x05\xd3\xfe\x63\xa9\x2a\x01\x7f\x70\x87\x6e\xc5\x0b\x51\xe6\x70\xe1\x5d\xea\x64\x9b\x44\xef\x36\x9d\x15\xb7\x9c\x31\x2f\x15\x50\xac\x08\xdd\xe6\x5c\xc0\x0d\x57\x74\x73\xb0\xfa\x7b\xd1\x1e\x4e\x55\x02\x8b\x1d\x61\x8c\x7f\x99\x32\x9e\x83\x0b\x44\x9b\xea\x72\xb0\xa4\x2c\x9d\xee\x38\xc7\x1c\x7d\xa2\x36\x4b\x45\x59\x7c\x09\x1b\x52\x32\x75\x11\x6c\x39\x19\xb9\x73\x50\x68\xc9\x39\x9b\x38\x99\xf1\xc8\x13\x5c\x1b\xac\x02\xb7\xd9\xfa\x6b\x18\x95\xaa\xda\x2f\x80\x61\x2c\xef\x61\x49\xc4\x16\xd4\x25\x15\x35\x63\x03\x02\x3b\x2c\x78\x02\x3c\x24\xac\x4c\x21\xbd\x83\x6d\xd5\xb5\x03\xb2\x2e\x42\x19\x68\x65\x33\x45\xb7\xb7\x0e\x71\x96\x11\xca\x3c\x55\xee\x69\xb1\x24\x5b\xe7\x2c\xbf\x72\x31\xc8\x1b\x57\x4e\x5c\x87\xd3\x61\xc7\xb1\x82\xca\x62\xc2\xe8\x2c\x6a\x13\x70\x36\x98\x54\x6a\xef\x77\x37\x26\x59\xa8\xd6\x1f\x5e\x0e\xdf\xf4\x39\x3c\x28\xc8\x65\x3d\xfa\x46\xa8\x91\xf9\xa3\x04\xdd\x6e\xd1\x8d\x56\xce\x59\xbb\x2a\xa4\x12\x40\x32\x6c\xe7\xd2\xf6\x73\x94\xf4\x03\xc2\xef\x88\xef\x40\xcf\x5e\x30\x39\xb2\xb4\xc4\x7a\x08\x61\xc3\x19\x55\xab\xd2\x9d\x77\x6b\x27\xb1\xf1\x6a\xfb\x12\xcc\xda\xb6\x54\x35\xfc\x76\x02\xe4\x8e\xb3\xb4\xdd\x17\x17\xab\xe9\x74\xb6\x58\x34\xdb\x20\x32\xb9\x40\x0c\x40\xd8\xe4\xf5\x78\xe4\xff\xd6\xcc\x84\x33\x2e\x26\x17\x57\xab\x99\x9e\x2a\xfa\x7f\xc8\xcb\x0a\x06\xca\xda\xe4\xf2\xa3\x49\xab\x7a\x6d\x4b\xa9\xf1\xe8\xf9\xfe\xa9\xd2\x65\x10\x8e\x82\x6a\x1f\x4e\xc6\x3e\x77\x4e\x7e\x88\xdc\x0f\xa3\x17\x0c\x09\xd7\x36\x6e\xb9\x54\xb6\x35\xfc\xca\xf9\x5e\x36\x3b\x47\x9b\x39\x68\xcc\x8b\x23\x37\xa3\x8d\x41\x72\xd8\xf6\xf1\x59\x90\xa2\xa8\xd2\xa5\x3d\xc5\x08\xa6\x98\x71\x69\xfc\x0e\xff\x4d\xf5\xbf\x8b\x60\x57\x35\xee\x2b\x39\x84\x39\xff\x88\x5f\xd7\x30\xc7\x10\xaf\x49\x61\x20\x0a\xa6\xac\xc8\x5c\x8c\x3c\x6d\xd0\x3b\xe8\xbe\x71\xef\xf3\xf1\x99\xc3\x17\x58\x63\x68\xfa\xba\x54\x5c\xbc\x18\xa9\x39\x3c\xba\x04\xcc\x1a\xac\xdb\xc9\xab\xc7\x8b\xd5\xfc\xea\xf2\xb7\x9b\xd5\xf5\xc5\xec\xee\xeb\xf0\xd5\xe3\x87\xf9\xf2\xb7\xbb\xd9\xa7\xf9\x62\xfe\xf1\xe6\xef\x0c\xf2\xad\xda\x9d\xff\x84\xf9\xdf\xde\x59\x57\x4f\x8a\xcb\x4b\x2a\x91\x7c\x30\x5e\x70\x5d\xbe\x43\x7f\x3e\xa8\xeb\x1a\x6a\x23\xde\x09\xb2\xce\x55\x4c\xa4\x3f\x21\xaa\x33\x3d\xa1\xd3\x1a\x70\xc6\x98\xe2\xd1\xe3\x77\x23\x9b\x58\xeb\x3b\x0e\xfc\x8e\x03\xbf\xe3\xc0\xef\x38\x30\xea\xe2\xc0\x51\x0f\x90\xab\x41\xd4\x9f\x7b\x34\x1e\xe9\xfa\x16\xa1\xd4\x8f\xfc\x05\x23\xf7\x70\x45\xd6\xc0\xdc\x30\xc0\x88\x62\x3e\x42\x7a\xc3\x53\xf7\xad\x21\x94\xc0\x12\x0c\xf9\x83\x26\xec\x19\x27\x24\xbf\xe3\x24\xf3\x89\xed\x97\x83\xba\x13\xa5\xad\x06\x94\x5a\x57\x33\x9e\xec\xad\x05\x3b\xc8\x2f\xf9\x97\xdc\x82\x46\x43\x42\x40\xee\x37\x7d\x53\xae\x7b\x98\x07\xa4\x4f\x1f\xd5\x91\x1a\xd8\xc1\x86\x2d\x0f\x73\xd6\x56\x4a\x65\x55\x8b\x3c\x78\x02\x61\xbf\x00\x5f\x87\xe8\xfa\xff\xc2\xd6\x5d\x64\xfd\x04\xae\x7e\x02\x55\x1f\xc7\xd4\xcf\x45\xd4\x2d\x3c\xfd\x7c\x34\xdd\x48\x2a\x93\xc7\xe1\x63\x06\x5b\xef\x16\xa2\xf8\x9d\xc0\x86\x49\x12\x75\x09\x45\x1b\x75\xfb\x3a\x49\x78\x71\x20\x4e\x2c\x9e\xe2\xc2\xef\xa9\x2a\x33\x94\x78\x7b\x16\xff\xf8\x26\x3e\xab\xab\xd3\x7f\x63\xd4\xce\x77\x3e\xd6\x45\x69\xb0\x9c\x09\x40\xf0\x11\xd2\x6c\xd8\x50\xa6\x87\x92\x96\xaf\x6e\xd2\x72\x8e\x5e\x3d\x7d\x4c\x6f\xac\x5f\x52\xae\xe5\xc9\x9a\x22\x81\xe1\xb9\xfc\x58\x27\x6f\xd8\xe5\xfc\x06\xa9\xf1\xe2\xc2\xed\x3c\x09\x60\x06\x26\x2e\x5b\x93\x64\xbf\xe4\x57\x44\xaa\x45\x99\x24\x20\xe5\xa6\x64\x2e\x72\x47\xd9\x01\x88\x72\x99\xf6\xde\x18\xb2\x50\x7a\x86\x6f\x0f\x13\xec\xd1\x1f\x18\x5f\x13\xb6\x00\xa5\xb0\x6c\xea\x94\x6c\x09\x56\x20\xc6\x1b\x56\x51\x52\x8e\x83\xef\x3d\xee\x05\x51\x08\x9a\x2b\xef\xb7\x00\x34\x1c\x13\xe8\xef\x8d\x47\x63\xfe\xe4\x33\x8d\xc8\x3d\xbe\x94\x76\xc0\xc2\xf4\xcf\x32\x92\x63\xe6\xfe\x25\xf2\x48\x3b\x4a\xd0\x36\x1d\x96\x8c\x6c\x69\x32\x80\x87\x82\x0b\x15\xdd\xce\x6f\x67\x57\xf3\x9b\x99\x7b\x0d\x9c\xbf\xfa\x2b\x24\x3b\x1e\x9d\xbc\x7a\xac\x38\x9f\x66\x77\xfa\x61\xf0\xf5\x24\xfa\x6f\x94\x94\x2a\x1a\x6e\xce\xa2\x61\x7a\x3a\x3c\xfd\x9b\x3f\x44\xbf\x1f\x16\xbf\xbe\x7b\xde\xe6\x37\x6e\x73\xff\x97\xda\x00\xdd\xe3\x88\x8c\xb0\x02\x01\x37\x0d\x77\x44\xa4\x91\x7d\xa8\xe0\x45\xf5\xe7\x8d\x81\xc1\x4d\xd6\x58\xef\x17\xed\xd7\xca\xfe\x86\x9b\x5b\x9e\x72\x63\xc6\x3f\x27\x8b\x72\x8d\x68\x60\xd7\xfe\xf4\x60\xb1\x4d\xbf\xd3\xaf\x71\x76\x07\xa3\x32\x33\x4b\x2c\xc5\xb3\x60\x4c\x22\xf6\xa4\x05\xc5\x8e\x1b\x94\x48\x8a\xaf\x1c\x7b\xee\x4c\xbf\xe0\x56\x38\x0a\xf4\x40\x09\x5b\xd2\x93\x22\x75\xa9\xe5\xe9\x92\xcf\xf3\x94\xde\xd3\xb4\xc4\x9c\xf3\xc8\xa1\x43\xef\x73\x84\xd5\xbe\x2f\xb5\x9c\xe9\x41\x1f\xe8\x31\xde\x73\xdf\x89\x64\xa7\x1f\xa2\x95\x56\xa4\xca\xf2\x4e\x33\x21\xcd\x02\xd0\x3d\x3c\x67\x87\xf9\xa6\x53\xd7\x1d\xb2\x97\xd7\x0f\x51\xa9\x3e\x22\xdb\x49\x06\x84\x4a\x01\x0d\x30\x67\x59\xa1\x0e\x4e\xb7\x0a\x83\x77\x18\x7d\x7e\xe9\x37\xac\xd7\x43\x37\xf0\xa0\xae\x49\x5e\x9a\xf4\xad\xbf\x4c\x91\x12\x4b\x39\x8b\x13\x8c\xba\x28\x33\x79\x90\x0a\x32\x19\x37\x8a\x3d\x36\xb9\x57\x3d\x83\xdd\x54\x89\x4d\x7c\xfd\x9b\xd8\x75\xc7\x2a\xbf\xcc\x96\xce\x73\xff\x0c\x61\xd9\x8f\x21\x2c\x33\xcf\xbb\x30\xd9\x3c\xd4\x08\xe6\x80\x8d\x4d\x47\x7d\x9d\x77\xbd\xd2\xce\x4f\x7f\xac\x61\x47\x1c\xeb\x66\xa4\x56\xae\xe1\xd5\x56\xb3\x2c\x88\x40\xd5\xb0\x53\xd3\xff\x40\xda\xb8\xa6\xed\xb7\x86\xe4\xd0\x89\xea\x0f\x01\xff\xec\xb8\x2d\x98\x1b\x2f\xbd\xae\xfd\xde\xef\x3b\xf4\xd9\x07\x6b\x88\x7a\xeb\x19\x75\x30\x7d\x77\xeb\x1c\xeb\xe7\xbd\x8d\x6b\x38\xe0\x65\x5b\xa3\x94\xea\xf7\x6a\x0d\xa9\x6a\x52\x28\xe8\x14\xf9\x4c\xd5\xee\x86\xd7\x9a\xf8\x4a\x3a\xc6\xae\xdd\xd7\x9e\x6d\x2f\xf4\x5f\xcb\xca\x97\x1f\xd7\x4d\x2e\x74\x49\xd0\xe2\x03\x04\xf4\xbf\x00\x00\x00\xff\xff\x5e\x75\xba\xa1\xb8\x1d\x00\x00")

func templates_jenkins_normal_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_normal_job_xml,
		"templates/jenkins/normal-job.xml",
	)
}

func templates_jenkins_normal_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_normal_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/normal-job.xml", size: 7608, mode: os.FileMode(420), modTime: time.Unix(1425475411, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_pipeline_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templates_jenkins_pipeline_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_pipeline_xml,
		"templates/jenkins/pipeline.xml",
	)
}

func templates_jenkins_pipeline_xml() (*asset, error) {
	bytes, err := templates_jenkins_pipeline_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1423648470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templates_jenkins_multi_job_xml,
	"templates/jenkins/normal-job.xml": templates_jenkins_normal_job_xml,
	"templates/jenkins/pipeline.xml":   templates_jenkins_pipeline_xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"jenkins": &_bintree_t{nil, map[string]*_bintree_t{
			"multi-job.xml":  &_bintree_t{templates_jenkins_multi_job_xml, map[string]*_bintree_t{}},
			"normal-job.xml": &_bintree_t{templates_jenkins_normal_job_xml, map[string]*_bintree_t{}},
			"pipeline.xml":   &_bintree_t{templates_jenkins_pipeline_xml, map[string]*_bintree_t{}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
