// Code generated by go-bindata.
// sources:
// templates/jenkins/multi-job.xml
// templates/jenkins/normal-job.xml
// templates/jenkins/pipeline.xml
// DO NOT EDIT!

package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJenkinsMultiJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdd\x6f\xdb\x36\x10\x7f\xae\xff\x0a\xc1\x2f\x01\x06\x44\x4a\xba\x0f\x74\x80\xe2\xb6\x71\xda\xa2\x43\x9b\x78\x76\xbc\x3c\xd3\xd2\x59\x66\x4d\x89\x02\x49\xa5\xf1\x8a\xfe\xef\x3b\x7e\xc9\x94\xa5\x34\x49\x57\x0c\xcb\x4b\xc5\xfb\xe2\xf1\xee\x77\x1f\x6e\xfa\xf2\xae\x64\xd1\x2d\x08\x49\x79\x75\x76\x74\x1a\x9f\x1c\x45\x50\x65\x3c\xa7\x55\x71\x76\xb4\xbc\x7e\x7b\xfc\xe2\xe8\xe5\x64\x94\x66\xbc\x8c\x15\xdd\x12\x16\x7f\x82\x6a\x4b\x2b\x19\xd7\xac\x29\xf4\xbf\x65\xc3\x14\xfd\xc4\x57\xf1\x47\xfd\xf1\x07\x5f\xcd\x04\xff\x04\x99\x8a\xac\xc0\xd9\xd8\x29\x1c\x7b\xc1\x63\xcb\x78\x75\x1a\x9f\xfe\x3a\x9e\x8c\xa2\x28\x25\x99\xc2\xdb\x65\x62\x0e\x39\xc8\x4c\xd0\x5a\x53\x26\x69\x12\x9e\x34\x77\x0b\x50\x5f\x40\x0d\x55\x8e\x5e\x52\x90\x93\x35\x61\x12\xd2\xa4\x47\xd7\xc2\xb5\xe0\x35\x08\xe5\x8e\x48\x90\x10\xe7\x94\xac\x78\xf0\x0a\x5a\x03\xa3\x15\xc4\x33\xf7\x31\xb3\x3a\xbb\xd6\xfd\x1c\xc9\x18\x9f\xdd\xb1\x17\xf5\xfe\x9f\xc4\x2f\xe2\xdf\xc6\xd6\x32\xda\x56\x44\x6e\x2f\x49\x09\x93\x9a\x08\xc2\x18\xb0\x08\xee\x20\x6b\xb4\xe7\x69\xd2\x32\xbd\xb4\x54\xa4\x00\x43\xf9\xf2\x25\x8a\x17\xfe\x14\x7d\xfd\x9a\x26\x7b\x9e\xf5\x3a\x79\x82\xdb\xe6\xdd\x49\xf7\xe1\xa9\xcc\xca\x28\x63\x44\xca\xb3\xf1\xa6\xc9\x25\xaf\xda\xe4\x15\x54\xc5\xef\xa8\x5a\x4c\x3f\x8e\xdb\x07\x23\xed\xd5\xf3\xf8\x97\xf8\x04\xdf\xf6\xec\x19\x66\xbe\x5a\xd3\xe2\x2f\x8b\x90\xc9\xf3\x34\xe9\x12\xb4\x48\x23\x41\xcc\xa1\xe4\x0a\xa6\x86\x27\x35\xf5\x59\x3a\x70\xd7\xf2\x40\xd2\x08\xa2\x01\xc1\x4c\x1c\xd0\x95\xe5\xfc\x83\x09\x82\x26\x19\x2b\xc9\x23\xcd\xa0\xca\x90\x1b\xe9\x4a\x90\x2a\xdb\xc0\xfd\x3e\x9d\x1b\x81\x45\x0d\x99\xf3\xa6\xd2\xa1\xff\x29\x29\x89\x54\x20\xd2\xc4\x1c\x47\xf7\x78\xd2\x55\x4e\x93\xf0\xb6\x34\xa7\x92\xac\x18\x2c\x9a\x55\xc9\xf3\x86\xed\xd1\xda\x67\xd8\x4c\x0b\x04\x0c\x86\xf5\x36\xe4\x28\xd1\xa0\xc6\x10\xc7\xea\xe4\xfc\x1d\x54\x20\x88\xda\xb3\xec\xf3\x1b\xa4\xe9\xb2\x6a\x2f\x7d\x50\xd0\x1a\x24\x8d\xda\x70\x71\x25\xa6\xbc\x2c\xa9\xc2\x10\x78\x03\x7d\x86\x55\xc8\x18\x90\xca\xe4\x6f\xaa\xbf\x6e\xb8\xd8\xca\x9a\x64\x16\xcc\x96\x69\x05\x3f\x23\x58\xaf\x1a\xd5\x0a\x78\xc3\x3d\xba\x15\xaf\x45\x53\xc1\xb9\x0f\xa8\x93\xed\x12\x7d\xd8\x74\xd2\x67\x9c\x31\x2f\x15\x50\xac\x08\x2d\x2a\x2e\xe0\x92\x2b\xba\xde\x59\xff\xbd\xe8\x00\xc7\xaa\x20\x9c\x16\x1b\xac\x64\xfe\x79\xca\x78\xd5\x3a\x7b\x48\xb6\xc2\xab\x86\xb2\x7c\xba\xe1\x1c\x31\xf8\x8d\x5a\xc3\x76\xc0\xe2\x0b\x58\x13\xec\x85\xe7\x81\xca\x38\x71\x76\x50\xe8\x9a\x73\x36\x71\x32\x69\xe2\x09\xae\x81\xb5\x99\x5b\x17\xfe\x1a\x46\xa5\x6a\xf5\x05\x30\x4c\xe6\x2d\x5c\x13\x51\x80\xba\xa0\x62\xcf\x58\x83\xc0\xde\x08\x9e\x00\x77\x19\x6b\x72\xc8\xe7\x50\xb4\xcd\x37\x20\xeb\x12\x93\x81\x57\x16\x2a\xba\x2b\xf5\x88\x6f\x4a\x42\x99\xa7\xca\x2d\xad\xaf\x49\xe1\x60\xeb\x4f\x8e\x97\x95\xa1\x81\x1f\x8e\xdc\x07\xa3\x03\x77\x0a\x2a\xe9\x9e\x8b\xd5\x8a\x0e\x4d\x46\xba\x43\x66\xa4\x9a\x73\x52\x3a\xaf\xfd\xc9\x8c\x23\x5b\xaa\xf9\x41\xe9\xe6\x86\xb9\x62\x3c\xdb\x9a\x3c\xde\x6c\xa0\xba\xe0\x9f\x2b\xa9\x04\x90\xd2\x90\x70\x82\x7a\xa5\x07\xe5\xfa\xc6\x96\xf5\x63\x4c\xf5\xa4\xb4\x21\x25\x68\x51\xf8\xec\xe9\xfe\x8d\xad\x03\x53\x6f\x01\xe7\xed\x1c\x92\x47\x1e\xc4\xa8\xe8\xeb\xfa\xf1\x33\xff\xdc\x6a\xb6\xe3\xad\xde\x10\x69\x47\x98\xf9\x3a\xc1\xba\x6d\x29\x1d\x19\xd4\x95\x9e\x12\x45\xd8\x43\xb0\xb2\x0b\xc0\x89\xd8\xac\x34\x0b\x5b\x48\xcb\x7c\x8c\x3f\x33\x6f\xd3\xcf\x85\xa8\xfd\x4b\x91\xdf\x0e\x5c\xd3\x9a\x3c\x21\x14\xd2\x31\x99\xe1\x00\x2f\x7d\xe3\x0d\x08\xa1\x1c\xdc\xd5\x58\xb7\x39\x0e\x4e\x1f\xd0\x80\x12\x0a\x3a\xbc\xa0\x4f\x07\x08\xd2\x94\x50\x10\xd7\x06\x89\x19\x9c\xeb\xd6\x3e\x23\x6a\x83\xcb\x4f\x8f\x14\xca\x97\xe4\x6e\x0e\x98\x6a\xec\x82\x18\xde\xe0\xd4\x71\xb3\xd2\x57\x69\xce\x6e\xa1\x74\x01\x15\xbb\xd6\xdf\x01\x56\x5f\x15\xe3\x98\x53\xb3\x7d\x75\xd4\xf6\xe4\x50\x05\x57\x14\xa1\x5e\x33\xa6\x9f\x66\xa3\x17\x52\x3a\x61\x6e\xf5\x0d\x12\x07\x6c\x6d\x29\x63\x26\x9b\x57\x15\x2a\xcf\x41\x62\x8a\xf7\xb7\xbe\x7d\xfd\xfe\xc3\x72\xfe\x06\xf7\xbe\x6f\x8a\x85\x06\x0d\xb8\xaf\x2a\xb6\x7b\xbf\xc6\x1c\x4d\x37\x1a\x67\x6d\x87\x19\x66\x1e\x78\x6c\x57\x8a\x28\xf8\x1b\x5a\x27\x70\x87\x99\xc3\x2d\xd5\x5d\xc6\x54\x85\x01\x0f\xe0\xb4\x94\x83\x1b\x56\xc7\x1c\x22\x7c\x85\xcb\xdc\x9f\x0d\x34\x90\xdb\x61\x24\xf7\x05\x3b\xc0\xeb\xaa\x0f\x2d\x28\xf7\xbb\xd3\x79\x5e\xd2\x7b\x9f\xb9\xf1\xbb\xeb\x0d\x8b\x0c\x77\xf1\x7d\xf9\xba\x06\x10\x96\xbb\x0e\xa9\xa2\x55\x63\x5a\xf8\x3e\x67\x8b\xe5\x74\xfa\x66\xb1\x78\xbb\xfc\x60\x9c\x1a\x90\x18\x3d\xda\xbd\x81\xf6\xe4\x72\xed\xde\x9f\xd6\xcd\x0a\x27\xc4\xa6\x0d\x07\xfa\x4d\xd7\x51\x7c\x89\x93\xe2\x23\xc1\x9b\x59\xd8\x85\x70\x35\x8a\xf5\xad\x19\x76\x4d\xd1\x94\x72\x87\x0b\x62\x29\xe3\x4e\xd4\x63\x63\xbe\xdd\xcf\x5d\x2f\x8e\x6d\xec\x1d\xf5\xda\x12\x5b\x3c\x18\x95\xde\xef\x8b\x53\x44\xc8\xcf\xe3\x30\x5a\x07\x09\xfa\x91\xe0\xfb\x17\xd0\xfb\x4e\xd8\xf5\x20\x87\xfb\x80\x9f\x8b\xee\x27\xa4\xee\xce\xd2\xf4\xeb\x5e\x3e\xf4\x52\x30\x28\xed\xc0\xf1\x63\x33\xd5\x62\x23\xc0\x74\x80\x94\x0e\x46\x0e\x82\x51\xfb\x87\xd3\xbf\x21\xef\xdc\x71\x88\x82\x8e\xe4\xb1\x13\xc5\x54\x3d\xff\xfd\x09\x20\x78\xf0\xba\x81\xc1\xf8\x5f\xb4\xb6\xff\x59\x73\xb3\xff\x39\xa0\x51\xb3\xc7\x57\x8b\xac\x96\x33\x3c\xb1\x5c\x83\xba\x6f\x70\xb9\xa0\xdf\x50\xb5\xb9\xe4\x81\x43\xee\xa5\xf7\xb1\xef\x2f\xa7\x27\xa6\xf4\xe0\xb5\x4f\x37\xd7\x07\x3b\x86\xa4\xd3\x26\xed\x2c\xbd\x11\xa4\xae\xed\x9a\xf9\xa4\x66\xec\xca\x75\x32\xfa\x27\x00\x00\xff\xff\x88\x32\x71\x6b\x7c\x12\x00\x00")

func templatesJenkinsMultiJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsMultiJobXml,
		"templates/jenkins/multi-job.xml",
	)
}

func templatesJenkinsMultiJobXml() (*asset, error) {
	bytes, err := templatesJenkinsMultiJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/multi-job.xml", size: 4732, mode: os.FileMode(420), modTime: time.Unix(1443624201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsNormalJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\x7d\x6f\xdb\x38\xd2\xff\x3f\x9f\xc2\xc8\x53\xa0\xcf\x2d\xd6\x72\x93\x16\xfb\x02\x38\xde\x26\xb6\xd3\x66\xd7\x71\x7c\x96\xd3\xbd\xc3\xe1\x10\xd0\x12\x6d\x6b\x43\x89\x82\x48\xa5\xf5\xe5\xfa\xdd\x6f\xf8\x2a\x8a\x92\x9d\xe4\xba\x28\x50\x5c\x50\xa0\xb0\x66\x86\x43\x72\x38\xf3\x9b\xe1\x4b\xfa\xbf\x7c\x4a\x49\xe7\x0e\x17\x2c\xa1\xd9\xc9\xcb\xa3\xe0\xd5\xcb\x0e\xce\x22\x1a\x27\xd9\xfa\xe4\xe5\xf5\xe2\xbc\xfb\xd3\xcb\x5f\x06\x07\xfd\xbc\xa0\x7f\xe0\x88\x0f\x0e\x3a\x9d\x3e\x8a\x38\x08\xb3\x9e\xfc\x88\x31\x8b\x8a\x24\x17\x14\x45\x20\x74\x3d\xa7\x1c\x71\x5a\x74\x22\x82\x18\x3b\x39\xdc\x94\x31\xa3\x59\xc0\x11\xbb\x65\xc1\xc4\xb2\x0f\x85\xb8\xd0\x80\xb6\x6c\x41\x7f\xc3\x38\x1f\x74\x8f\xfa\x3d\xe7\x53\xf1\xb3\x32\x75\xd8\xd5\x97\xe2\xa2\x82\x27\x2b\x18\xd1\xa8\xae\xa5\x85\x5c\x97\x9f\x5a\x3d\x8e\xf4\xd4\x55\xde\xef\x55\x53\x91\xdf\xb7\xc0\x18\xe1\x1c\x67\x31\x58\x28\xc1\x6c\xb0\x42\x84\xe1\x7e\xaf\x41\x17\xc2\x60\xb0\x1c\x83\x5a\xf5\x09\x04\x86\x83\x38\x41\x4b\x4a\x82\x3f\x70\x76\x9b\x64\x2c\xc8\x93\x1c\x93\x24\xc3\xc1\x4c\xff\x98\xa9\x36\xdb\x4e\x4e\xca\x75\x92\x9d\x1c\xc6\x40\x86\xb5\xd9\x76\x8d\x68\x57\x71\xde\xbe\x0a\x7e\x0a\x7e\xd4\x06\x04\xdd\xc2\xb4\x53\x94\xe2\xc1\xfd\x7d\x27\x58\xe8\x8f\xce\xe7\xcf\xfd\x9e\xe5\x18\x51\xc6\xd1\x1a\x5b\xd9\xd0\x7c\x49\xe1\x8a\xa7\x86\xdc\x7b\xc2\x98\x95\xc5\xea\xb3\x86\x1e\x92\x55\x27\xb8\x60\x17\x59\xc2\x13\x44\x7e\xa5\x4b\xe8\x47\x08\xb2\x28\xf5\xbc\x43\x4d\x8c\x05\xeb\x84\x07\xef\x12\x1e\x0e\x2f\x0f\xad\x19\x80\xf6\xf6\x38\x38\x0e\x7e\x36\x2e\x13\xd1\x6c\x95\xac\x3f\x28\xaf\x1d\x1c\xf7\x7b\x75\x82\x12\x2a\x19\x2e\xe6\x38\xa5\x1c\x0f\x25\x97\x59\x1b\xb4\x74\x79\xed\x09\x1b\x59\xa1\xa7\x20\xd2\x56\x30\xaa\xeb\xf9\x44\x1a\x4a\x90\x8c\xb2\xde\xa3\xb5\x41\xbb\xf6\x21\xf5\x97\x05\xca\xa2\x0d\xde\x3b\xc2\x33\x29\x13\xe6\x38\x72\xc6\x96\x89\xc5\xfa\xae\x27\x86\x57\xf1\x93\x55\x82\x0b\x39\xce\xcc\x5d\xf9\xb6\x81\xfa\x4a\xfb\xbd\xfa\x50\xfa\x71\xc2\xd0\x92\xe0\xb0\x5c\xa6\x34\x2e\x49\xe5\xf4\x4d\x86\x6a\x50\xe0\xa8\x84\x55\xb8\x73\x39\xbc\x28\xa1\x45\x1b\x47\x77\x42\xdf\xe1\x0c\x17\x88\x57\x2c\x65\x9f\x12\x68\x02\x6a\x6c\xa7\x0f\x0a\xea\x20\x2f\xf9\x86\x16\x57\xc5\x90\xa6\x69\xc2\x39\x2e\x8c\x82\x26\x43\x3b\x14\xc1\x28\x93\xab\x3c\x14\xbf\x7e\xa7\xc5\x2d\xcb\x51\xa4\xc2\x42\x31\x95\xe0\x47\x70\xfb\xab\x92\x5b\x01\xa3\xb8\x41\x57\xe2\x79\x51\x66\xf8\xcc\x98\x54\xcb\xd6\x89\xc6\x6c\xc2\x2b\x66\x94\x10\x23\xe5\x50\x94\x48\xb2\xce\x68\x81\xa7\x14\xa0\x6a\xab\xc6\x6f\x44\x5b\x38\x36\x04\xc2\x0d\x22\x84\x7e\x1c\x12\x9a\xd9\xc1\xfa\x64\xed\x84\x65\x42\xe2\xe1\x86\x52\x70\xd2\x3d\xc1\x59\xf2\x84\x04\x23\xbc\x42\x25\xe1\x67\x4e\x93\xc3\x9e\xd6\x03\x42\x0b\x4a\xc9\x40\xcb\xf4\x7b\x86\xa0\x71\xd0\xae\xdc\x6a\x6d\xba\x21\x09\xe3\xb6\x7d\x81\x09\x2c\xe6\x1d\x5e\xa0\x62\x8d\xf9\x28\x29\x2a\xc6\x0a\x17\x00\xb1\xd8\x10\xf0\xa7\x88\x94\x31\x8e\xe7\x78\x6d\x13\x92\x43\x16\x51\xc8\x9c\x51\x29\x57\x11\xf8\xd6\x20\x8e\x53\x94\x10\x43\x65\xb7\x49\xbe\x40\x6b\xed\xb6\xe6\x4b\x2f\x42\x56\xeb\x72\xa0\x21\x4e\xac\x3b\x64\x4c\x18\x2c\x78\x8c\x70\x23\x9f\x00\xc9\x41\xfa\x92\xdf\x5e\xf7\x18\xa5\xee\xb0\xfe\xf4\x78\x78\xd0\xe6\xf8\x13\xc7\x19\xab\xb2\x7a\x0f\x46\x24\x7f\xf0\x22\x59\xaf\xc1\x8c\x4a\x4e\xcf\xf6\x3a\x67\xbc\xc0\x28\x05\x3c\x67\x0a\xd0\x41\xd2\x64\x08\xd3\x22\x98\x63\x51\x56\x60\xe9\x23\x0b\x45\xac\xb2\x10\x20\x4e\xcf\x7e\x95\x5a\xdf\x4c\x15\x19\xd2\xaa\x7e\x27\xe0\xb5\xbe\x94\xcd\x7e\x9b\x02\xb3\x0d\x25\xb1\x0f\x8c\xe1\xf5\x70\x38\x0e\xc3\x3a\x0e\x02\x93\x16\x50\xde\x20\x32\x78\xd5\xef\x99\x9f\x15\x33\xa2\x04\xf2\xfd\xd9\xe4\x7a\x2c\xd2\x0a\xa1\x45\x8d\x97\xe6\x04\x73\x35\x27\xed\x1f\x75\x9a\x05\x5b\x6f\x50\xfd\xde\xe3\xed\x63\xdd\xc5\xb5\xb9\x96\xc0\xf1\x25\xca\x4a\x88\xdd\xad\xf6\x2b\xf0\x03\xbb\x04\xa6\xd0\x32\x3d\x40\x12\x6d\x33\xfc\xe0\xbb\x8e\xfe\x07\xeb\xec\xe4\x13\x8d\x30\x33\xca\xb8\x42\x91\xf7\x94\xde\xb2\x3a\xc8\xf8\xcc\x83\x5a\x6a\xd9\xd9\xb3\x3b\x25\xb0\x8d\xe3\x54\x0a\x76\x7e\x2f\x50\x9e\x5b\x37\xf3\xd3\x1f\x02\xd7\x94\x4b\x11\x9c\xc2\xaf\xa1\xf8\x75\xe6\xb4\xb2\x75\x82\x95\x83\xfa\xe8\x4d\xf0\xaa\xaa\x8f\x24\xf1\x12\xe5\xb2\xb6\x01\x57\x2f\x52\xbd\xb6\x86\x76\xd0\x9a\x21\x1f\xe8\xf7\xf1\x85\x9d\x2e\x4c\x20\x36\x61\xea\xcb\x52\xd4\xc6\x4f\x2d\xf1\x74\x89\xbe\xc0\xe0\x6d\x10\xef\x83\x17\xf7\x67\xd7\x17\x93\xd1\xcd\xf4\xfa\xf2\x6c\x3c\xff\xdc\x7d\x71\xff\xee\x62\x71\x33\x1f\x7f\xb8\x08\x2f\xae\xa6\xdf\x13\x9c\xad\xf9\xe6\xe4\x47\x88\x1b\xbf\x65\x15\x75\x31\x7c\x8e\x12\x06\xe4\xad\xb4\x82\x72\xe8\x26\xfd\xf1\xd5\x60\x73\xa2\xed\x2b\xca\x93\x14\x43\xb5\x99\x82\x15\x83\x45\xf5\xbb\x75\x55\x1d\xd9\xb7\x47\xc1\x0f\xc1\xf1\xa1\xc6\xa8\x86\xe7\xd4\xe2\xe1\x9b\xaa\x31\x25\x40\x35\x70\x0a\x12\x9e\x8c\x4f\x51\x0c\xac\x58\xbd\xf2\x7b\xae\x4a\x9f\xab\xd2\xe7\xaa\xf4\xb9\x2a\x55\x8b\x90\xb5\x76\xe9\x96\x95\x55\x49\xf7\x6d\x27\xdc\x1d\xb0\xaf\x8a\x8b\xea\xcc\x21\x24\xe8\x0e\x4f\xd0\x12\x13\x9d\x0d\x60\x45\xc1\x21\x71\x3c\xa5\xb1\x3e\xfa\x70\x25\x20\x06\x5d\xfe\x81\x57\xb1\x44\x28\x9b\x53\x94\x1a\x4f\x35\x9f\x07\x15\x14\xc5\x1e\x02\xc5\xca\xd4\x84\x46\xb7\x6a\x06\x1b\x9c\x8d\xe8\xc7\x4c\x95\xb0\x92\x04\xdb\x03\xd3\xe8\x41\xb9\xa6\x32\x53\x1e\xef\x57\xd5\x90\x3a\x50\x99\x0d\x30\x0f\x7c\x56\x45\x8a\x9d\x95\x47\x3e\xd8\x53\xef\x3f\xa1\xda\x77\x6b\xfd\x2f\xaa\xf4\x9b\x75\xfe\x9e\x2a\x7f\x4f\x8d\xbf\xbb\xc2\x7f\x6c\x7d\xef\x55\xf7\x8f\xaf\xed\x6b\x4e\x25\xfd\xd8\xdd\x5a\x01\xf6\xae\x71\x27\x38\x35\x47\x97\x38\xf7\x2b\x7b\x13\x27\x11\xcd\xb7\xe6\xcc\x32\x18\xc2\x87\x69\x63\x23\xd3\x95\x80\xaa\xe9\xf5\x71\x70\x54\x45\xa7\x39\xcc\x15\xc6\xd7\x36\x16\x41\x29\x2b\x44\xb9\x00\xce\x69\xaf\x6c\xb0\x4a\x88\xc8\x4a\x42\xde\xf6\x24\xe4\x34\xdd\x6e\xc4\x24\x36\x56\xfb\x3a\x0d\x79\xac\xa2\x30\x4c\x40\x6f\xe3\x68\xb8\x75\x5e\x76\xc7\x23\xad\x18\xea\x96\x87\x4e\x9d\x01\x8e\x4b\x96\x28\xba\x5d\xd0\x09\x62\x3c\x2c\xa3\x08\x33\xb6\x2a\x89\x5e\xb9\x9d\x6c\xa7\x8a\xd2\x9e\x76\x2e\x27\x12\x72\x91\xc4\xd7\xdb\x01\x60\xf4\x3b\x42\x97\x88\x84\x98\x73\x08\x9b\xca\x25\x3d\x41\x5b\xc5\x98\x89\x59\x4a\x4c\x21\xf3\x9d\x43\x5b\x5c\xe4\x45\x92\x71\x63\x37\xa7\x6a\xd8\x25\xd0\x8e\x8d\x3b\xd7\xbc\x6d\xd3\xd8\xaf\x9d\xb9\x87\x1b\x4c\x5c\xf7\x4f\x53\x94\x81\xe7\xfe\x5f\xc7\xd4\xef\x9d\x08\xe6\x26\x96\x25\x45\xeb\x24\x3a\xc0\x9f\x72\x5a\xf0\xce\xec\x62\x36\x9e\x5c\x4c\xc7\x7a\x8f\x71\xf2\xe2\xff\x71\xb4\xa1\x9d\xc3\x17\xf7\x96\xf3\x61\x3c\x17\xdb\x8d\xcf\x87\x9d\x7f\x77\xa2\x92\x77\xba\xab\xa3\x4e\x37\x7e\xd9\x7d\xf9\x17\xa3\x44\xec\x4a\xc2\xf7\xa7\x8f\x6b\x7c\xac\x1b\xb7\x1f\x1c\x3b\xe5\x3d\xa4\xc8\x0e\x44\x20\x86\x46\xdd\x0d\x2a\xe2\x8e\xda\xfe\x40\x47\xd5\x61\xcb\x81\x2c\x9c\xd4\x64\x8d\x5d\x84\x5d\xed\xfc\x6b\x66\xf6\x2c\xa5\xd3\x8c\xd9\xa4\xe6\xe5\x12\xaa\x81\x8d\x7f\x10\x72\x9a\xc5\x05\x4d\xe2\x09\x2c\x5f\x30\x43\xa2\x72\xcb\xec\x0a\xd0\x62\x6d\xf6\x49\x51\xe2\x64\x38\xd9\xe2\xe6\x86\x88\x36\xa2\xe1\xcc\xa8\x76\xb2\xaa\x94\xe9\x0a\x11\xb1\x27\xa9\x02\x77\x83\x11\xe1\x9b\xad\x73\x72\x92\xbd\xf7\x49\x16\x9a\x26\x89\x28\xb9\xa0\x9c\x72\xe0\x4a\xd1\x2c\x0e\xc8\x0e\x65\x3e\xfe\x87\xdb\xe9\x3f\x01\x01\x2a\x96\xf5\x68\x55\x39\x8d\xf5\xed\x50\xd5\xa3\x48\x87\x65\x76\x95\x9d\x43\xb5\x52\x25\x42\x8f\x6a\x47\xcc\xf0\xac\xc0\x77\x09\x2d\x99\x8c\xeb\x53\x36\x37\x05\x94\x53\x08\xee\x14\x71\xd4\x84\x5c\x24\xda\x3d\x4a\x76\x08\x38\x2a\x46\x98\x70\xf4\x01\x91\xb2\x2a\x83\x3d\x6a\xc3\xaa\xcc\x59\x26\x44\xb6\x2c\x61\xdd\x08\xca\x5c\xc0\xd8\x1f\x9d\x85\x2a\x21\x81\x8b\xce\x17\x94\x23\x72\x4a\x48\xaf\x9d\xf3\x3e\x59\x6f\x76\xb0\xa6\xb4\x48\xd1\xae\x76\x13\xfa\xb1\xe2\xac\xa4\x81\x9b\x3d\x39\x74\xd1\x8f\x42\x6f\xc7\x61\xcf\xeb\x7c\x05\xe8\x5e\x9b\x16\x5d\x6a\x60\xfb\xb4\x29\x09\x5f\x9f\x6e\xd7\xa2\xb1\x36\x9b\xca\x57\x2b\xe3\xc3\x67\x49\xe2\x11\x24\xe1\x88\x5f\xd6\x37\x7c\x6d\xac\x0a\x82\x33\x71\x56\x95\x97\x1c\x4f\xf1\x47\x9d\x14\x3c\x62\x0d\xae\xe7\x98\x51\x72\x87\xe7\xba\xd4\x87\x88\xde\xd4\xe1\xba\x55\xc0\x46\x93\x02\x80\x86\x65\x2a\x60\x80\xb0\xd2\x32\x1a\x7b\x9e\x8c\x11\x7b\x0e\x08\x21\x95\xc4\xcb\x72\xcd\x4c\x7f\x3b\x4a\x87\x95\x11\x13\xf2\x67\xf0\xa3\x89\x3f\x46\xe4\xed\x9b\xe0\x87\xa3\xaf\x02\x3e\xe7\x17\xd3\xd1\xd9\xf5\xbb\xf0\x19\x78\xbe\x10\x78\xf6\x41\xcf\x5e\xf0\x79\x00\x7e\xf6\x01\xd0\x6e\x08\x6a\x82\xd0\x0e\x56\xb3\xb7\x6f\x06\x1e\x4c\xb3\xa7\xa0\x43\x33\x54\x3d\x64\x10\x5b\x7a\x36\x47\xd9\xed\x69\x04\x9a\xa0\xd4\xb4\xce\xed\x93\xbd\x52\x5b\x2b\xac\xec\xa5\x4f\x06\xea\xf4\x46\x6d\xb9\x1b\x14\xf6\x00\xce\x2c\x8d\x1b\x45\x8f\xa7\x37\x17\x22\x69\xdc\x84\x18\x60\xbc\x7d\x1d\xbc\x79\xf5\x55\xd0\x65\x76\x39\x7a\x06\x96\x67\x60\xf9\x1f\x00\x96\x7a\x48\x36\xca\x8d\x07\xa2\x73\x4f\xac\x8b\x37\x45\x56\xee\xa1\xa8\x57\x5b\x29\xd1\xa4\xa5\xb8\x90\x4c\xa8\x2c\xde\xbc\xf9\x2a\xb1\xbf\x38\x0d\x7f\x7b\x2e\x2b\x9e\xa3\xff\x5b\x8b\xfe\x47\xef\x3a\x36\x62\x9b\x76\x7e\xf1\xb7\xcb\x31\xc4\xb7\xbb\x65\xcb\xd4\x7e\x6b\x71\x35\xba\xea\xf7\xb2\xfa\xe6\x8b\xb8\x73\x57\xf7\x34\x43\xc4\xcc\x05\xb0\x43\x30\x32\x08\xfc\x6d\x8d\x3f\xe5\xf6\xc6\xca\x7c\xb7\xa1\xd0\x2e\xb0\x68\x16\x39\xf5\xaa\xa5\xa5\xf1\xb8\x26\x20\x75\x78\x6d\xda\xa1\xad\x0d\x82\xf6\xc1\x1b\x66\x60\x65\x71\x5e\xc5\xda\x4f\xd0\xfe\x28\xb3\x84\x07\xbf\x5e\xc3\xff\xb0\x1a\x80\x1a\xa7\x45\xb4\x11\xf7\xf6\x36\x7a\xa4\x04\x44\x8d\x53\xd2\x70\xa9\x55\x48\xab\x73\xee\x7a\x2f\xe0\x73\x0e\xdf\xb4\x11\x6f\x49\x27\x34\x5b\x87\x3c\x4e\xa8\xfb\xc0\xb4\x22\xba\xea\x47\x88\x23\x3b\x41\xe7\x9c\x55\x21\x6a\x18\x21\x82\xcf\x91\x3c\x97\x84\x91\x81\x95\x1a\xe4\xb6\x43\xb0\x9d\x93\xdd\x63\x41\x75\xcd\xb7\x2b\x23\x60\x71\x91\x85\x3f\x71\x58\x4f\x2e\x9e\xc9\xc6\xf2\x66\xab\x99\x1c\xa4\x5c\x17\x04\xdf\x1e\x07\xaf\x7f\xae\x2c\x59\xe0\x28\xc9\x13\x9c\xf1\x49\xc2\xd4\xb1\xf5\xd5\xc7\x0c\x17\x52\x8b\xb2\x65\x5d\xc2\x22\xb9\xbe\x86\xc5\xe6\x10\x9e\x39\x58\xb0\x6b\x8c\xd6\x87\x54\x13\x79\xb2\x01\x2a\xbc\x97\x34\xca\x7f\x45\x1b\x97\xe2\x8f\xb5\xe7\x31\x59\xb9\x94\x07\xeb\x2f\x66\xf3\xab\x5f\xc7\xc3\xc5\xcd\x68\x7c\x7e\x7a\x3d\x59\xdc\x84\xd7\x67\xe2\x1b\xa0\x45\x4b\xd4\xdb\x2d\x69\xbc\x6d\x36\x1a\x5e\x4d\x17\xe3\x29\x34\x92\xec\x1d\xc3\x98\x15\xf4\x2e\x89\x6b\x53\x7f\xa4\x01\xac\x0a\x16\x88\xb9\xcc\x7d\x8d\xfe\xe4\x7a\x0f\xf5\xd9\x87\x98\x45\xd1\x26\x15\x2a\xfd\x9d\x4a\x4d\x42\xe6\xb8\x09\xb5\x97\x5a\x1e\xb5\xde\x44\x5c\xd0\x00\x78\x33\xbf\x51\x83\xee\x1b\x28\x27\xdb\x05\x6d\x5a\x75\x3e\x9e\x4d\xfe\xbe\xb8\x12\xd3\x51\x12\x7e\x77\x19\xf8\x30\x5f\x6c\x73\x3c\xd0\xf7\x24\xf2\xee\xcc\x12\x5d\x07\xe9\x79\x1e\xd2\x00\xaa\x27\x7a\x9d\x79\x85\xd2\xe6\xd2\xb5\x91\x71\xd0\xd9\xdb\xf0\x94\xb4\x8e\xcd\xd4\x3e\xa1\x71\xc7\x86\x1b\x7a\x02\x5e\xbb\xa1\x52\x39\x78\x71\x1f\x0e\xe7\x17\xb3\xc5\xf7\x1d\xae\x5f\x17\x9d\x1c\xae\x0b\x4a\xef\xb6\x5d\xd1\x77\x60\xa8\x87\x9f\xad\x46\xd3\xf4\xe0\x61\x97\xe8\x8b\xe5\x03\xb8\x08\xe5\x1f\x18\x54\x83\x9c\xcd\xc7\xe1\x78\x3a\xba\x51\x7d\x8b\xdb\x2a\x57\xec\xe0\xbf\xf0\xa4\x27\xfb\x50\xe5\x3d\x0f\x79\x4d\x9f\xa1\x3b\xf1\x06\x03\x52\xbf\xad\x1e\x2a\x8a\xb5\xeb\x9e\x5b\xe4\x7d\x5e\xd3\x8e\xa7\x7b\x70\xda\xb9\xbe\x6b\x49\x73\x86\x5b\x07\xfc\x4e\xf5\x57\x13\xac\x79\x07\x88\xea\xf7\x56\x20\x4c\x33\xb2\xbd\x58\x35\xae\xe3\x1a\x64\x5b\x8d\x20\x91\xca\xae\x80\xad\x25\x1d\x82\x1d\x80\x78\x17\x32\x4e\x73\xbe\xd5\x63\xb3\x0b\xda\x60\xb4\xa5\xb4\xf6\x89\xb5\x67\x32\xb0\xab\x7a\x63\x59\x7b\xde\x8a\xca\x00\x9c\x21\x88\xc0\x51\x8b\x32\x65\x5b\x06\xbe\xcd\x82\xda\xba\x04\xf2\xca\xc8\xbe\x89\x33\x91\x2c\x7d\xc7\x3c\x90\xd3\x41\x6b\x33\x9e\x6c\xd2\x78\xfb\x77\x14\xbc\x09\x5e\x1f\x7a\x69\x6c\x4f\xee\xd2\x0f\xda\xe6\xb0\xc9\x10\x8f\xd3\x54\x8f\xa8\x80\xdd\x0e\x04\x14\xf3\xde\xb8\xb9\x0f\x35\x8c\xf3\x2f\xa1\xf3\xbf\x96\xb8\xc4\xb1\x7a\xa9\xc3\x9c\x00\x68\xf2\x76\xc3\xd9\xfe\x81\xf8\x28\xe6\x16\xcd\xe6\xc9\x83\x73\x1f\xad\x9c\xad\xb1\x1e\xa2\x2a\x6e\x95\xd6\x0b\xff\xe7\xae\xd4\x03\x9e\x52\xf3\x11\x7f\x7f\x6d\x26\x9e\xfc\x0b\xc7\xb5\x3e\x7c\x2f\xa8\x49\x76\xb5\xa8\xb8\xfa\xfb\xf9\x09\x4e\xf0\x60\x77\xfe\xab\xc3\x36\xa5\x7f\xba\x77\x7d\xa1\x87\x7d\x81\x97\xb5\x7a\x9a\x24\xe6\xee\xeb\x13\x67\x15\xed\xc3\x07\xe6\x1b\x29\x4e\xc4\x43\xbe\xea\xa9\x49\x45\x72\x05\xb5\xd1\x7f\x4f\xf8\x66\x4a\x9d\x01\xe9\x99\xee\x62\xef\x0e\xa7\x27\x2e\xa9\x37\xdb\xa7\xab\x6b\x3a\x3b\x98\xc4\xb9\xfa\x76\x5e\x86\xfc\x27\x00\x00\xff\xff\x7c\xd6\x17\xfc\x39\x38\x00\x00")

func templatesJenkinsNormalJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsNormalJobXml,
		"templates/jenkins/normal-job.xml",
	)
}

func templatesJenkinsNormalJobXml() (*asset, error) {
	bytes, err := templatesJenkinsNormalJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/normal-job.xml", size: 14393, mode: os.FileMode(420), modTime: time.Unix(1444138758, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsPipelineXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templatesJenkinsPipelineXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsPipelineXml,
		"templates/jenkins/pipeline.xml",
	)
}

func templatesJenkinsPipelineXml() (*asset, error) {
	bytes, err := templatesJenkinsPipelineXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1443542096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templatesJenkinsMultiJobXml,
	"templates/jenkins/normal-job.xml": templatesJenkinsNormalJobXml,
	"templates/jenkins/pipeline.xml":   templatesJenkinsPipelineXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"jenkins": &bintree{nil, map[string]*bintree{
			"multi-job.xml":  &bintree{templatesJenkinsMultiJobXml, map[string]*bintree{}},
			"normal-job.xml": &bintree{templatesJenkinsNormalJobXml, map[string]*bintree{}},
			"pipeline.xml":   &bintree{templatesJenkinsPipelineXml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
