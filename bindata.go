// Code generated by go-bindata.
// sources:
// templates/jenkins/multi-job.xml
// templates/jenkins/normal-job.xml
// templates/jenkins/pipeline.xml
// DO NOT EDIT!

package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJenkinsMultiJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdd\x6f\xdb\x36\x10\x7f\xae\xff\x0a\xc1\x2f\x01\x06\x44\x4a\xba\x0f\x74\x80\xe2\xb6\x71\xda\xa2\x43\x9b\x78\x76\xbc\x3c\xd3\xd2\x59\x66\x4d\x89\x02\x49\xa5\xf1\x8a\xfe\xef\x3b\x7e\xc9\x94\xa5\x34\x49\x57\x0c\xcb\x4b\xc5\xfb\xe2\xf1\xee\x77\x1f\x6e\xfa\xf2\xae\x64\xd1\x2d\x08\x49\x79\x75\x76\x74\x1a\x9f\x1c\x45\x50\x65\x3c\xa7\x55\x71\x76\xb4\xbc\x7e\x7b\xfc\xe2\xe8\xe5\x64\x94\x66\xbc\x8c\x15\xdd\x12\x16\x7f\x82\x6a\x4b\x2b\x19\xd7\xac\x29\xf4\xbf\x65\xc3\x14\xfd\xc4\x57\xf1\x47\xfd\xf1\x07\x5f\xcd\x04\xff\x04\x99\x8a\xac\xc0\xd9\xd8\x29\x1c\x7b\xc1\x63\xcb\x78\x75\x1a\x9f\xfe\x3a\x9e\x8c\xa2\x28\x25\x99\xc2\xdb\x65\x62\x0e\x39\xc8\x4c\xd0\x5a\x53\x26\x69\x12\x9e\x34\x77\x0b\x50\x5f\x40\x0d\x55\x8e\x5e\x52\x90\x93\x35\x61\x12\xd2\xa4\x47\xd7\xc2\xb5\xe0\x35\x08\xe5\x8e\x48\x90\x10\xe7\x94\xac\x78\xf0\x0a\x5a\x03\xa3\x15\xc4\x33\xf7\x31\xb3\x3a\xbb\xd6\xfd\x1c\xc9\x18\x9f\xdd\xb1\x17\xf5\xfe\x9f\xc4\x2f\xe2\xdf\xc6\xd6\x32\xda\x56\x44\x6e\x2f\x49\x09\x93\x9a\x08\xc2\x18\xb0\x08\xee\x20\x6b\xb4\xe7\x69\xd2\x32\xbd\xb4\x54\xa4\x00\x43\xf9\xf2\x25\x8a\x17\xfe\x14\x7d\xfd\x9a\x26\x7b\x9e\xf5\x3a\x79\x82\xdb\xe6\xdd\x49\xf7\xe1\xa9\xcc\xca\x28\x63\x44\xca\xb3\xf1\xa6\xc9\x25\xaf\xda\xe4\x15\x54\xc5\xef\xa8\x5a\x4c\x3f\x8e\xdb\x07\x23\xed\xd5\xf3\xf8\x97\xf8\x04\xdf\xf6\xec\x19\x66\xbe\x5a\xd3\xe2\x2f\x8b\x90\xc9\xf3\x34\xe9\x12\xb4\x48\x23\x41\xcc\xa1\xe4\x0a\xa6\x86\x27\x35\xf5\x59\x3a\x70\xd7\xf2\x40\xd2\x08\xa2\x01\xc1\x4c\x1c\xd0\x95\xe5\xfc\x83\x09\x82\x26\x19\x2b\xc9\x23\xcd\xa0\xca\x90\x1b\xe9\x4a\x90\x2a\xdb\xc0\xfd\x3e\x9d\x1b\x81\x45\x0d\x99\xf3\xa6\xd2\xa1\xff\x29\x29\x89\x54\x20\xd2\xc4\x1c\x47\xf7\x78\xd2\x55\x4e\x93\xf0\xb6\x34\xa7\x92\xac\x18\x2c\x9a\x55\xc9\xf3\x86\xed\xd1\xda\x67\xd8\x4c\x0b\x04\x0c\x86\xf5\x36\xe4\x28\xd1\xa0\xc6\x10\xc7\xea\xe4\xfc\x1d\x54\x20\x88\xda\xb3\xec\xf3\x1b\xa4\xe9\xb2\x6a\x2f\x7d\x50\xd0\x1a\x24\x8d\xda\x70\x71\x25\xa6\xbc\x2c\xa9\xc2\x10\x78\x03\x7d\x86\x55\xc8\x18\x90\xca\xe4\x6f\xaa\xbf\x6e\xb8\xd8\xca\x9a\x64\x16\xcc\x96\x69\x05\x3f\x23\x58\xaf\x1a\xd5\x0a\x78\xc3\x3d\xba\x15\xaf\x45\x53\xc1\xb9\x0f\xa8\x93\xed\x12\x7d\xd8\x74\xd2\x67\x9c\x31\x2f\x15\x50\xac\x08\x2d\x2a\x2e\xe0\x92\x2b\xba\xde\x59\xff\xbd\xe8\x00\xc7\xaa\x20\x9c\x16\x1b\xac\x64\xfe\x79\xca\x78\xd5\x3a\x7b\x48\xb6\xc2\xab\x86\xb2\x7c\xba\xe1\x1c\x31\xf8\x8d\x5a\xc3\x76\xc0\xe2\x0b\x58\x13\xec\x85\xe7\x81\xca\x38\x71\x76\x50\xe8\x9a\x73\x36\x71\x32\x69\xe2\x09\xae\x81\xb5\x99\x5b\x17\xfe\x1a\x46\xa5\x6a\xf5\x05\x30\x4c\xe6\x2d\x5c\x13\x51\x80\xba\xa0\x62\xcf\x58\x83\xc0\xde\x08\x9e\x00\x77\x19\x6b\x72\xc8\xe7\x50\xb4\xcd\x37\x20\xeb\x12\x93\x81\x57\x16\x2a\xba\x2b\xf5\x88\x6f\x4a\x42\x99\xa7\xca\x2d\xad\xaf\x49\xe1\x60\xeb\x4f\x8e\x97\x95\xa1\x81\x1f\x8e\xdc\x07\xa3\x03\x77\x0a\x2a\xe9\x9e\x8b\xd5\x8a\x0e\x4d\x46\xba\x43\x66\xa4\x9a\x73\x52\x3a\xaf\xfd\xc9\x8c\x23\x5b\xaa\xf9\x41\xe9\xe6\x86\xb9\x62\x3c\xdb\x9a\x3c\xde\x6c\xa0\xba\xe0\x9f\x2b\xa9\x04\x90\xd2\x90\x70\x82\x7a\xa5\x07\xe5\xfa\xc6\x96\xf5\x63\x4c\xf5\xa4\xb4\x21\x25\x68\x51\xf8\xec\xe9\xfe\x8d\xad\x03\x53\x6f\x01\xe7\xed\x1c\x92\x47\x1e\xc4\xa8\xe8\xeb\xfa\xf1\x33\xff\xdc\x6a\xb6\xe3\xad\xde\x10\x69\x47\x98\xf9\x3a\xc1\xba\x6d\x29\x1d\x19\xd4\x95\x9e\x12\x45\xd8\x43\xb0\xb2\x0b\xc0\x89\xd8\xac\x34\x0b\x5b\x48\xcb\x7c\x8c\x3f\x33\x6f\xd3\xcf\x85\xa8\xfd\x4b\x91\xdf\x0e\x5c\xd3\x9a\x3c\x21\x14\xd2\x31\x99\xe1\x00\x2f\x7d\xe3\x0d\x08\xa1\x1c\xdc\xd5\x58\xb7\x39\x0e\x4e\x1f\xd0\x80\x12\x0a\x3a\xbc\xa0\x4f\x07\x08\xd2\x94\x50\x10\xd7\x06\x89\x19\x9c\xeb\xd6\x3e\x23\x6a\x83\xcb\x4f\x8f\x14\xca\x97\xe4\x6e\x0e\x98\x6a\xec\x82\x18\xde\xe0\xd4\x71\xb3\xd2\x57\x69\xce\x6e\xa1\x74\x01\x15\xbb\xd6\xdf\x01\x56\x5f\x15\xe3\x98\x53\xb3\x7d\x75\xd4\xf6\xe4\x50\x05\x57\x14\xa1\x5e\x33\xa6\x9f\x66\xa3\x17\x52\x3a\x61\x6e\xf5\x0d\x12\x07\x6c\x6d\x29\x63\x26\x9b\x57\x15\x2a\xcf\x41\x62\x8a\xf7\xb7\xbe\x7d\xfd\xfe\xc3\x72\xfe\x06\xf7\xbe\x6f\x8a\x85\x06\x0d\xb8\xaf\x2a\xb6\x7b\xbf\xc6\x1c\x4d\x37\x1a\x67\x6d\x87\x19\x66\x1e\x78\x6c\x57\x8a\x28\xf8\x1b\x5a\x27\x70\x87\x99\xc3\x2d\xd5\x5d\xc6\x54\x85\x01\x0f\xe0\xb4\x94\x83\x1b\x56\xc7\x1c\x22\x7c\x85\xcb\xdc\x9f\x0d\x34\x90\xdb\x61\x24\xf7\x05\x3b\xc0\xeb\xaa\x0f\x2d\x28\xf7\xbb\xd3\x79\x5e\xd2\x7b\x9f\xb9\xf1\xbb\xeb\x0d\x8b\x0c\x77\xf1\x7d\xf9\xba\x06\x10\x96\xbb\x0e\xa9\xa2\x55\x63\x5a\xf8\x3e\x67\x8b\xe5\x74\xfa\x66\xb1\x78\xbb\xfc\x60\x9c\x1a\x90\x18\x3d\xda\xbd\x81\xf6\xe4\x72\xed\xde\x9f\xd6\xcd\x0a\x27\xc4\xa6\x0d\x07\xfa\x4d\xd7\x51\x7c\x89\x93\xe2\x23\xc1\x9b\x59\xd8\x85\x70\x35\x8a\xf5\xad\x19\x76\x4d\xd1\x94\x72\x87\x0b\x62\x29\xe3\x4e\xd4\x63\x63\xbe\xdd\xcf\x5d\x2f\x8e\x6d\xec\x1d\xf5\xda\x12\x5b\x3c\x18\x95\xde\xef\x8b\x53\x44\xc8\xcf\xe3\x30\x5a\x07\x09\xfa\x91\xe0\xfb\x17\xd0\xfb\x4e\xd8\xf5\x20\x87\xfb\x80\x9f\x8b\xee\x27\xa4\xee\xce\xd2\xf4\xeb\x5e\x3e\xf4\x52\x30\x28\xed\xc0\xf1\x63\x33\xd5\x62\x23\xc0\x74\x80\x94\x0e\x46\x0e\x82\x51\xfb\x87\xd3\xbf\x21\xef\xdc\x71\x88\x82\x8e\xe4\xb1\x13\xc5\x54\x3d\xff\xfd\x09\x20\x78\xf0\xba\x81\xc1\xf8\x5f\xb4\xb6\xff\x59\x73\xb3\xff\x39\xa0\x51\xb3\xc7\x57\x8b\xac\x96\x33\x3c\xb1\x5c\x83\xba\x6f\x70\xb9\xa0\xdf\x50\xb5\xb9\xe4\x81\x43\xee\xa5\xf7\xb1\xef\x2f\xa7\x27\xa6\xf4\xe0\xb5\x4f\x37\xd7\x07\x3b\x86\xa4\xd3\x26\xed\x2c\xbd\x11\xa4\xae\xed\x9a\xf9\xa4\x66\xec\xca\x75\x32\xfa\x27\x00\x00\xff\xff\x88\x32\x71\x6b\x7c\x12\x00\x00")

func templatesJenkinsMultiJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsMultiJobXml,
		"templates/jenkins/multi-job.xml",
	)
}

func templatesJenkinsMultiJobXml() (*asset, error) {
	bytes, err := templatesJenkinsMultiJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/multi-job.xml", size: 4732, mode: os.FileMode(420), modTime: time.Unix(1443615891, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsNormalJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xeb\x6f\xdb\x46\x12\xff\xae\xbf\x82\xf0\x05\xf0\x5d\x71\xa2\x62\xf7\x70\x6d\x01\x59\x4d\x2c\x2b\xae\x7a\xb6\xe3\xd3\x23\xf9\x58\xac\xc8\x91\xb4\xf1\x92\x4b\x70\x97\x8e\x75\xbe\xfc\xef\x9d\xe5\x3e\xb8\x7c\x48\xb6\x91\x7c\x29\x10\x04\x08\xc4\x99\xd9\xc7\xbc\x7f\x3b\x1e\xfe\xfa\x90\xb0\xe0\x1e\x72\x41\x79\x7a\x76\x7c\x12\xbe\x3e\x0e\x20\x8d\x78\x4c\xd3\xcd\xd9\xf1\x72\xf1\xae\xff\xf3\xf1\xaf\xa3\xde\x30\xcb\xf9\x27\x88\xe4\xa8\x17\x04\x43\x12\x49\x14\x16\x83\xf2\x23\x06\x11\xe5\x34\x53\x14\x4d\x60\x7c\x33\xe3\x92\x48\x9e\x07\x11\x23\x42\x9c\x1d\x6d\x8b\x58\xf0\x34\x94\x44\xdc\x89\xf0\xca\xb1\x8f\x94\xb8\xda\x81\xec\xc4\x82\xff\x07\x20\x1b\xf5\x4f\x86\x03\xef\x53\xf3\xd3\x22\xf1\xd8\xd5\x97\xe6\x92\x5c\xd2\x35\xde\xe8\xa2\xbe\x4b\x07\xb9\x2e\x7f\xe3\xf6\xf1\xa4\x6f\xfc\xcd\x87\x83\x4a\x95\xf2\xfb\x0e\x19\x17\x90\x41\x1a\xa3\x85\x28\x88\xd1\x9a\x30\x01\xc3\x41\x8b\xae\x84\xd1\x60\x19\xe0\xb6\xfa\x13\x09\x02\xc2\x98\x92\x15\x67\xe1\x27\x48\xef\x68\x2a\xc2\x8c\x66\xc0\x68\x0a\xe1\xad\xf9\x71\xab\xd7\xec\x82\x8c\x15\x1b\x9a\x9e\x1d\xc5\x48\x46\xdf\xec\xfa\x56\xb4\xaf\x39\x6f\x5e\x87\x3f\x87\x3f\x19\x03\xe2\xde\xca\xb4\x37\x24\x81\xd1\xe3\x63\x10\x2e\xcc\x47\xf0\xe5\xcb\x70\xe0\x38\x56\x54\x48\xb2\x01\x27\x3b\xb7\x5f\xa5\x70\xc5\xd3\x57\x1e\xbc\xe0\xce\xda\x62\x75\xad\xf1\x04\xba\x0e\xc2\xa9\x98\xa6\x54\x52\xc2\x7e\xe7\x2b\x3c\x47\x09\x8a\x28\x69\x44\x87\x56\x4c\x84\x1b\x2a\xc3\x4b\x2a\xe7\xe3\xeb\x23\x67\x06\xa4\xbd\x39\x0d\x4f\xc3\x5f\x6c\xc8\x44\x3c\x5d\xd3\xcd\x07\x1d\xb5\xa3\xd3\xe1\xa0\x4e\xd0\x42\x85\x80\x7c\x06\x09\x97\x30\x2e\xb9\xc2\xd9\xa0\xe3\xc8\x65\x43\xd8\xca\xaa\x7d\x72\x56\xda\x0a\x6f\xb5\x9c\x5d\x95\x86\x52\x24\xbb\xd9\xe0\xd9\xbb\xe1\xba\xee\x2b\x0d\x57\x39\x49\xa3\x2d\x1c\xbc\xe1\x79\x29\x33\xcf\x20\xf2\xee\x96\x2a\x67\xfd\x30\x50\xd7\xab\xf8\x74\x4d\x21\x2f\xef\x99\xfa\x9e\xef\xba\x68\x73\xd3\xe1\xa0\x7e\x95\x61\x4c\x05\x59\x31\x98\x17\xab\x84\xc7\x05\xab\x82\xbe\xcd\xd0\x0b\x72\x88\x0a\xf4\xc2\xbd\xcf\x91\x79\x81\x2b\xba\x38\xe6\x10\x7e\x09\x29\xe4\x44\x56\x2c\x6d\x9f\x02\x69\xaa\xd4\xb8\x43\x9f\x14\x34\x49\x5e\xc8\x2d\xcf\xdf\xe7\x63\x9e\x24\x54\x4a\xc8\xed\x06\x6d\x86\x09\x28\x06\x24\x2d\xbd\x3c\x56\xbf\x3e\xf2\xfc\x4e\x64\x24\xd2\x69\xa1\x99\x5a\xf0\x33\x86\xfd\xfb\x42\x3a\x01\xbb\x71\x8b\xae\xc5\xb3\xbc\x48\xe1\xdc\x9a\xd4\xc8\xd6\x89\xd6\x6c\x2a\x2a\x6e\x39\x63\x56\xca\xa3\x68\x11\xba\x49\x79\x0e\x37\x1c\x4b\xd5\x4e\xdf\xdf\x8a\x76\x70\x5c\x0a\xcc\xb7\x84\x31\xfe\x79\xcc\x78\xea\x2e\xdb\x24\x9b\x20\x2c\x28\x8b\xc7\x5b\xce\x31\x48\x0f\x24\x67\x21\x29\x0b\x2f\x60\x4d\x0a\x26\xcf\xbd\x25\x47\x03\xb3\x0f\x0a\x2d\x38\x67\x23\x23\x33\x1c\x58\x82\xa9\x83\xce\x73\xeb\x8d\x3d\x86\x51\x21\xdd\xfa\x1c\x18\x3a\xf3\x1e\x16\x24\xdf\x80\xbc\xa0\x79\xc5\x58\x43\x8e\x25\x16\x2c\x01\x1e\x22\x56\xc4\x10\xcf\x60\xe3\x1a\x92\x47\x56\x59\x28\xbc\x5b\xe9\x50\x51\xf5\xad\x45\x9c\x24\x84\x32\x4b\x15\x77\x34\x5b\x90\x8d\x09\x5b\xfb\x65\x9c\x90\xd6\x8e\x1c\x99\x12\xa7\xfc\x8e\x1d\x13\x2f\x8b\x11\xa3\xc2\xa8\x49\xc0\xe6\x50\xc6\x52\x73\xbd\x39\x31\x4a\xfc\x6b\x7d\xf3\x7c\x78\xd2\xe6\xf0\x20\x21\x15\x55\x57\x1f\xe0\x8d\xca\x1f\x32\xa7\x9b\x0d\x9a\x51\xcb\x19\x6d\x97\x99\x90\x39\x90\x04\xeb\xb9\xd0\x05\x1d\x25\x6d\x87\xb0\x2b\xc2\x19\x28\x58\x01\x65\x8c\x2c\x34\xb1\xea\x42\x58\x71\x06\xee\xab\x30\xfb\xdd\x6a\x90\x51\x5a\xb5\x79\x08\x46\x6d\x53\xca\x75\xbf\x6d\x0e\x62\xcb\x59\xdc\x2c\x8c\xf3\xe5\x78\x3c\x99\xcf\xeb\x75\x10\x99\x3c\x47\x78\x43\xd8\xe8\xf5\x70\x60\x7f\x56\xcc\x88\x33\xec\xf7\xe7\x57\xcb\x89\x6a\x2b\x8c\xe7\x35\x5e\x92\x31\x90\x5a\x27\x13\x1f\x75\x9a\x2b\xb6\x8d\x4b\x0d\x07\xcf\xb7\x8f\x0b\x17\xdf\xe6\x46\x02\xe2\x6b\x92\x16\x98\xbb\x3b\x13\x57\x18\x07\xce\x05\x16\x68\xd9\x13\xb0\x89\x76\x19\x7e\xf4\x43\x60\xfe\xa1\x9f\xbd\x7e\x62\x2a\xcc\x2d\x17\x52\x57\x91\xdf\x38\xbf\x13\xf5\x22\xd3\x64\xf6\x6a\xad\x65\xef\xc9\xbe\x4a\x68\x1b\x2f\xa8\x74\xd9\xf9\x98\x93\x2c\x73\x61\xd6\x6c\x7f\x04\x43\xb3\x74\x45\xf8\x16\x7f\x8d\xd5\xaf\x73\x6f\x95\xc3\x09\x4e\x0e\xf1\xd1\xbf\xc2\xd7\x15\x3e\x2a\x89\xd7\x24\x2b\xb1\x0d\x86\x7a\x9e\x18\xdf\x5a\x5a\xaf\xb3\x43\x3e\x71\xee\xf3\x81\x9d\x01\x26\x98\x9b\xa8\xfa\xaa\x50\xd8\xf8\xa5\x10\xcf\x40\xf4\x05\x60\xb4\x61\xbe\x8f\x5e\x3d\x9e\x2f\xa7\x57\x17\x7f\xdc\x2c\xaf\xcf\x27\xb3\x2f\xfd\x57\x8f\x97\xd3\xc5\x1f\xb3\xc9\x87\xe9\x7c\xfa\xfe\xe6\x9f\x0c\xd2\x8d\xdc\x9e\xfd\x84\x79\xd3\x5c\x59\x65\x5d\x8c\x9f\x17\x54\x20\x79\x57\x5a\x41\x07\x74\x9b\xfe\x7c\x34\xd8\x56\xb4\xdb\xa3\x92\x26\x80\x68\x33\x41\x2b\x86\x8b\xea\x77\xa7\x57\x3d\xd9\x37\x27\xe1\xbf\xc3\xd3\x23\x53\xa3\x5a\x91\x53\xcb\x87\xbf\x14\xc6\x2c\x0b\x54\xab\x4e\x61\xc3\x2b\xf3\x53\x81\x81\xb5\xa8\x23\xbf\xef\xa8\xf4\x3b\x2a\xfd\x8e\x4a\xbf\xa3\x52\xed\x84\xb4\xf3\x48\x1f\x56\x56\x90\xee\xaf\xdd\x70\xf7\x94\x7d\x0d\x2e\xaa\x99\xc3\x9c\x91\x7b\xb8\x22\x2b\x60\xa6\x1b\xa0\x47\x31\x20\x21\xbe\xe1\xb1\x19\x7d\xf8\x12\x98\x83\x3e\xbf\xd7\x40\x2c\x11\x49\x67\x9c\x24\x36\x52\xed\x67\xaf\x2a\x45\x71\xa3\x02\xc5\xda\xd4\x8c\x47\x77\x5a\x83\x2d\xa4\x17\xfc\x73\xaa\x21\x6c\x49\xc2\xe7\x81\x5d\xf4\xa4\x5c\x7b\x33\x0b\x8f\x0f\x6f\xd5\x92\xea\xe9\xce\x86\x35\x0f\x63\x56\x67\x8a\xd3\xaa\x41\xee\x1d\xc0\xfb\x2f\x40\xfb\x3e\xd6\xff\x2a\xa4\xdf\xc6\xf9\x07\x50\xfe\x01\x8c\xbf\x1f\xe1\x3f\x17\xdf\x37\xd0\xfd\xf3\xb1\x7d\x2d\xa8\xca\x38\xf6\x9f\x56\x58\x7b\x37\x10\x84\x6f\xed\xe8\x12\xb2\x26\xb2\xb7\x79\x12\xf1\x6c\x67\x67\x96\xe1\x18\x3f\xec\x1a\x97\x99\xbe\x04\xa2\xa6\x1f\x4f\xc3\x93\x2a\x3b\xed\x30\x57\x19\xdf\xd8\x58\x25\x65\x89\x10\x4b\x07\x78\xd3\xde\x72\xc1\x9a\x32\xd5\x95\x94\xbc\x3b\x49\xc9\x19\xba\x7b\x88\x95\xb5\xb1\x7a\xd7\x99\x92\x27\x2a\x8a\x00\x86\xfb\xb6\x46\xc3\x9d\x7a\xb9\x17\x4f\x69\xc5\xb9\x59\x79\xe4\xe1\x0c\x0c\x5c\xb6\x22\xd1\xdd\x82\x5f\x11\x21\xe7\x45\x14\x81\x10\xeb\x82\x19\xcf\xed\x65\x7b\x28\xca\x44\xda\xbb\x52\x91\xb9\x54\x4d\x7c\xb3\x1b\x61\x8d\xbe\x64\x7c\x45\xd8\x1c\xa4\xc4\xb4\xa9\x42\xb2\x21\xe8\x50\x8c\x55\xcc\x51\x62\x8e\x9d\xef\x1d\xae\x85\x3c\xcb\x69\x2a\xad\xdd\x3c\xd4\xb0\x4f\xa0\xbb\x36\xee\xf5\x79\xd7\xa3\x71\x58\x9b\xb9\xcf\xb7\xc0\xfc\xf0\x4f\x12\x92\x62\xe4\xfe\x2d\xb0\xf8\x3d\x88\x50\x37\xe5\x96\x84\x6c\x68\xd4\x83\x87\x8c\xe7\x32\xb8\x9d\xde\x4e\xae\xa6\x37\x13\xf3\xc6\x38\x7b\xf5\x77\x88\xb6\x3c\x38\x7a\xf5\xe8\x38\x1f\x26\x33\xf5\xdc\xf8\x72\x14\xfc\x3f\x88\x0a\x19\xf4\xd7\x27\x41\x3f\x3e\xee\x1f\xff\xc3\x6e\xa2\x5e\x25\xf3\xdf\xde\x3e\x6f\xf1\xa9\x59\xdc\x3d\x38\xf6\xe0\x3d\xb6\xc8\x00\x33\x10\x70\x51\x7f\x4b\xf2\x38\xd0\xcf\x1f\x3c\xa8\x1a\xb6\xf4\x4a\xe0\xa4\x95\xb5\x76\x51\x76\x75\xfa\xd7\xcc\xdc\xb0\x94\x69\x33\xf6\x91\x9a\x15\x2b\x44\x03\xdb\xe6\x20\x64\x81\x0f\x93\x19\x28\x3d\x45\xb7\xe5\x3f\x15\xa8\x40\xf8\xfb\x12\xff\x9f\x81\x40\xdc\xf1\x36\x8f\xb6\xea\xbd\xe7\x12\xb5\x94\xc0\x0c\xf5\x9a\xa7\x2c\x77\x55\xd2\xba\x3e\xd6\x4f\xc1\xe2\xe3\xf1\xed\x1a\xf5\x37\x88\x2b\x9e\x6e\xe6\x32\xa6\xdc\xff\xc3\x44\x45\xf4\xb7\xbf\x20\x92\xdc\x3a\x9d\xaa\xfc\xdc\x02\x61\x72\x3b\x8f\x08\x83\x77\xa4\x8c\x67\xbc\x19\xda\xa8\x45\xee\x32\xde\x5e\x65\x0f\x8c\x35\x34\x3c\xec\x36\xde\x35\xa2\x1f\xcf\x52\x49\xf9\x89\xa6\x3a\xf1\x6c\x85\xf0\x9d\x66\x14\x7b\x96\xa7\x44\x8c\xaf\x4f\xbd\xef\x44\xbd\xac\x97\xd8\x4c\x55\x4b\xf6\x8b\xfa\x41\x91\xaa\x58\xa5\xf1\x82\x4f\xd3\x98\xde\xd3\xb8\x40\x93\x5a\xec\xd5\xa2\x77\x59\x43\xdf\xfe\x80\xea\x5e\x25\xed\x50\xde\x72\xeb\x36\x0c\xaa\x3f\x60\x89\x76\x39\x26\xf5\x12\xa2\xba\x60\xca\x76\xd3\x75\xab\x32\xb6\xc8\x56\x5e\x0d\x08\x84\x7c\x8f\x6c\x23\xe9\x11\xdc\x05\x14\x44\x9f\x24\x99\xdc\x99\xbb\xb9\x67\x4c\x8b\xd1\x65\x97\x6e\xc5\xba\x83\x03\x1e\xa4\x1e\x77\xd5\x26\x8d\xa4\xc0\x62\x98\x84\x11\x7a\x3d\x2f\x12\xb1\x13\x12\x12\x11\xd6\xca\x65\x58\x66\xaf\x1b\x4f\x98\xbe\x1c\x96\xfe\xb5\xb3\x0a\xd3\x5f\x5c\x7c\x95\x4b\x5a\x63\x98\x13\x04\xb6\x3f\xfa\xc0\xb6\xf6\xcc\xef\x7e\x14\x5f\xaa\x04\xb8\xa7\x6a\x4e\xa0\x4f\x24\x39\xb6\x57\xec\x1b\xa2\x31\x6e\xf0\x31\xb3\xad\xcd\x2b\x3c\xfc\xbf\x05\x14\x10\xeb\x47\x93\xa8\xf0\x59\x07\xaf\xba\x47\xd7\x43\x7a\xff\x45\x46\x5e\x39\xac\x0f\x2e\x62\x87\x3e\x3d\x68\xa0\x83\xad\xe5\x0f\x95\x48\x9d\xd2\xc6\xf1\xdf\xd6\x53\x4f\x44\x4a\x2d\x46\x1a\xc6\xc8\xac\xe2\xf4\x7f\x10\xd7\xce\x68\x46\x41\x4d\xb2\x6f\x44\xd5\x64\xe8\x97\x17\x04\xc1\x93\xc7\x35\x07\x40\x5d\x9b\x7e\xf3\xe8\xfa\xca\x08\xfb\x8a\x28\xeb\x8c\xb4\x92\x98\xf9\x0f\x01\xcf\x8b\x0e\x83\x8a\xa6\x91\x62\xaa\x66\x2a\x15\xea\xaf\x48\xbe\xa0\x31\xfa\x47\x2a\xb7\x37\xdc\xbb\x90\xd1\x74\x1f\x7b\x7f\x3a\xbd\xd0\xa5\x0d\x6d\x5f\xbe\x5d\xd7\xdc\xdc\x47\x21\x1e\x48\xff\x33\x00\x00\xff\xff\x21\x71\x59\x44\xc4\x21\x00\x00")

func templatesJenkinsNormalJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsNormalJobXml,
		"templates/jenkins/normal-job.xml",
	)
}

func templatesJenkinsNormalJobXml() (*asset, error) {
	bytes, err := templatesJenkinsNormalJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/normal-job.xml", size: 8644, mode: os.FileMode(420), modTime: time.Unix(1443616102, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsPipelineXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templatesJenkinsPipelineXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsPipelineXml,
		"templates/jenkins/pipeline.xml",
	)
}

func templatesJenkinsPipelineXml() (*asset, error) {
	bytes, err := templatesJenkinsPipelineXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1443542096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templatesJenkinsMultiJobXml,
	"templates/jenkins/normal-job.xml": templatesJenkinsNormalJobXml,
	"templates/jenkins/pipeline.xml":   templatesJenkinsPipelineXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"jenkins": &bintree{nil, map[string]*bintree{
			"multi-job.xml":  &bintree{templatesJenkinsMultiJobXml, map[string]*bintree{}},
			"normal-job.xml": &bintree{templatesJenkinsNormalJobXml, map[string]*bintree{}},
			"pipeline.xml":   &bintree{templatesJenkinsPipelineXml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
