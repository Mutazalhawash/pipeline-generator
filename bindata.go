// Code generated by go-bindata.
// sources:
// templates/jenkins/multi-job.xml
// templates/jenkins/normal-job.xml
// templates/jenkins/pipeline.xml
// DO NOT EDIT!

package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJenkinsMultiJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdd\x6f\xdb\x36\x10\x7f\xae\xff\x0a\xc1\x2f\x01\x06\x44\x4a\xba\x0f\x74\x80\xe2\xb6\x71\xda\xa2\x43\x9b\x78\x76\xbc\x3c\xd3\xd2\x59\x66\x4d\x89\x02\x49\xa5\xf1\x8a\xfe\xef\x3b\x7e\xc9\x94\xa5\x34\x49\x57\x0c\xcb\x4b\xc5\xfb\xe2\xf1\xee\x77\x1f\x6e\xfa\xf2\xae\x64\xd1\x2d\x08\x49\x79\x75\x76\x74\x1a\x9f\x1c\x45\x50\x65\x3c\xa7\x55\x71\x76\xb4\xbc\x7e\x7b\xfc\xe2\xe8\xe5\x64\x94\x66\xbc\x8c\x15\xdd\x12\x16\x7f\x82\x6a\x4b\x2b\x19\xd7\xac\x29\xf4\xbf\x65\xc3\x14\xfd\xc4\x57\xf1\x47\xfd\xf1\x07\x5f\xcd\x04\xff\x04\x99\x8a\xac\xc0\xd9\xd8\x29\x1c\x7b\xc1\x63\xcb\x78\x75\x1a\x9f\xfe\x3a\x9e\x8c\xa2\x28\x25\x99\xc2\xdb\x65\x62\x0e\x39\xc8\x4c\xd0\x5a\x53\x26\x69\x12\x9e\x34\x77\x0b\x50\x5f\x40\x0d\x55\x8e\x5e\x52\x90\x93\x35\x61\x12\xd2\xa4\x47\xd7\xc2\xb5\xe0\x35\x08\xe5\x8e\x48\x90\x10\xe7\x94\xac\x78\xf0\x0a\x5a\x03\xa3\x15\xc4\x33\xf7\x31\xb3\x3a\xbb\xd6\xfd\x1c\xc9\x18\x9f\xdd\xb1\x17\xf5\xfe\x9f\xc4\x2f\xe2\xdf\xc6\xd6\x32\xda\x56\x44\x6e\x2f\x49\x09\x93\x9a\x08\xc2\x18\xb0\x08\xee\x20\x6b\xb4\xe7\x69\xd2\x32\xbd\xb4\x54\xa4\x00\x43\xf9\xf2\x25\x8a\x17\xfe\x14\x7d\xfd\x9a\x26\x7b\x9e\xf5\x3a\x79\x82\xdb\xe6\xdd\x49\xf7\xe1\xa9\xcc\xca\x28\x63\x44\xca\xb3\xf1\xa6\xc9\x25\xaf\xda\xe4\x15\x54\xc5\xef\xa8\x5a\x4c\x3f\x8e\xdb\x07\x23\xed\xd5\xf3\xf8\x97\xf8\x04\xdf\xf6\xec\x19\x66\xbe\x5a\xd3\xe2\x2f\x8b\x90\xc9\xf3\x34\xe9\x12\xb4\x48\x23\x41\xcc\xa1\xe4\x0a\xa6\x86\x27\x35\xf5\x59\x3a\x70\xd7\xf2\x40\xd2\x08\xa2\x01\xc1\x4c\x1c\xd0\x95\xe5\xfc\x83\x09\x82\x26\x19\x2b\xc9\x23\xcd\xa0\xca\x90\x1b\xe9\x4a\x90\x2a\xdb\xc0\xfd\x3e\x9d\x1b\x81\x45\x0d\x99\xf3\xa6\xd2\xa1\xff\x29\x29\x89\x54\x20\xd2\xc4\x1c\x47\xf7\x78\xd2\x55\x4e\x93\xf0\xb6\x34\xa7\x92\xac\x18\x2c\x9a\x55\xc9\xf3\x86\xed\xd1\xda\x67\xd8\x4c\x0b\x04\x0c\x86\xf5\x36\xe4\x28\xd1\xa0\xc6\x10\xc7\xea\xe4\xfc\x1d\x54\x20\x88\xda\xb3\xec\xf3\x1b\xa4\xe9\xb2\x6a\x2f\x7d\x50\xd0\x1a\x24\x8d\xda\x70\x71\x25\xa6\xbc\x2c\xa9\xc2\x10\x78\x03\x7d\x86\x55\xc8\x18\x90\xca\xe4\x6f\xaa\xbf\x6e\xb8\xd8\xca\x9a\x64\x16\xcc\x96\x69\x05\x3f\x23\x58\xaf\x1a\xd5\x0a\x78\xc3\x3d\xba\x15\xaf\x45\x53\xc1\xb9\x0f\xa8\x93\xed\x12\x7d\xd8\x74\xd2\x67\x9c\x31\x2f\x15\x50\xac\x08\x2d\x2a\x2e\xe0\x92\x2b\xba\xde\x59\xff\xbd\xe8\x00\xc7\xaa\x20\x9c\x16\x1b\xac\x64\xfe\x79\xca\x78\xd5\x3a\x7b\x48\xb6\xc2\xab\x86\xb2\x7c\xba\xe1\x1c\x31\xf8\x8d\x5a\xc3\x76\xc0\xe2\x0b\x58\x13\xec\x85\xe7\x81\xca\x38\x71\x76\x50\xe8\x9a\x73\x36\x71\x32\x69\xe2\x09\xae\x81\xb5\x99\x5b\x17\xfe\x1a\x46\xa5\x6a\xf5\x05\x30\x4c\xe6\x2d\x5c\x13\x51\x80\xba\xa0\x62\xcf\x58\x83\xc0\xde\x08\x9e\x00\x77\x19\x6b\x72\xc8\xe7\x50\xb4\xcd\x37\x20\xeb\x12\x93\x81\x57\x16\x2a\xba\x2b\xf5\x88\x6f\x4a\x42\x99\xa7\xca\x2d\xad\xaf\x49\xe1\x60\xeb\x4f\x8e\x97\x95\xa1\x81\x1f\x8e\xdc\x07\xa3\x03\x77\x0a\x2a\xe9\x9e\x8b\xd5\x8a\x0e\x4d\x46\xba\x43\x66\xa4\x9a\x73\x52\x3a\xaf\xfd\xc9\x8c\x23\x5b\xaa\xf9\x41\xe9\xe6\x86\xb9\x62\x3c\xdb\x9a\x3c\xde\x6c\xa0\xba\xe0\x9f\x2b\xa9\x04\x90\xd2\x90\x70\x82\x7a\xa5\x07\xe5\xfa\xc6\x96\xf5\x63\x4c\xf5\xa4\xb4\x21\x25\x68\x51\xf8\xec\xe9\xfe\x8d\xad\x03\x53\x6f\x01\xe7\xed\x1c\x92\x47\x1e\xc4\xa8\xe8\xeb\xfa\xf1\x33\xff\xdc\x6a\xb6\xe3\xad\xde\x10\x69\x47\x98\xf9\x3a\xc1\xba\x6d\x29\x1d\x19\xd4\x95\x9e\x12\x45\xd8\x43\xb0\xb2\x0b\xc0\x89\xd8\xac\x34\x0b\x5b\x48\xcb\x7c\x8c\x3f\x33\x6f\xd3\xcf\x85\xa8\xfd\x4b\x91\xdf\x0e\x5c\xd3\x9a\x3c\x21\x14\xd2\x31\x99\xe1\x00\x2f\x7d\xe3\x0d\x08\xa1\x1c\xdc\xd5\x58\xb7\x39\x0e\x4e\x1f\xd0\x80\x12\x0a\x3a\xbc\xa0\x4f\x07\x08\xd2\x94\x50\x10\xd7\x06\x89\x19\x9c\xeb\xd6\x3e\x23\x6a\x83\xcb\x4f\x8f\x14\xca\x97\xe4\x6e\x0e\x98\x6a\xec\x82\x18\xde\xe0\xd4\x71\xb3\xd2\x57\x69\xce\x6e\xa1\x74\x01\x15\xbb\xd6\xdf\x01\x56\x5f\x15\xe3\x98\x53\xb3\x7d\x75\xd4\xf6\xe4\x50\x05\x57\x14\xa1\x5e\x33\xa6\x9f\x66\xa3\x17\x52\x3a\x61\x6e\xf5\x0d\x12\x07\x6c\x6d\x29\x63\x26\x9b\x57\x15\x2a\xcf\x41\x62\x8a\xf7\xb7\xbe\x7d\xfd\xfe\xc3\x72\xfe\x06\xf7\xbe\x6f\x8a\x85\x06\x0d\xb8\xaf\x2a\xb6\x7b\xbf\xc6\x1c\x4d\x37\x1a\x67\x6d\x87\x19\x66\x1e\x78\x6c\x57\x8a\x28\xf8\x1b\x5a\x27\x70\x87\x99\xc3\x2d\xd5\x5d\xc6\x54\x85\x01\x0f\xe0\xb4\x94\x83\x1b\x56\xc7\x1c\x22\x7c\x85\xcb\xdc\x9f\x0d\x34\x90\xdb\x61\x24\xf7\x05\x3b\xc0\xeb\xaa\x0f\x2d\x28\xf7\xbb\xd3\x79\x5e\xd2\x7b\x9f\xb9\xf1\xbb\xeb\x0d\x8b\x0c\x77\xf1\x7d\xf9\xba\x06\x10\x96\xbb\x0e\xa9\xa2\x55\x63\x5a\xf8\x3e\x67\x8b\xe5\x74\xfa\x66\xb1\x78\xbb\xfc\x60\x9c\x1a\x90\x18\x3d\xda\xbd\x81\xf6\xe4\x72\xed\xde\x9f\xd6\xcd\x0a\x27\xc4\xa6\x0d\x07\xfa\x4d\xd7\x51\x7c\x89\x93\xe2\x23\xc1\x9b\x59\xd8\x85\x70\x35\x8a\xf5\xad\x19\x76\x4d\xd1\x94\x72\x87\x0b\x62\x29\xe3\x4e\xd4\x63\x63\xbe\xdd\xcf\x5d\x2f\x8e\x6d\xec\x1d\xf5\xda\x12\x5b\x3c\x18\x95\xde\xef\x8b\x53\x44\xc8\xcf\xe3\x30\x5a\x07\x09\xfa\x91\xe0\xfb\x17\xd0\xfb\x4e\xd8\xf5\x20\x87\xfb\x80\x9f\x8b\xee\x27\xa4\xee\xce\xd2\xf4\xeb\x5e\x3e\xf4\x52\x30\x28\xed\xc0\xf1\x63\x33\xd5\x62\x23\xc0\x74\x80\x94\x0e\x46\x0e\x82\x51\xfb\x87\xd3\xbf\x21\xef\xdc\x71\x88\x82\x8e\xe4\xb1\x13\xc5\x54\x3d\xff\xfd\x09\x20\x78\xf0\xba\x81\xc1\xf8\x5f\xb4\xb6\xff\x59\x73\xb3\xff\x39\xa0\x51\xb3\xc7\x57\x8b\xac\x96\x33\x3c\xb1\x5c\x83\xba\x6f\x70\xb9\xa0\xdf\x50\xb5\xb9\xe4\x81\x43\xee\xa5\xf7\xb1\xef\x2f\xa7\x27\xa6\xf4\xe0\xb5\x4f\x37\xd7\x07\x3b\x86\xa4\xd3\x26\xed\x2c\xbd\x11\xa4\xae\xed\x9a\xf9\xa4\x66\xec\xca\x75\x32\xfa\x27\x00\x00\xff\xff\x88\x32\x71\x6b\x7c\x12\x00\x00")

func templatesJenkinsMultiJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsMultiJobXml,
		"templates/jenkins/multi-job.xml",
	)
}

func templatesJenkinsMultiJobXml() (*asset, error) {
	bytes, err := templatesJenkinsMultiJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/multi-job.xml", size: 4732, mode: os.FileMode(420), modTime: time.Unix(1443624201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsNormalJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x7b\x6f\xdb\x38\x12\xff\x3f\x9f\x42\xc8\x15\xc8\xdd\xe2\x2c\x37\xd9\xc5\x76\x17\x70\xbc\xcd\xc3\x69\xbd\xe7\xb8\x3e\x3f\xda\x3f\x0e\x87\x82\x96\x68\x99\x0d\x25\x0a\x22\x95\xd6\xd7\xeb\x77\xbf\xe1\x53\xd4\xc3\x4e\x82\x16\x07\x14\x28\x0a\x14\xd6\xcc\x70\x48\x0e\xe7\xf1\xe3\x30\x83\x3f\x3e\xa5\x34\xb8\xc7\x05\x27\x2c\x3b\x3f\x39\x0d\x9f\x9f\x04\x38\x8b\x58\x4c\xb2\xe4\xfc\x64\xb5\xbc\xe9\xfd\x76\xf2\xc7\xf0\x68\x90\x17\xec\x03\x8e\xc4\xf0\x28\x08\x06\x28\x12\x20\xcc\xfb\xea\x23\xc6\x3c\x2a\x48\x2e\x29\x9a\x40\x59\x32\x67\x02\x09\x56\x04\x11\x45\x9c\x9f\x1f\x6f\xcb\x98\xb3\x2c\x14\x88\xdf\xf1\x70\xe2\xd8\xc7\x52\x5c\x6a\x40\x3b\xbe\x64\xff\xc0\x38\x1f\xf6\x4e\x07\x7d\xef\x53\xf3\xb3\x32\xf5\xd8\xd5\x97\xe6\xa2\x42\x90\x0d\xac\xe8\xba\xae\xa5\x83\x5c\x97\x9f\x3a\x3d\x9e\xf4\xd4\x57\x3e\xe8\x57\x5b\x51\xdf\x77\xc0\xb8\xc6\x39\xce\x62\xb0\x10\xc1\x7c\xb8\x41\x94\xe3\x41\xbf\x45\x97\xc2\x60\xb0\x1c\x83\x5a\xfd\x09\x04\x8e\xc3\x98\xa0\x35\xa3\xe1\x07\x9c\xdd\x91\x8c\x87\x39\xc9\x31\x25\x19\x0e\x67\xe6\xc7\x4c\x8f\xd9\x05\x39\x2d\x13\x92\x9d\x1f\xc7\x40\x86\xb3\xd9\xf5\xac\x68\x4f\x73\x5e\x3e\x0f\x7f\x0b\x5f\x18\x03\x82\x6e\x69\xda\x29\x4a\xf1\xf0\xf3\xe7\x20\x5c\x9a\x8f\xe0\xcb\x97\x41\xdf\x71\xac\x28\x17\x28\xc1\x4e\x76\x61\xbf\x94\x70\xc5\xd3\x4b\xee\x3f\x61\xcd\xda\x62\xf5\x5d\xc3\x0c\x64\x13\x84\x63\x3e\xce\x88\x20\x88\xfe\xc9\xd6\x30\x8f\x14\xe4\x51\xda\xf0\x0e\xbd\x31\x1e\x26\x44\x84\xaf\x88\x58\x5c\xdd\x1e\x3b\x33\x00\xed\xe5\x59\x78\x16\xfe\x6e\x5d\x26\x62\xd9\x86\x24\x6f\xb5\xd7\x0e\xcf\x06\xfd\x3a\x41\x0b\x95\x1c\x17\x73\x9c\x32\x81\xaf\x14\x97\x3b\x1b\x74\x4c\xb9\x6a\x08\x5b\x59\xa9\xa7\xa0\xca\x56\xb0\xaa\xd5\x7c\xa2\x0c\x25\x49\x56\x59\xff\xd1\xda\x60\x5c\xf7\x92\x06\xeb\x02\x65\xd1\x16\x1f\x5c\xe1\xa5\x92\x59\xe4\x38\xf2\xd6\x96\xc9\xc3\xfa\xa9\x2f\x97\x57\xf1\xc9\x86\xe0\x42\xad\x33\xf3\x4f\xbe\x6b\xa1\x4d\xa5\x83\x7e\x7d\x29\x83\x98\x70\xb4\xa6\x78\x51\xae\x53\x16\x97\xb4\x72\xfa\x36\x43\x0f\x28\x70\x54\xc2\x29\xdc\xfb\x1c\x51\x94\x30\xa2\x8b\x63\x26\x61\xaf\x70\x86\x0b\x24\x2a\x96\xb6\x4f\x09\x34\x99\x6a\xdc\xa4\x0f\x0a\x9a\x20\x2f\xc5\x96\x15\x6f\x8a\x2b\x96\xa6\x44\x08\x5c\x58\x05\x6d\x86\x71\x28\x8a\x51\xa6\x4e\xf9\x4a\xfe\x7a\xc7\x8a\x3b\x9e\xa3\x48\x87\x85\x66\x6a\xc1\x8f\xe0\xf6\x6f\x4a\xe1\x04\xac\xe2\x16\x5d\x8b\xe7\x45\x99\xe1\x4b\x6b\x52\x23\x5b\x27\x5a\xb3\x49\xaf\x98\x31\x4a\xad\x94\x47\xd1\x22\x24\xc9\x58\x81\xa7\x0c\x52\xd5\x4e\xaf\xdf\x8a\x76\x70\x5c\x08\x2c\xb6\x88\x52\xf6\xf1\x8a\xb2\xcc\x2d\xb6\x49\x36\x4e\x58\x12\x1a\x5f\x6d\x19\x03\x27\x3d\x10\x9c\xa5\x20\x34\xbc\xc6\x1b\x54\x52\x71\xe9\x0d\x39\xee\x1b\x3d\x20\xb4\x64\x8c\x0e\x8d\xcc\xa0\x6f\x09\x26\x0f\xba\x93\xdb\x24\x76\x1a\x4a\xb8\x70\xe3\x0b\x4c\xe1\x30\xef\xf1\x12\x15\x09\x16\xd7\xa4\xa8\x18\x1b\x5c\x40\x8a\xc5\x96\x80\x3f\x45\xb4\x8c\x71\x3c\xc7\x89\x2b\x48\x1e\x59\x46\x21\xf7\x56\xa5\x5d\x45\xe6\xb7\x16\x71\x94\x22\x42\x2d\x95\xdf\x91\x7c\x89\x12\xe3\xb6\xf6\xcb\x1c\x42\x56\x9b\x72\x68\x52\x9c\x3c\x77\xa8\x98\xb0\x58\xf0\x18\xe9\x46\x4d\x02\x14\x07\xe5\x4b\xcd\xf1\x66\xc6\x28\xf5\x97\xf5\xcd\xe3\xe1\x41\x9b\xe3\x4f\x02\x67\xbc\xaa\xea\x7d\x58\x91\xfa\x21\x0a\x92\x24\x60\x46\x2d\x67\x76\xbb\xca\xb9\x28\x30\x4a\x21\x9f\x73\x9d\xd0\x41\xd2\x56\x08\x3b\x22\x9c\x63\x09\x2b\xb0\xf2\x91\xa5\x26\x56\x55\x08\x32\x4e\xdf\x7d\x95\x46\xdf\x4c\x83\x0c\x65\xd5\xe6\x24\xe0\xb5\x4d\x29\x57\xfd\xb6\x05\xe6\x5b\x46\xe3\x66\x62\x5c\xac\xae\xae\x46\x8b\x45\x3d\x0f\x02\x93\x15\x00\x6f\x10\x1d\x3e\x1f\xf4\xed\xcf\x8a\x19\x31\x0a\xf5\xfe\x72\xb2\x1a\xc9\xb2\x42\x59\x51\xe3\xa5\x39\xc5\x42\xef\xc9\xf8\x47\x9d\xe6\x92\x6d\x63\x51\x83\xfe\xe3\xed\xe3\xdc\xc5\xb7\xb9\x91\xc0\xf1\x2d\xca\x4a\x88\xdd\x9d\xf1\x2b\xf0\x03\x77\x04\x16\x68\xd9\x19\xa0\x88\x76\x19\x7e\xf8\x53\x60\xfe\xc1\x39\x7b\xf5\xc4\x64\x98\x19\xe3\x42\x67\x91\xd7\x8c\xdd\xf1\x7a\x92\x69\x32\x8f\x6a\xa5\x65\xef\xcc\xfe\x96\xc0\x36\x9e\x53\xe9\xb4\xf3\xae\x40\x79\xee\xdc\xac\x59\xfe\x10\xb8\xa6\x3a\x8a\xf0\x02\x7e\x5d\xc9\x5f\x97\xde\x28\x87\x13\x9c\x1c\xe0\xa3\x5f\xc2\xe7\x15\x3e\x52\xc4\x5b\x94\x2b\x6c\x03\xae\x5e\xa4\xe6\x6c\x2d\xed\xa8\xb3\x42\x3e\x30\xef\xe3\x81\x9d\x01\x26\x10\x9b\xb0\xf5\x75\x29\xb1\xf1\x53\x21\x9e\x81\xe8\x4b\x0c\xde\x06\xf1\x3e\x7c\xf6\xf9\x72\x35\x9e\x5c\xbf\x9f\xae\x6e\x2f\x47\xf3\x2f\xbd\x67\x9f\x5f\x8d\x97\xef\xe7\xa3\xb7\xe3\xc5\xf8\xcd\xf4\xef\x14\x67\x89\xd8\x9e\xbf\x80\xb8\x69\x8e\xac\xa2\x2e\x86\xcf\x6b\xc2\x81\xbc\x53\x56\xd0\x0e\xdd\xa6\x3f\x1e\x0d\xb6\x37\xda\x7d\xa2\x82\xa4\x18\xd0\x66\x0a\x56\x0c\x97\xd5\xef\xce\x53\xf5\x64\x5f\x9e\x86\xbf\x86\x67\xc7\x26\x47\xb5\x3c\xa7\x16\x0f\xdf\x15\xc6\x54\x09\xaa\x95\xa7\xa0\xe0\xa9\xf8\x94\x60\x60\xc3\xeb\xc8\xef\x07\x2a\xfd\x81\x4a\x7f\xa0\xd2\x1f\xa8\x54\x1f\x42\xd6\x39\xa5\x0f\x2b\x2b\x48\xf7\x7d\x17\xdc\x3d\x69\x5f\x83\x8b\xaa\xe7\xb0\xa0\xe8\x1e\x4f\xd0\x1a\x53\x53\x0d\xe0\x44\xc1\x21\x71\x3c\x65\xb1\x69\x7d\xf8\x12\x10\x83\x3e\xff\xa8\x81\x58\x22\x94\xcd\x19\x4a\xad\xa7\xda\xcf\xa3\x2a\x15\xc5\x8d\x0c\x14\x6b\x53\x53\x16\xdd\xe9\x1d\x6c\x71\x76\xcd\x3e\x66\x1a\xc2\x2a\x12\x5c\x0f\xec\xa0\x07\xe5\xda\xca\x2c\x3c\x3e\xac\xaa\x25\x75\xa4\x2b\x1b\xe4\x3c\xf0\x59\x1d\x29\x6e\x57\x0d\xf2\xd1\x01\xbc\xff\x04\xb4\xef\x63\xfd\xaf\x42\xfa\x6d\x9c\x7f\x00\xe5\x1f\xc0\xf8\xfb\x11\xfe\x63\xf1\x7d\x03\xdd\x3f\x1e\xdb\xd7\x9c\x4a\xf9\xb1\x7f\xb5\x82\xdc\x9b\xe0\x20\xbc\xb0\xad\x4b\x9c\x37\x91\xbd\x8d\x93\x88\xe5\x3b\xdb\xb3\x0c\xaf\xe0\xc3\x8e\x71\x91\xe9\x4b\x00\x6a\xfa\xf9\x2c\x3c\xad\xa2\xd3\x36\x73\xa5\xf1\x8d\x8d\x65\x50\x2a\x84\xa8\x0e\xc0\xeb\xf6\xaa\x01\x1b\x42\x65\x55\x92\xf2\x6e\x26\x29\x67\xe8\xee\x22\xa6\x72\x63\x75\xaf\x33\x29\x8f\x57\x14\x8e\x29\xe8\x6d\xb5\x86\x3b\xf7\xe5\x6e\x3c\xca\x8a\x0b\x33\xf2\xd8\xc3\x19\xe0\xb8\x74\x8d\xa2\xbb\x25\x9b\x20\x2e\x16\x65\x14\x61\xce\x37\x25\x35\x27\xb7\x97\xed\xa1\x28\xe3\x69\x37\x6a\x23\x0b\x21\x8b\x78\xb2\x1b\x42\x8e\x7e\x45\xd9\x1a\xd1\x05\x16\x02\xc2\xa6\x72\xc9\x86\xa0\x43\x31\x76\x63\x8e\x12\x33\xa8\x7c\x37\x30\x16\x17\x79\x41\x32\x61\xed\xe6\xa1\x86\x7d\x02\xdd\xb9\x71\xef\x99\x77\x5d\x1a\x07\xb5\x9e\xfb\x62\x8b\xa9\xef\xfe\x69\x8a\x32\xf0\xdc\xbf\x04\x16\xbf\x07\x11\xec\x4d\x1e\x4b\x8a\x12\x12\x1d\xe1\x4f\x39\x2b\x44\x30\x1b\xcf\x46\x93\xf1\x74\x64\xee\x18\xe7\xcf\xfe\x8a\xa3\x2d\x0b\x8e\x9f\x7d\x76\x9c\xb7\xa3\xb9\xbc\x6e\x7c\x39\x0e\xfe\x1b\x44\xa5\x08\x7a\x9b\xd3\xa0\x17\x9f\xf4\x4e\xfe\x66\x95\xc8\x5b\xc9\xe2\xf5\xc5\xe3\x06\x9f\x99\xc1\xdd\x8d\x63\x0f\xde\x43\x89\x0c\x20\x02\x31\x0c\xea\x6d\x51\x11\x07\xfa\xfa\x03\x13\x55\xcd\x96\x23\x05\x9c\xf4\x66\xad\x5d\xa4\x5d\xdd\xfe\x6b\x66\x6e\x58\xca\x94\x19\x7b\x49\xcd\xcb\x35\xa0\x81\x6d\xb3\x11\x72\x91\xc5\x05\x23\xf1\x04\x8e\x2f\x94\xff\x81\x77\x54\xb7\x71\x56\x24\xf6\xa2\x14\x11\xaf\xc4\xa9\x21\xef\xdf\x53\x3b\x68\x66\x75\x7b\x65\x55\xc9\xf4\xa4\x88\xbc\x94\x54\x91\xbb\xc5\x88\x8a\xed\xce\x6b\x9d\x64\xaf\x9b\x24\x97\x9b\x26\x44\x62\x2e\xc0\x53\x5e\xbe\xd2\x34\x97\x08\xd4\x84\xaa\x20\xff\xcb\x9f\xf4\xdf\x90\x02\x2a\x96\x73\x69\x0d\x9d\x46\xe6\x79\xa8\x9a\x51\xd6\xc3\x32\x7b\x93\xdd\x00\x5c\xa9\x2a\x61\x83\xea\x56\xcc\xf1\xac\xc0\xf7\x84\x95\x5c\x05\xf6\x05\x9f\x5b\x04\xe5\x21\xc1\xbd\x22\x9e\x9a\x85\x90\x95\xf6\x80\x92\x3d\x02\x9e\x8a\x6b\x4c\x05\x7a\x8b\x68\x59\xe1\xe0\x06\xb5\x65\x55\xee\x1d\x13\xa2\x3b\x4e\x78\x2f\x02\x9c\x0b\x49\xf6\x85\x77\x50\x25\x54\x70\x39\xf9\x92\x09\x44\x2f\x28\xed\x77\x73\x5e\x93\x64\xbb\x87\x35\x65\x45\x8a\xf6\x8d\x9b\xb0\x8f\x15\x67\xa3\x0c\xdc\x9e\xc9\xa3\xcb\x79\x74\xfa\xf6\x3c\xf6\xa6\xce\xd7\x19\xbd\x31\xa6\x43\x97\x5e\xd8\x21\x6d\x5a\xa2\xa9\xcf\x8c\xeb\xd0\x58\xdb\x4d\xe5\xab\x95\xf1\xe1\xb3\xa4\xf1\x35\x54\xe1\x48\xdc\xd6\x6f\x7c\x5d\xac\x2a\x07\x67\xb2\x59\x95\x97\x02\x4f\xf1\x47\x53\x15\x1a\xc4\x5a\xbe\x9e\x63\xce\xe8\x3d\x9e\x1b\xac\x3f\x43\x62\x5b\xcf\xd7\x9d\x02\x2e\x9a\x90\xbc\xbb\x65\x2d\xcb\x78\x99\x01\xe2\xca\x08\x99\xec\xf3\xe4\x24\x71\xa0\x45\x08\xc5\x24\x5e\x97\x09\x0f\x67\x7a\x8e\x3d\xe0\x61\x63\xc5\xa4\xfc\x25\xfc\x68\x27\x20\x2b\xf2\xf2\x97\xf0\xd7\xd3\xff\x4b\xf6\xb9\x19\x4f\xaf\x2f\x57\xaf\x16\x3f\x32\xcf\x57\x66\x9e\x43\xb9\xe7\x60\xf6\x79\x20\xff\x1c\xca\x40\xfb\x73\x50\x3b\x0b\xed\x61\xb5\x67\xfb\x6e\xf2\x83\x1d\xf6\x94\xf4\xd0\x0e\xd5\x46\x66\x90\x97\x7a\x3e\x47\xd9\xdd\x45\x04\x9a\x00\x6c\x3a\xe7\x6e\x92\x1b\x60\xdb\x28\xac\xec\x65\x7a\x03\x75\x7a\x0b\x5d\xee\x4f\x0a\x07\x12\xce\x12\x73\xd8\xb2\x84\x79\xbc\x1b\x78\x7e\x28\x01\xbf\x85\x7f\xae\xe0\x7f\x30\x0d\x44\xf0\x45\x11\x6d\x65\xbb\xdb\x79\xb2\x92\x00\x0f\xf6\x7a\x07\x42\x69\x95\xd2\xfa\x7a\x58\x9f\x05\xce\xdf\xe3\xdb\x31\xf2\x4f\x30\x26\x2c\x4b\x16\x22\x26\xcc\xff\xbb\x8c\x8a\xe8\xab\xbf\x46\x02\xb9\x0d\x7a\xd7\x13\x9d\xe0\x16\x11\xa2\xf8\x06\x29\x38\x0f\x2b\x03\x5b\xb5\xc8\x5d\xd8\x71\xef\x66\x0f\x58\x50\x77\xc7\xba\x8d\x77\x2b\x03\xa0\xb2\x54\xaa\x3e\xc1\x54\xa7\x9e\xad\x0a\x1c\x91\x9c\xc0\x95\xdd\xdb\x84\x74\x60\xad\x77\x24\x1f\x16\x56\x26\x6a\xfd\x3b\xed\x41\x91\xea\xae\x96\x41\xf8\x8d\xb3\x98\xdc\x93\xb8\x04\x93\xda\xd6\x53\x8b\xde\x65\x0d\xbd\xfa\x03\x5b\xf7\x2e\x92\x1d\x9b\xb7\xdc\xba\x0d\x83\xea\xef\x77\x78\xfb\x36\x8a\xea\x37\x28\x09\xc1\x33\xba\x1b\x6f\x5a\x17\xc3\x16\xd9\xca\xcb\xf7\x11\x2e\xde\x00\xdb\x48\x7a\x04\xb7\x00\xd9\xa1\x1c\xa5\xb9\xd8\x99\xb5\xb9\x2e\x6e\x8b\xd1\x65\x97\xee\x8d\x75\x3b\x07\xfe\x24\xf4\x6b\x5f\xed\xa1\x15\x95\x70\x17\x4c\xc3\x08\x4e\xbd\x28\x53\xbe\xe3\x02\xa7\x3c\xac\xc5\x73\xa8\x2e\x2f\xee\x75\xc6\xb4\x25\x42\x75\xbe\xf6\xa9\xc6\x5c\xaf\x9d\x7f\xa9\x21\xad\x57\xa8\xd3\xf0\x97\xf0\x67\xbf\xaf\x57\x7b\xe5\x68\x83\x0b\xf3\xb4\x32\x87\x1a\x2a\x9f\x49\xf4\x8c\xa8\x80\x62\x0e\xd9\x87\x37\x5e\x5b\xfc\x96\xa1\x51\x9f\xae\x61\xf2\x7f\x96\xb8\xc4\xb1\xee\x19\xf3\xaa\x3d\xd5\xc1\xab\xd6\xd1\xf5\x8e\xb0\x7f\x21\x43\xef\x36\x58\x7f\xb7\x89\x5d\xf3\xcd\xeb\x8c\x68\x67\x6b\x9d\x87\x0c\xa4\x4e\x69\x73\xf0\xdf\xf6\xa4\x1e\xf0\x94\x9a\x8f\x34\x8c\x91\xdb\x8d\x93\xff\xe0\xb8\x36\x47\xd3\x0b\x6a\x92\x3d\x23\x2a\xef\xa0\xbf\x3f\xc1\x09\x1e\x9c\xae\xf9\xfe\xd5\xa5\xf4\x9b\x7b\xd7\x57\x7a\xd8\x57\x78\x59\xa7\xa7\x29\x62\xee\xf7\x41\xbd\x53\x74\x2d\x38\xde\x34\x52\x4c\xe4\x93\x52\xd5\xf4\xac\x48\xbe\xa0\x31\xfa\x3b\x22\xb6\x53\xe6\x2d\xc8\xec\x74\x1f\x7b\x7f\x38\x3d\xf1\x48\x1b\xbb\x7d\xba\xba\xb6\xb3\x83\x49\xbc\x26\x8c\xd7\xa3\xfc\x5f\x00\x00\x00\xff\xff\x0b\xed\x2b\xa0\xc3\x2a\x00\x00")

func templatesJenkinsNormalJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsNormalJobXml,
		"templates/jenkins/normal-job.xml",
	)
}

func templatesJenkinsNormalJobXml() (*asset, error) {
	bytes, err := templatesJenkinsNormalJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/normal-job.xml", size: 10947, mode: os.FileMode(420), modTime: time.Unix(1444072175, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsPipelineXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templatesJenkinsPipelineXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsPipelineXml,
		"templates/jenkins/pipeline.xml",
	)
}

func templatesJenkinsPipelineXml() (*asset, error) {
	bytes, err := templatesJenkinsPipelineXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1443542096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templatesJenkinsMultiJobXml,
	"templates/jenkins/normal-job.xml": templatesJenkinsNormalJobXml,
	"templates/jenkins/pipeline.xml":   templatesJenkinsPipelineXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"jenkins": &bintree{nil, map[string]*bintree{
			"multi-job.xml":  &bintree{templatesJenkinsMultiJobXml, map[string]*bintree{}},
			"normal-job.xml": &bintree{templatesJenkinsNormalJobXml, map[string]*bintree{}},
			"pipeline.xml":   &bintree{templatesJenkinsPipelineXml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
