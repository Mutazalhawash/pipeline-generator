// Code generated by go-bindata.
// sources:
// templates/jenkins/multi-job.xml
// templates/jenkins/normal-job.xml
// templates/jenkins/pipeline.xml
// DO NOT EDIT!

package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJenkinsMultiJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdd\x6f\xdb\x36\x10\x7f\xae\xff\x0a\xc1\x2f\x01\x06\x44\x4a\xba\x0f\x74\x80\xe2\xb6\x71\xda\xa2\x43\x9b\x78\x76\xbc\x3c\xd3\xd2\x59\x66\x4d\x89\x02\x49\xa5\xf1\x8a\xfe\xef\x3b\x7e\xc9\x94\xa5\x34\x49\x57\x0c\xcb\x4b\xc5\xfb\xe2\xf1\xee\x77\x1f\x6e\xfa\xf2\xae\x64\xd1\x2d\x08\x49\x79\x75\x76\x74\x1a\x9f\x1c\x45\x50\x65\x3c\xa7\x55\x71\x76\xb4\xbc\x7e\x7b\xfc\xe2\xe8\xe5\x64\x94\x66\xbc\x8c\x15\xdd\x12\x16\x7f\x82\x6a\x4b\x2b\x19\xd7\xac\x29\xf4\xbf\x65\xc3\x14\xfd\xc4\x57\xf1\x47\xfd\xf1\x07\x5f\xcd\x04\xff\x04\x99\x8a\xac\xc0\xd9\xd8\x29\x1c\x7b\xc1\x63\xcb\x78\x75\x1a\x9f\xfe\x3a\x9e\x8c\xa2\x28\x25\x99\xc2\xdb\x65\x62\x0e\x39\xc8\x4c\xd0\x5a\x53\x26\x69\x12\x9e\x34\x77\x0b\x50\x5f\x40\x0d\x55\x8e\x5e\x52\x90\x93\x35\x61\x12\xd2\xa4\x47\xd7\xc2\xb5\xe0\x35\x08\xe5\x8e\x48\x90\x10\xe7\x94\xac\x78\xf0\x0a\x5a\x03\xa3\x15\xc4\x33\xf7\x31\xb3\x3a\xbb\xd6\xfd\x1c\xc9\x18\x9f\xdd\xb1\x17\xf5\xfe\x9f\xc4\x2f\xe2\xdf\xc6\xd6\x32\xda\x56\x44\x6e\x2f\x49\x09\x93\x9a\x08\xc2\x18\xb0\x08\xee\x20\x6b\xb4\xe7\x69\xd2\x32\xbd\xb4\x54\xa4\x00\x43\xf9\xf2\x25\x8a\x17\xfe\x14\x7d\xfd\x9a\x26\x7b\x9e\xf5\x3a\x79\x82\xdb\xe6\xdd\x49\xf7\xe1\xa9\xcc\xca\x28\x63\x44\xca\xb3\xf1\xa6\xc9\x25\xaf\xda\xe4\x15\x54\xc5\xef\xa8\x5a\x4c\x3f\x8e\xdb\x07\x23\xed\xd5\xf3\xf8\x97\xf8\x04\xdf\xf6\xec\x19\x66\xbe\x5a\xd3\xe2\x2f\x8b\x90\xc9\xf3\x34\xe9\x12\xb4\x48\x23\x41\xcc\xa1\xe4\x0a\xa6\x86\x27\x35\xf5\x59\x3a\x70\xd7\xf2\x40\xd2\x08\xa2\x01\xc1\x4c\x1c\xd0\x95\xe5\xfc\x83\x09\x82\x26\x19\x2b\xc9\x23\xcd\xa0\xca\x90\x1b\xe9\x4a\x90\x2a\xdb\xc0\xfd\x3e\x9d\x1b\x81\x45\x0d\x99\xf3\xa6\xd2\xa1\xff\x29\x29\x89\x54\x20\xd2\xc4\x1c\x47\xf7\x78\xd2\x55\x4e\x93\xf0\xb6\x34\xa7\x92\xac\x18\x2c\x9a\x55\xc9\xf3\x86\xed\xd1\xda\x67\xd8\x4c\x0b\x04\x0c\x86\xf5\x36\xe4\x28\xd1\xa0\xc6\x10\xc7\xea\xe4\xfc\x1d\x54\x20\x88\xda\xb3\xec\xf3\x1b\xa4\xe9\xb2\x6a\x2f\x7d\x50\xd0\x1a\x24\x8d\xda\x70\x71\x25\xa6\xbc\x2c\xa9\xc2\x10\x78\x03\x7d\x86\x55\xc8\x18\x90\xca\xe4\x6f\xaa\xbf\x6e\xb8\xd8\xca\x9a\x64\x16\xcc\x96\x69\x05\x3f\x23\x58\xaf\x1a\xd5\x0a\x78\xc3\x3d\xba\x15\xaf\x45\x53\xc1\xb9\x0f\xa8\x93\xed\x12\x7d\xd8\x74\xd2\x67\x9c\x31\x2f\x15\x50\xac\x08\x2d\x2a\x2e\xe0\x92\x2b\xba\xde\x59\xff\xbd\xe8\x00\xc7\xaa\x20\x9c\x16\x1b\xac\x64\xfe\x79\xca\x78\xd5\x3a\x7b\x48\xb6\xc2\xab\x86\xb2\x7c\xba\xe1\x1c\x31\xf8\x8d\x5a\xc3\x76\xc0\xe2\x0b\x58\x13\xec\x85\xe7\x81\xca\x38\x71\x76\x50\xe8\x9a\x73\x36\x71\x32\x69\xe2\x09\xae\x81\xb5\x99\x5b\x17\xfe\x1a\x46\xa5\x6a\xf5\x05\x30\x4c\xe6\x2d\x5c\x13\x51\x80\xba\xa0\x62\xcf\x58\x83\xc0\xde\x08\x9e\x00\x77\x19\x6b\x72\xc8\xe7\x50\xb4\xcd\x37\x20\xeb\x12\x93\x81\x57\x16\x2a\xba\x2b\xf5\x88\x6f\x4a\x42\x99\xa7\xca\x2d\xad\xaf\x49\xe1\x60\xeb\x4f\x8e\x97\x95\xa1\x81\x1f\x8e\xdc\x07\xa3\x03\x77\x0a\x2a\xe9\x9e\x8b\xd5\x8a\x0e\x4d\x46\xba\x43\x66\xa4\x9a\x73\x52\x3a\xaf\xfd\xc9\x8c\x23\x5b\xaa\xf9\x41\xe9\xe6\x86\xb9\x62\x3c\xdb\x9a\x3c\xde\x6c\xa0\xba\xe0\x9f\x2b\xa9\x04\x90\xd2\x90\x70\x82\x7a\xa5\x07\xe5\xfa\xc6\x96\xf5\x63\x4c\xf5\xa4\xb4\x21\x25\x68\x51\xf8\xec\xe9\xfe\x8d\xad\x03\x53\x6f\x01\xe7\xed\x1c\x92\x47\x1e\xc4\xa8\xe8\xeb\xfa\xf1\x33\xff\xdc\x6a\xb6\xe3\xad\xde\x10\x69\x47\x98\xf9\x3a\xc1\xba\x6d\x29\x1d\x19\xd4\x95\x9e\x12\x45\xd8\x43\xb0\xb2\x0b\xc0\x89\xd8\xac\x34\x0b\x5b\x48\xcb\x7c\x8c\x3f\x33\x6f\xd3\xcf\x85\xa8\xfd\x4b\x91\xdf\x0e\x5c\xd3\x9a\x3c\x21\x14\xd2\x31\x99\xe1\x00\x2f\x7d\xe3\x0d\x08\xa1\x1c\xdc\xd5\x58\xb7\x39\x0e\x4e\x1f\xd0\x80\x12\x0a\x3a\xbc\xa0\x4f\x07\x08\xd2\x94\x50\x10\xd7\x06\x89\x19\x9c\xeb\xd6\x3e\x23\x6a\x83\xcb\x4f\x8f\x14\xca\x97\xe4\x6e\x0e\x98\x6a\xec\x82\x18\xde\xe0\xd4\x71\xb3\xd2\x57\x69\xce\x6e\xa1\x74\x01\x15\xbb\xd6\xdf\x01\x56\x5f\x15\xe3\x98\x53\xb3\x7d\x75\xd4\xf6\xe4\x50\x05\x57\x14\xa1\x5e\x33\xa6\x9f\x66\xa3\x17\x52\x3a\x61\x6e\xf5\x0d\x12\x07\x6c\x6d\x29\x63\x26\x9b\x57\x15\x2a\xcf\x41\x62\x8a\xf7\xb7\xbe\x7d\xfd\xfe\xc3\x72\xfe\x06\xf7\xbe\x6f\x8a\x85\x06\x0d\xb8\xaf\x2a\xb6\x7b\xbf\xc6\x1c\x4d\x37\x1a\x67\x6d\x87\x19\x66\x1e\x78\x6c\x57\x8a\x28\xf8\x1b\x5a\x27\x70\x87\x99\xc3\x2d\xd5\x5d\xc6\x54\x85\x01\x0f\xe0\xb4\x94\x83\x1b\x56\xc7\x1c\x22\x7c\x85\xcb\xdc\x9f\x0d\x34\x90\xdb\x61\x24\xf7\x05\x3b\xc0\xeb\xaa\x0f\x2d\x28\xf7\xbb\xd3\x79\x5e\xd2\x7b\x9f\xb9\xf1\xbb\xeb\x0d\x8b\x0c\x77\xf1\x7d\xf9\xba\x06\x10\x96\xbb\x0e\xa9\xa2\x55\x63\x5a\xf8\x3e\x67\x8b\xe5\x74\xfa\x66\xb1\x78\xbb\xfc\x60\x9c\x1a\x90\x18\x3d\xda\xbd\x81\xf6\xe4\x72\xed\xde\x9f\xd6\xcd\x0a\x27\xc4\xa6\x0d\x07\xfa\x4d\xd7\x51\x7c\x89\x93\xe2\x23\xc1\x9b\x59\xd8\x85\x70\x35\x8a\xf5\xad\x19\x76\x4d\xd1\x94\x72\x87\x0b\x62\x29\xe3\x4e\xd4\x63\x63\xbe\xdd\xcf\x5d\x2f\x8e\x6d\xec\x1d\xf5\xda\x12\x5b\x3c\x18\x95\xde\xef\x8b\x53\x44\xc8\xcf\xe3\x30\x5a\x07\x09\xfa\x91\xe0\xfb\x17\xd0\xfb\x4e\xd8\xf5\x20\x87\xfb\x80\x9f\x8b\xee\x27\xa4\xee\xce\xd2\xf4\xeb\x5e\x3e\xf4\x52\x30\x28\xed\xc0\xf1\x63\x33\xd5\x62\x23\xc0\x74\x80\x94\x0e\x46\x0e\x82\x51\xfb\x87\xd3\xbf\x21\xef\xdc\x71\x88\x82\x8e\xe4\xb1\x13\xc5\x54\x3d\xff\xfd\x09\x20\x78\xf0\xba\x81\xc1\xf8\x5f\xb4\xb6\xff\x59\x73\xb3\xff\x39\xa0\x51\xb3\xc7\x57\x8b\xac\x96\x33\x3c\xb1\x5c\x83\xba\x6f\x70\xb9\xa0\xdf\x50\xb5\xb9\xe4\x81\x43\xee\xa5\xf7\xb1\xef\x2f\xa7\x27\xa6\xf4\xe0\xb5\x4f\x37\xd7\x07\x3b\x86\xa4\xd3\x26\xed\x2c\xbd\x11\xa4\xae\xed\x9a\xf9\xa4\x66\xec\xca\x75\x32\xfa\x27\x00\x00\xff\xff\x88\x32\x71\x6b\x7c\x12\x00\x00")

func templatesJenkinsMultiJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsMultiJobXml,
		"templates/jenkins/multi-job.xml",
	)
}

func templatesJenkinsMultiJobXml() (*asset, error) {
	bytes, err := templatesJenkinsMultiJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/multi-job.xml", size: 4732, mode: os.FileMode(420), modTime: time.Unix(1443624201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsNormalJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x7b\x6f\x1b\xb9\x11\xff\xdf\x9f\x62\xe1\x06\x70\x7b\xa8\x56\xb1\x2f\xb8\xdc\x01\xb2\x2e\xb6\x25\x27\xba\xca\x8a\xaa\x47\xf2\x47\x51\x04\xd4\x2e\x25\x31\xe6\x2e\x17\x4b\xae\x13\x35\xcd\x77\xef\xf0\xb9\xdc\x87\x64\x1b\x09\x0e\x08\x6a\x04\x08\xb4\x33\xc3\x21\x39\x9c\xf9\xcd\x70\xe8\xde\xef\x9f\x13\x1a\xdc\xe1\x9c\x13\x96\x9e\x9f\x9c\x86\xcf\x4f\x02\x9c\x46\x2c\x26\xe9\xe6\xfc\x64\xb9\xb8\xee\xfc\x7a\xf2\x7b\xff\xa8\x97\xe5\xec\x23\x8e\x44\xff\x28\x08\x7a\x28\x12\x20\xcc\xbb\xea\x23\xc6\x3c\xca\x49\x26\x29\x9a\x40\xd9\x66\xc6\x04\x12\x2c\x0f\x22\x8a\x38\x3f\x3f\xde\x16\x31\x67\x69\x28\x10\xbf\xe5\xe1\xd8\xb1\x8f\xa5\xb8\xd4\x80\x76\x7c\xc1\xfe\x81\x71\xd6\xef\x9c\xf6\xba\xde\xa7\xe6\xa7\x45\xe2\xb1\xcb\x2f\xcd\x45\xb9\x20\x6b\x58\xd1\xa0\xaa\xa5\x85\x5c\x95\x9f\x38\x3d\x9e\xf4\xc4\x57\xde\xeb\x96\x5b\x51\xdf\xb7\xc0\x18\xe0\x0c\xa7\x31\x58\x88\x60\xde\x5f\x23\xca\x71\xaf\xdb\xa0\x4b\x61\x30\x58\x86\x41\xad\xfe\x04\x02\xc7\x61\x4c\xd0\x8a\xd1\xf0\x23\x4e\x6f\x49\xca\xc3\x8c\x64\x98\x92\x14\x87\x53\xf3\x63\xaa\xc7\xec\x82\x8c\x16\x1b\x92\x9e\x1f\xc7\x40\x86\xb3\xd9\x75\xac\x68\x47\x73\x5e\x3d\x0f\x7f\x0d\x5f\x1a\x03\x82\x6e\x69\xda\x09\x4a\x70\xff\xcb\x97\x20\x5c\x98\x8f\xe0\xeb\xd7\x5e\xd7\x71\xac\x28\x17\x68\x83\x9d\xec\xdc\x7e\x29\xe1\x92\xa7\x97\xdc\x7d\xc4\x9a\xb5\xc5\xaa\xbb\x86\x19\xc8\x3a\x08\x47\x7c\x94\x12\x41\x10\xfd\x83\xad\x60\x1e\x29\xc8\xa3\xa4\xe6\x1d\x7a\x63\x3c\xdc\x10\x11\xbe\x26\x62\x7e\x75\x73\xec\xcc\x00\xb4\x57\x67\xe1\x59\xf8\x9b\x75\x99\x88\xa5\x6b\xb2\x79\xa7\xbd\xb6\x7f\xd6\xeb\x56\x09\x5a\xa8\xe0\x38\x9f\xe1\x84\x09\x7c\xa5\xb8\xdc\xd9\xa0\x65\xca\x65\x4d\xd8\xca\x4a\x3d\x39\x55\xb6\x82\x55\x2d\x67\x63\x65\x28\x49\xb2\xca\xba\x0f\xd6\x06\xe3\xda\x97\xd4\x5b\xe5\x28\x8d\xb6\xf8\xe0\x0a\x2f\x95\xcc\x3c\xc3\x91\xb7\xb6\x54\x1e\xd6\x4f\x5d\xb9\xbc\x92\x4f\xd6\x04\xe7\x6a\x9d\xa9\x7f\xf2\x6d\x0b\xad\x2b\xed\x75\xab\x4b\xe9\xc5\x84\xa3\x15\xc5\xf3\x62\x95\xb0\xb8\xa0\xa5\xd3\x37\x19\x7a\x40\x8e\xa3\x02\x4e\xe1\xce\xe7\x88\xbc\x80\x11\x6d\x1c\x33\x09\x7b\x8d\x53\x9c\x23\x51\xb2\xb4\x7d\x0a\xa0\x49\xa8\x71\x93\xde\x2b\x68\x82\xbc\x10\x5b\x96\xbf\xcd\xaf\x58\x92\x10\x21\x70\x6e\x15\x34\x19\xc6\xa1\x28\x46\xa9\x3a\xe5\x2b\xf9\xeb\x3d\xcb\x6f\x79\x86\x22\x1d\x16\x9a\xa9\x05\x3f\x81\xdb\xbf\x2d\x84\x13\xb0\x8a\x1b\x74\x2d\x9e\xe5\x45\x8a\x2f\xad\x49\x8d\x6c\x95\x68\xcd\x26\xbd\x62\xca\x28\xb5\x52\x1e\x45\x8b\x90\x4d\xca\x72\x3c\x61\x00\x55\x3b\xbd\x7e\x2b\xda\xc2\x71\x21\x30\xdf\x22\x4a\xd9\xa7\x2b\xca\x52\xb7\xd8\x3a\xd9\x38\x61\x41\x68\x7c\xb5\x65\x0c\x9c\xf4\x40\x70\x16\x82\xd0\x70\x80\xd7\xa8\xa0\xe2\xd2\x1b\x72\xdc\x35\x7a\x40\x68\xc1\x18\xed\x1b\x99\x5e\xd7\x12\x0c\x0e\xba\x93\x5b\x6f\xec\x34\x94\x70\xe1\xc6\xe7\x98\xc2\x61\xde\xe1\x05\xca\x37\x58\x0c\x48\x5e\x32\xd6\x38\x07\x88\xc5\x96\x80\x3f\x47\xb4\x88\x71\x3c\xc3\x1b\x97\x90\x3c\xb2\x8c\x42\xee\xad\x4a\xbb\x8a\xc4\xb7\x06\x71\x98\x20\x42\x2d\x95\xdf\x92\x6c\x81\x36\xc6\x6d\xed\x97\x39\x84\xb4\x32\x65\xdf\x40\x9c\x3c\x77\xc8\x98\xb0\x58\xf0\x18\xe9\x46\x75\x02\x24\x07\xe5\x4b\xf5\xf1\x66\xc6\x28\xf1\x97\xf5\xdd\xe3\xe1\x5e\x9b\xe3\xcf\x02\xa7\xbc\xcc\xea\x5d\x58\x91\xfa\x21\x72\xb2\xd9\x80\x19\xb5\x9c\xd9\xed\x32\xe3\x22\xc7\x28\x01\x3c\xe7\x1a\xd0\x41\xd2\x66\x08\x3b\x22\x9c\x61\x59\x56\x60\xe5\x23\x0b\x4d\x2c\xb3\x10\x20\x4e\xd7\x7d\x15\x46\xdf\x54\x17\x19\xca\xaa\xf5\x49\xc0\x6b\xeb\x52\x2e\xfb\x6d\x73\xcc\xb7\x8c\xc6\x75\x60\x9c\x2f\xaf\xae\x86\xf3\x79\x15\x07\x81\xc9\x72\x28\x6f\x10\xed\x3f\xef\x75\xed\xcf\x92\x19\x31\x0a\xf9\xfe\x72\xbc\x1c\xca\xb4\x42\x59\x5e\xe1\x25\x19\xc5\x42\xef\xc9\xf8\x47\x95\xe6\xc0\xb6\xb6\xa8\x5e\xf7\xe1\xf6\x71\xee\xe2\xdb\xdc\x48\xe0\xf8\x06\xa5\x05\xc4\xee\xce\xf8\x15\xf8\x81\x3b\x02\x5b\x68\xd9\x19\x20\x89\xb6\x19\xbe\xff\x53\x60\xfe\xc1\x39\x7b\xf9\xc4\x20\xcc\x94\x71\xa1\x51\xe4\x0d\x63\xb7\xbc\x0a\x32\x75\xe6\x51\x25\xb5\xec\x9d\xd9\xdf\x12\xd8\xc6\x73\x2a\x0d\x3b\xef\x73\x94\x65\xce\xcd\xea\xe9\x0f\x81\x6b\xaa\xa3\x08\x2f\xe0\xd7\x95\xfc\x75\xe9\x8d\x72\x75\x82\x93\x83\xfa\xe8\x45\xf8\xbc\xac\x8f\x14\xf1\x06\x65\xaa\xb6\x01\x57\xcf\x13\x73\xb6\x96\x76\xd4\x9a\x21\xef\x99\xf7\xe1\x85\x9d\x29\x4c\x20\x36\x61\xeb\xab\x42\xd6\xc6\x8f\x2d\xf1\x4c\x89\xbe\xc0\xe0\x6d\x10\xef\xfd\x67\x5f\x2e\x97\xa3\xf1\xe0\xc3\x64\x79\x73\x39\x9c\x7d\xed\x3c\xfb\xf2\x7a\xb4\xf8\x30\x1b\xbe\x1b\xcd\x47\x6f\x27\x7f\xa7\x38\xdd\x88\xed\xf9\x4b\x88\x9b\xfa\xc8\x32\xea\x62\xf8\x1c\x10\x0e\xe4\x9d\xb2\x82\x76\xe8\x26\xfd\xe1\xd5\x60\x73\xa3\xed\x27\x2a\x48\x82\xa1\xda\x4c\xc0\x8a\xe1\xa2\xfc\xdd\x7a\xaa\x9e\xec\xab\xd3\xf0\x97\xf0\xec\xd8\x60\x54\xc3\x73\x2a\xf1\xf0\x43\xd5\x98\x0a\xa0\x1a\x38\x05\x09\x4f\xc5\xa7\x2c\x06\xd6\xbc\x5a\xf9\x3d\x55\xa5\x4f\x55\xe9\x53\x55\xfa\x54\x95\xea\x43\x48\x5b\xa7\xf4\xcb\xca\xb2\xa4\xfb\xb1\x13\xee\x1e\xd8\xd7\xc5\x45\xd9\x73\x98\x53\x74\x87\xc7\x68\x85\xa9\xc9\x06\x70\xa2\xe0\x90\x38\x9e\xb0\xd8\xb4\x3e\x7c\x09\x88\x41\x9f\x7f\x54\xab\x58\x22\x94\xce\x18\x4a\xac\xa7\xda\xcf\xa3\x12\x8a\xe2\x1a\x02\xc5\xda\xd4\x94\x45\xb7\x7a\x07\x5b\x9c\x0e\xd8\xa7\x54\x97\xb0\x8a\x04\xd7\x03\x3b\xe8\x5e\xb9\xa6\x32\x5b\x1e\x1f\x56\xd5\x90\x3a\xd2\x99\x0d\x30\x0f\x7c\x56\x47\x8a\xdb\x55\x8d\x7c\x74\xa0\xde\x7f\x44\xb5\xef\xd7\xfa\xdf\x54\xe9\x37\xeb\xfc\x03\x55\xfe\x81\x1a\x7f\x7f\x85\xff\xd0\xfa\xbe\x56\xdd\x3f\xbc\xb6\xaf\x38\x95\xf2\x63\xff\x6a\x05\xd8\xbb\xc1\x41\x78\x61\x5b\x97\x38\xab\x57\xf6\x36\x4e\x22\x96\xed\x6c\xcf\x32\xbc\x82\x0f\x3b\xc6\x45\xa6\x2f\x01\x55\xd3\xcf\x67\xe1\x69\x19\x9d\xb6\x99\x2b\x8d\x6f\x6c\x2c\x83\x52\x55\x88\xea\x00\xbc\x6e\xaf\x1a\xb0\x26\x54\x66\x25\x29\xef\x66\x92\x72\x86\xee\x2e\x62\x0a\x1b\xcb\x7b\x9d\x81\x3c\x5e\x52\x38\xa6\xa0\xb7\xd1\x1a\x6e\xdd\x97\xbb\xf1\x28\x2b\xce\xcd\xc8\x63\xaf\xce\x00\xc7\xa5\x2b\x14\xdd\x2e\xd8\x18\x71\x31\x2f\xa2\x08\x73\xbe\x2e\xa8\x39\xb9\xbd\x6c\xaf\x8a\x32\x9e\x76\xad\x36\x32\x17\x32\x89\x6f\x76\x7d\xc0\xe8\xd7\x94\xad\x10\x9d\x63\x21\x20\x6c\x4a\x97\xac\x09\xba\x2a\xc6\x6e\xcc\x51\x62\x06\x99\xef\x1a\xc6\xe2\x3c\xcb\x49\x2a\xac\xdd\xbc\xaa\x61\x9f\x40\x3b\x36\xee\x3d\xf3\xb6\x4b\x63\xaf\xd2\x73\x9f\x6f\x31\xf5\xdd\x3f\x49\x50\x0a\x9e\xfb\x97\xc0\xd6\xef\x41\x04\x7b\x93\xc7\x92\xa0\x0d\x89\x8e\xf0\xe7\x8c\xe5\x22\x98\x8e\xa6\xc3\xf1\x68\x32\x34\x77\x8c\xf3\x67\x7f\xc5\xd1\x96\x05\xc7\xcf\xbe\x38\xce\xbb\xe1\x4c\x5e\x37\xbe\x1e\x07\xff\x0d\xa2\x42\x04\x9d\xf5\x69\xd0\x89\x4f\x3a\x27\x7f\xb3\x4a\xe4\xad\x64\xfe\xe6\xe2\x61\x83\xcf\xcc\xe0\xf6\xc6\xb1\x57\xde\x43\x8a\x0c\x20\x02\x31\x0c\xea\x6c\x51\x1e\x07\xfa\xfa\x03\x13\x95\xcd\x96\x23\x55\x38\xe9\xcd\x5a\xbb\x48\xbb\xba\xfd\x57\xcc\x5c\xb3\x94\x49\x33\xf6\x92\x9a\x15\x2b\xa8\x06\xb6\xf5\x46\xc8\x45\x1a\xe7\x8c\xc4\x63\x38\xbe\x50\xfe\x07\xde\x51\xde\xc6\x59\xbe\xb1\x17\xa5\x88\x78\x29\x4e\x0d\xf9\xf0\x81\xda\x41\x53\xab\xdb\x4b\xab\x4a\xa6\x23\x45\xe4\xa5\xa4\x8c\xdc\x2d\x46\x54\x6c\x77\x5e\xeb\x24\x7d\x53\x27\x39\x6c\x1a\x13\x59\x73\x41\x3d\xe5\xe1\x95\xa6\x39\x20\x50\x13\xaa\x84\xfc\x2f\x7f\xd2\x7f\x03\x04\x94\x2c\xe7\xd2\xba\x74\x1a\x9a\xe7\xa1\x72\x46\x99\x0f\x8b\xf4\x6d\x7a\x0d\xe5\x4a\x99\x09\x6b\x54\xb7\x62\x8e\xa7\x39\xbe\x23\xac\xe0\x2a\xb0\x2f\xf8\xcc\x56\x50\x5e\x25\xb8\x57\xc4\x53\x33\x17\x32\xd3\x1e\x50\xb2\x47\xc0\x53\x31\xc0\x54\xa0\x77\x88\x16\x65\x1d\x5c\xa3\x36\xac\xca\xbd\x63\x42\x74\xc7\x09\xef\x44\x50\xe7\x02\xc8\xbe\xf4\x0e\xaa\x80\x0c\x2e\x27\x5f\x30\x81\xe8\x05\xa5\xdd\x76\xce\x1b\xb2\xd9\xee\x61\x4d\x58\x9e\xa0\x7d\xe3\xc6\xec\x53\xc9\x59\x2b\x03\x37\x67\xf2\xe8\x72\x1e\x0d\xdf\x9e\xc7\x5e\x57\xf9\x1a\xd1\x6b\x63\x5a\x74\xe9\x85\x1d\xd2\xa6\x25\xea\xfa\xcc\xb8\x16\x8d\x95\xdd\x94\xbe\x5a\x1a\x1f\x3e\x0b\x1a\x0f\x20\x0b\x47\xe2\xa6\x7a\xe3\x6b\x63\x95\x18\x9c\xca\x66\x55\x56\x08\x3c\xc1\x9f\x4c\x56\xa8\x11\x2b\x78\x3d\xc3\x9c\xd1\x3b\x3c\x33\xb5\xfe\x14\x89\x6d\x15\xaf\x5b\x05\x5c\x34\x21\x79\x77\x4b\x1b\x96\xf1\x90\x01\xe2\xca\x08\x19\xf4\x79\x34\x48\x1c\x68\x11\x42\x32\x89\x57\xc5\x86\x87\x53\x3d\xc7\x9e\xe2\x61\x6d\xc5\xa4\xfc\x25\xfc\x68\x02\x90\x15\x79\xf5\x22\xfc\xe5\xf4\x4f\x41\x9f\xeb\xd1\x64\x70\xb9\x7c\x3d\x7f\x42\x9e\x6f\x44\x9e\x43\xd8\x73\x10\x7d\xee\xc1\x9f\x43\x08\xb4\x1f\x83\x9a\x28\xb4\x87\xd5\x9c\xed\x87\xc1\x07\x3b\xec\x31\xf0\xd0\x0c\xd5\x1a\x32\xc8\x4b\x3d\x9f\xa1\xf4\xf6\x22\x02\x4d\x50\x6c\x3a\xe7\xae\x93\x6b\xc5\xb6\x51\x58\xda\xcb\xf4\x06\xaa\xf4\x46\x75\xb9\x1f\x14\x0e\x00\xce\x34\x89\xed\x06\xf6\xdd\x54\x32\x29\x92\xc4\x4d\x88\x01\xc6\xab\x9f\xc3\x17\xcf\xff\x14\x74\x99\xde\x0c\x9e\x80\xe5\x09\x58\xfe\x0f\x80\xa5\x1a\x92\x8d\x72\xe3\x9e\xe8\xec\x1f\xed\x0f\xf6\x05\xe6\xb0\x0c\x79\xa7\xe3\xed\xb7\xcc\x8f\x05\x5c\xd6\xc2\x3f\x96\xf0\x3f\x2c\x17\xa2\xea\x22\x8f\xb6\xf2\x6d\xcb\x79\x97\x92\x00\xaf\xf2\x82\x5e\x28\xad\x52\x5a\xf7\x82\xaa\xb3\xc0\x99\x78\x7c\x3b\x46\xfe\xbd\xd5\x98\xa5\x9b\xb9\x88\x09\xf3\xff\x08\xab\x24\xfa\xea\x07\x48\x20\xb7\x43\xaf\x17\xa1\xf1\x66\x1e\x21\x8a\xaf\x91\xba\xbb\xc3\xca\xc0\x44\x0d\x72\xdb\x45\x71\xef\x66\x0f\xc0\xa5\x6e\x85\xb7\x1b\xef\x46\x3a\x65\x69\xa9\x44\x7d\x82\xa9\x4e\x3d\x5b\xe5\x38\x22\x19\xc1\xa9\xf0\x36\x21\x9d\x4a\xeb\x1d\xca\x57\xc4\xa5\x89\x24\xbf\x81\x75\x50\xa4\x6c\xcc\xa4\x10\x12\xa3\x34\x26\x77\x24\x2e\xc0\xa4\xb6\xcf\xdc\xa0\xb7\x59\x43\xaf\xfe\xc0\xd6\xbd\xae\x51\xcb\xe6\x2d\xb7\x6a\xc3\xa0\xfc\x63\x3d\xde\x6c\x3d\xa1\x6a\xbb\x44\xde\xb7\x53\xba\x1b\xad\x1b\x5d\xa0\x06\xd9\xca\xcb\xc7\x50\x2e\xde\x02\xdb\x48\x7a\x04\xb7\x00\xf9\x1c\x31\x4c\x32\xb1\x33\x6b\x73\x4f\x36\x0d\x46\x9b\x5d\xda\x37\xd6\xee\x1c\xf8\xb3\xd0\x4f\xfb\x95\xbf\xaa\x40\x45\x18\xb1\x24\x8c\xe0\xd4\xf3\x22\xe1\x3b\x2e\x70\xc2\xc3\x4a\x18\x87\xaa\x53\xe1\x9e\x62\x4d\x0f\x32\x54\xe7\x6b\xdf\x65\x4d\x2f\xcd\xf9\x97\x1a\xd2\x78\x72\x3e\x0d\x5f\x84\x3f\xfb\x4d\xfc\xca\x93\x66\x33\xb9\x9b\x77\xd4\x19\xe4\x35\xf9\x26\xaa\x67\x44\x39\x24\x58\xc0\x1c\x5e\x7b\x5a\xf5\xdf\x07\x8c\xfa\x64\x05\x93\xff\xb3\xc0\x05\x8e\xf5\x03\x11\x2f\x7b\xd1\x2d\xbc\x72\x1d\x6d\x8f\x86\xfb\x17\xd2\xf7\x5a\x3f\xd5\x47\xda\xd8\x75\xda\xbd\x36\xa8\x76\xb6\xc6\x79\xc8\x40\x6a\x95\x36\x07\xff\x7d\x4f\xea\x1e\x4f\xa9\xf8\x48\x1d\xd4\xed\xc6\xc9\x7f\x70\x5c\x99\xa3\xee\x05\x15\xc9\x8e\x11\x95\x0d\xa7\xdf\x1e\xe1\x04\xf7\x4e\x57\x7f\xec\x6e\x53\xfa\xdd\xbd\xeb\x1b\x3d\xec\x1b\xbc\xac\xd5\xd3\x14\x31\xf3\x1f\x3d\xbc\x53\x74\xfd\x76\x5e\x37\x52\x4c\xe4\xfb\x71\xf9\xc2\x51\x92\x7c\x41\x63\xf4\xf7\x44\x6c\x27\xcc\x5b\x90\xd9\xe9\x3e\xf6\xfe\x70\x7a\xe4\x91\xd6\x76\xfb\x78\x75\x4d\x67\x07\x93\x78\x1d\x57\xef\x41\xe2\x7f\x01\x00\x00\xff\xff\x89\x08\xdb\x5b\xb0\x2e\x00\x00")

func templatesJenkinsNormalJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsNormalJobXml,
		"templates/jenkins/normal-job.xml",
	)
}

func templatesJenkinsNormalJobXml() (*asset, error) {
	bytes, err := templatesJenkinsNormalJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/normal-job.xml", size: 11952, mode: os.FileMode(420), modTime: time.Unix(1444133214, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsPipelineXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templatesJenkinsPipelineXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsPipelineXml,
		"templates/jenkins/pipeline.xml",
	)
}

func templatesJenkinsPipelineXml() (*asset, error) {
	bytes, err := templatesJenkinsPipelineXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1443542096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templatesJenkinsMultiJobXml,
	"templates/jenkins/normal-job.xml": templatesJenkinsNormalJobXml,
	"templates/jenkins/pipeline.xml":   templatesJenkinsPipelineXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"jenkins": &bintree{nil, map[string]*bintree{
			"multi-job.xml":  &bintree{templatesJenkinsMultiJobXml, map[string]*bintree{}},
			"normal-job.xml": &bintree{templatesJenkinsNormalJobXml, map[string]*bintree{}},
			"pipeline.xml":   &bintree{templatesJenkinsPipelineXml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
