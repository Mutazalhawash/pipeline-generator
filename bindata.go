package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_jenkins_multi_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4b\x6f\xdb\x38\x10\xbe\xe7\x57\x08\xbe\xe4\x14\x2a\xc1\x3e\xd0\x83\xe2\x6e\xe3\x26\x40\x17\x49\x6a\xd8\x35\x7a\xa6\xa5\x89\xc4\x98\x22\x05\x92\xda\xb5\x51\xf4\xbf\xef\xf0\x21\x8a\x8a\x8d\x4d\x82\xdd\x93\xc4\x6f\x1e\x1c\x7e\xfc\x66\x58\x7c\xdc\xb7\x3c\xfb\x0b\x94\x66\x52\x5c\x9f\x5f\x91\xcb\xf3\x0c\x44\x29\x2b\x26\xea\xeb\xf3\xcd\xb7\xbb\x8b\x0f\xe7\x1f\xe7\x67\x45\x29\x5b\x62\xd8\x8e\x72\xf2\x0c\x62\xc7\x84\x26\x1d\xef\x6b\xfb\x6d\x7b\x6e\xd8\xb3\xdc\x92\x07\xfb\xf3\xa7\xdc\x2e\x95\x7c\x86\xd2\x64\xde\xe1\x7a\x16\x02\x2e\x06\xc7\x0b\x6f\xf8\xe3\x8a\x5c\xfd\x36\x9b\x9f\x65\x59\x41\x4b\x83\xbb\xeb\xdc\x2d\x2a\xd0\xa5\x62\x9d\x45\xe6\x45\x9e\xae\xac\x75\x07\xd0\x7d\x86\x0e\x44\x85\x55\x32\xd0\xf3\x27\xca\x35\x14\xf9\x11\x6e\x9d\x3b\x25\x3b\x50\x26\x2c\x11\xd0\x40\x2a\x46\xb7\x32\x39\x05\xeb\x80\x33\x01\x64\x19\x7e\x96\x3e\xe6\x10\xcb\xaf\x10\x46\x7e\x0e\x17\x83\xeb\x50\xff\x25\xf9\x40\x7e\x9f\xf9\xcc\x98\xdb\x50\xbd\x7b\xa4\x2d\xcc\x3b\xaa\x28\xe7\xc0\x33\xd8\x43\xd9\xdb\xca\x8b\x3c\x1a\x07\x6f\x6d\x68\x0d\x0e\xf9\xf1\x23\x23\xeb\x61\x95\xfd\xfc\x59\xe4\xa3\xcd\x57\x9d\xbf\xa3\x6c\x77\xee\x7c\x7a\xf0\x42\x97\x6d\x56\x72\xaa\xf5\xf5\xac\xe9\x2b\x2d\x05\x41\x84\x3c\xf6\x9c\xaf\x17\x0f\x33\x4f\x7b\x49\xc5\x4a\xd2\x76\x6e\x54\x8f\x74\x0e\x2b\x77\x21\x4c\xd3\x2d\x87\x6a\xa0\x3a\xae\xad\x71\xcb\x65\xb9\xbb\xe9\x19\xaf\xbe\x37\x20\x3e\xcb\xbf\x85\x36\x0a\x68\xeb\x20\xd4\xd0\x10\xf4\xaa\xdf\x71\xb2\x4d\xf7\x96\x54\x47\x5e\x36\x91\x51\xac\xae\x51\xd3\xe1\x68\x52\x94\xbd\x52\x20\x8c\x73\x1a\xf2\xbc\x84\x5d\x05\xf6\x0f\x03\x03\xf3\xef\x50\xfd\x8d\x8f\x8c\x17\xdc\x35\x54\xfb\x4b\x74\x7f\x97\x78\x29\x11\x99\xf8\x60\xac\x1e\x90\x2c\x43\x35\x28\x2a\x6a\x40\x4d\xf4\x5b\x6b\x42\x45\x44\xe3\x5b\xea\x59\x0e\x39\x17\x52\x3c\xb1\x7a\xcc\x8c\xe1\x68\x8f\x92\x73\x4a\x1b\x80\xd4\xc9\x72\xb2\x44\x09\xb7\x7a\xd0\xc2\x08\xa4\x7e\xb0\xef\xa4\x86\x0a\x15\x34\x10\x9a\x20\xa9\x63\xd0\x0b\xd6\xf4\x42\x41\x16\x49\x1d\xb1\x71\x34\xde\xe0\xaa\xe7\xa0\x97\xd4\x34\xd8\xfe\x47\x50\xea\xdf\xd2\xfd\x0a\xf0\xaa\x51\xe5\x48\x6f\xb2\x9a\x94\x29\xec\x56\xd6\x72\x58\x1b\x45\x0d\xd4\x87\x58\xef\x09\xd3\x71\x28\xf2\x58\x31\x37\x7f\x26\x61\x23\x9c\x86\x60\x93\x2a\xf3\x89\x73\x7b\x34\xcf\x5e\x8a\x4c\x68\x8e\xf1\x4e\x89\x27\x72\xed\x18\xe7\xee\x36\xbf\x0a\x0c\x5e\x81\xc6\x2b\x1e\x77\xbd\xfb\xf4\xe5\x7e\xb3\xba\xc5\xc9\xf7\xaf\x6e\x69\x42\x27\xee\xaf\x82\x1f\xbe\x3c\xe1\x1d\x2d\x1a\xab\xb3\x38\x40\x4f\x1b\x47\xe9\xe5\xff\x45\x7b\x28\x38\x9c\xcc\xa3\x94\x43\x33\xa4\xd2\xb7\x84\x18\x26\x7a\x6a\xcb\x1e\xeb\x5f\x6f\x16\x8b\xdb\xf5\xfa\x6e\x73\xef\x68\x3a\xe1\x71\xf6\xe6\xf2\x4e\xb4\x6a\x38\x77\xe8\xf8\xa2\xeb\xb7\x9c\xe9\x26\x0e\x00\xac\x9b\x3d\x65\xe4\x11\xf6\xe6\x81\xe2\xce\x3c\xed\xc8\x82\xf6\xc4\xee\x5a\xe2\x04\x51\x7d\xab\x0f\xda\x40\xab\x49\x98\xb0\x7e\x77\xe2\xd2\xc7\x69\x1d\xe6\x12\x71\x15\x0c\xa3\xfb\x9b\x07\xe3\x83\xe3\x42\x8e\x5e\x9b\x2b\xf2\x2b\xf9\x65\x96\xb2\x85\x0c\xfb\x01\xe7\xbb\x2c\x8e\xd4\xf0\xfe\xda\xc6\xd6\xae\xd5\x8f\xca\xc7\x0e\x3c\xed\x1d\xb8\xfc\x7f\x0f\x16\xa9\x4c\x24\x90\x10\x3b\xa1\x34\xec\x61\x9f\x4b\xed\x93\x4d\x92\xd8\x83\x37\x76\x07\x5f\xb4\x1e\x27\xd9\x14\x8e\x6f\x72\xa3\x40\x37\xd2\x0f\xf7\x80\x09\x3b\xf0\x82\xac\x8a\x5c\x4c\xc6\x5f\x21\x15\xbe\x21\x94\xdb\x79\x32\xfc\xa6\xd3\x97\x4b\x35\xbf\xb9\xdf\xdc\x5a\xb9\xd9\xff\xc9\x64\xee\x38\x18\xf0\x4f\x49\x18\x9c\x13\x2c\x4a\xff\x45\x51\x45\xfe\xca\xa1\x53\xe6\xb0\x71\x26\x12\xf5\x3d\xfd\x5d\xd1\xae\xf3\xcf\xdd\xbb\x1a\x21\xf0\x35\x3f\xfb\x27\x00\x00\xff\xff\x0f\x3d\xbc\x6e\x06\x0a\x00\x00")

func templates_jenkins_multi_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_multi_job_xml,
		"templates/jenkins/multi-job.xml",
	)
}

func templates_jenkins_multi_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_multi_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/multi-job.xml", size: 2566, mode: os.FileMode(420), modTime: time.Unix(1434113551, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_normal_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5b\x6f\xdb\x38\x16\x7e\xf7\xaf\x10\xb2\x05\xb2\x3b\x58\xcb\x4d\x66\x81\x99\x05\x1c\x4f\x1b\xc7\xed\x78\x37\x71\x03\x5f\x3a\x8f\x03\x5a\xa2\x65\x4e\x28\x51\x20\xa9\x34\x46\xb6\xff\x7d\x0f\xaf\xa2\x2e\x71\x52\xcc\xbc\x14\x08\xfc\x62\x9d\x73\x48\x9e\xfb\xf9\xc8\xf1\x2f\x0f\x39\x8d\xee\x31\x17\x84\x15\x17\xa7\x67\xf1\xdb\xd3\x08\x17\x09\x4b\x49\x91\x5d\x9c\x6e\xd6\x1f\x86\x3f\x9f\xfe\x32\x19\x8c\x4b\xce\xfe\xc0\x89\x9c\x0c\xa2\x68\x8c\x12\x09\xc2\x62\xa4\x3f\x52\x2c\x12\x4e\x4a\x45\x31\x04\xca\xb2\x25\x93\x48\x32\x1e\x25\x14\x09\x71\x71\xb2\xaf\x52\xc1\x8a\x58\x22\x71\x27\xe2\x6b\xcf\x3e\x51\xe2\x6a\x07\x74\x10\x6b\xf6\x5f\x8c\xcb\xc9\xf0\x6c\x3c\x0a\x3e\x0d\xbf\xa8\xf2\x80\x5d\x7f\x19\x2e\xe2\x92\xec\x40\xa3\xab\xe6\x2e\x3d\xe4\xa6\xfc\xc2\xef\x13\x48\x2f\xc2\xcd\xc7\xa3\xda\x14\xfd\x7d\x07\x8c\x2b\x5c\xe2\x22\x05\x0f\x11\x2c\x26\x3b\x44\x05\x1e\x8f\x3a\x74\x25\x0c\x0e\x2b\x31\x6c\x6b\x3e\x81\x20\x70\x9c\x12\xb4\x65\x34\xfe\x03\x17\x77\xa4\x10\x71\x49\x4a\x4c\x49\x81\xe3\x5b\xfb\xe7\xd6\xac\x39\x44\x25\xad\x32\x52\x5c\x9c\xa4\x40\x86\xd8\x1c\x86\x4e\x74\x68\x38\xef\xde\xc6\x3f\xc7\x3f\x59\x07\xc2\xde\xca\xb5\x0b\x94\xe3\xc9\xe3\x63\x14\xaf\xed\x47\xf4\xf5\xeb\x78\xe4\x39\x4e\x54\x48\x94\x61\x2f\xbb\x72\x5f\x5a\xb8\xe6\x19\x95\x47\xdf\xa0\xb3\xf1\x58\xd3\x6a\x38\x81\xec\xa2\x78\x2e\xe6\x05\x91\x04\xd1\xff\xb0\x2d\x9c\xa3\x04\x45\x92\xb7\xb2\xc3\x18\x26\xe2\x8c\xc8\xf8\x23\x91\xab\xe9\xcd\x89\x77\x03\xd0\xde\x9d\xc7\xe7\xf1\xbf\x5d\xca\x24\xac\xd8\x91\xec\xb3\xc9\xda\xc9\xf9\x78\xd4\x24\x18\xa1\x4a\x60\xbe\xc4\x39\x93\x78\xaa\xb9\xc2\xfb\xa0\xe7\xc8\x4d\x4b\xd8\xc9\xaa\x7d\x38\xd5\xbe\x02\xad\x36\xcb\x6b\xed\x28\x45\x72\x9b\x8d\x5e\xbc\x1b\xac\xeb\x57\x69\xbc\xe5\xa8\x48\xf6\xf8\xa8\x86\x97\x5a\x66\x55\xe2\x24\xd0\xad\x50\xc1\xfa\x61\xa4\xd4\xab\xf9\x64\x47\x30\xd7\x7a\x16\x61\xe4\xfb\x14\x6d\x6f\x3a\x1e\x35\x55\x19\xa7\x44\xa0\x2d\xc5\xab\x6a\x9b\xb3\xb4\xa2\x75\xd2\x77\x19\x66\x01\xc7\x49\x05\x51\xb8\x0f\x39\x92\x57\xb0\xa2\x8f\x63\x0f\x61\x1f\x71\x81\x39\x92\x35\xcb\xf8\xa7\x02\x9a\x6a\x35\xfe\xd0\x67\x05\x6d\x91\x57\x72\xcf\xf8\x27\x3e\x65\x79\x4e\xa4\xc4\xdc\x6d\xd0\x65\xd8\x84\xa2\x18\x15\x3a\xca\x53\xf5\xef\x37\xc6\xef\x44\x89\x12\x53\x16\x86\x69\x04\xbf\x40\xda\x7f\xaa\xa4\x17\x70\x1b\x77\xe8\x46\xbc\xe4\x55\x81\x2f\x9d\x4b\xad\x6c\x93\xe8\xdc\xa6\xb2\xe2\x96\x51\xea\xa4\x02\x8a\x11\x21\x59\xc1\x38\x5e\x30\x68\x55\x07\xa3\xbf\x13\xed\xe1\xf8\x12\x58\xed\x11\xa5\xec\xcb\x94\xb2\xc2\x2b\xdb\x26\xdb\x24\xac\x08\x4d\xa7\x7b\xc6\x20\x49\x8f\x14\x67\x25\x09\x8d\xaf\xf0\x0e\x55\x54\x5e\x06\x4b\x4e\x46\x76\x1f\x10\x5a\x33\x46\x27\x56\x66\x3c\x72\x04\xdb\x07\x7d\xe4\x76\x99\x3b\x86\x12\x21\xfd\x7a\x8e\x29\x04\xf3\x1e\xaf\x11\xcf\xb0\xbc\x22\xbc\x66\xec\x30\x87\x16\x8b\x1d\x01\x3f\x24\xb4\x4a\x71\xba\xc4\x99\x1f\x48\x01\x59\x55\xa1\x08\xb4\x32\xa9\xa2\xfa\x5b\x87\x38\xcb\x11\xa1\x8e\x2a\xee\x48\xb9\x46\x99\x4d\x5b\xf7\x65\x83\x50\x34\x8e\x9c\xd8\x16\xa7\xe2\x0e\x13\x13\x94\x85\x8c\x51\x69\xd4\x26\xc0\x70\xd0\xb9\xd4\x5e\x6f\x4f\x4c\xf2\x50\xad\xbf\xbc\x1e\x9e\xf5\x39\x7e\x90\xb8\x10\xf5\x54\x1f\x81\x46\xfa\x8f\xe4\x24\xcb\xc0\x8d\x46\xce\x5a\xbb\x29\x85\xe4\x18\xe5\xd0\xcf\x85\x69\xe8\x20\xe9\x26\x84\x5b\x11\x2f\xb1\x82\x15\x58\xe7\xc8\xda\x10\xeb\x29\x04\x1d\x67\xe4\xbf\x2a\xbb\xdf\xad\x01\x19\xda\xab\xed\x43\x20\x6b\xdb\x52\x7e\xfa\xed\x39\x16\x7b\x46\xd3\x76\x63\x5c\x6d\xa6\xd3\xd9\x6a\xd5\xec\x83\xc0\x64\x1c\xe0\x0d\xa2\x93\xb7\xe3\x91\xfb\x5b\x33\x13\x46\x61\xde\x5f\x5e\x6f\x66\x6a\xac\x50\xc6\x1b\xbc\xbc\xa4\x58\x1a\x9b\x6c\x7e\x34\x69\xbe\xd9\xb6\x94\x1a\x8f\x5e\xee\x1f\x9f\x2e\xa1\xcf\xad\x04\x4e\x6f\x50\x51\x41\xed\x1e\x6c\x5e\x41\x1e\xf8\x10\x38\xa0\xe5\x4e\x80\x21\xda\xe7\xf8\xc9\x0f\x91\xfd\x41\x9c\x83\x79\x62\x3b\xcc\x2d\x13\xd2\x74\x91\x5f\x19\xbb\x13\xcd\x26\xd3\x66\x0e\x1a\xa3\xe5\xc9\x93\x43\x93\xc0\x37\x41\x52\x99\xb6\xf3\x1b\x47\x65\xe9\xd3\xac\x3d\xfe\x10\xa4\xa6\x0e\x45\xfc\x1e\xfe\x4d\xd5\xbf\xcb\x60\x95\xc7\x09\x5e\x0e\xf0\xd1\xbf\xe2\xb7\x35\x3e\xd2\xc4\x1b\x54\x6a\x6c\x03\xa9\xce\x73\x1b\x5b\x47\x1b\xf4\x4e\xc8\x67\xce\x7d\x39\xb0\xb3\xc0\x04\x6a\x13\x4c\xdf\x56\x0a\x1b\x7f\x2b\xc4\xb3\x10\x7d\x8d\x21\xdb\xa0\xde\x27\x6f\x1e\x2f\x37\xf3\xeb\xab\xdf\x17\x9b\x9b\xcb\xd9\xf2\xeb\xf0\xcd\xe3\xc7\xf9\xfa\xf7\xe5\xec\xf3\x7c\x35\xff\xb4\xf8\x27\xc5\x45\x26\xf7\x17\x3f\x41\xdd\xb4\x57\xd6\x55\x97\xc2\xe7\x15\x11\x40\x3e\x68\x2f\x98\x84\xee\xd2\x5f\x8e\x06\xbb\x86\x9a\x76\xd2\x09\x72\x23\x75\xbf\x2b\x38\xa8\x7b\x49\xa7\xa5\xc0\x6c\xd2\xa5\xa4\xe6\xf6\x4e\x34\x41\xda\x2b\x80\x7c\x05\x90\xaf\x00\xf2\x15\x40\x9a\x20\x14\xbd\x47\x86\x08\xb0\x46\x5f\xdf\xf7\x6c\x7c\xa2\xed\x1b\x1c\x50\x3f\x0f\xac\x28\xba\xc7\xd7\x68\x8b\xa9\x9d\x06\x10\x51\x48\x48\x9c\x2e\x58\x6a\x5f\x29\x42\x09\xa8\xc1\x90\x3f\x68\x81\x8b\x04\x15\x4b\x86\x72\x97\xa9\xee\x73\x50\xb7\xa2\xb4\xd5\x81\x52\xe3\x6a\xca\x92\x3b\x63\xc1\x1e\x17\x57\xec\x4b\x61\xd0\xa6\x26\x01\x92\x77\x8b\x9e\x95\xeb\x6e\xe6\x90\xec\xf1\xad\x3a\x52\x03\x33\xd9\xa0\xe7\x41\xce\x9a\x4a\xf1\x56\xb5\xc8\x83\x23\xd0\xfc\x1b\x80\x79\x08\xcb\xff\x14\x28\xef\x42\xf2\x23\x80\xfc\x08\x1c\x7f\x1a\x8c\xbf\x14\x8a\xb7\x80\xf8\xcb\x61\x78\x23\xa9\x74\x1e\x87\xb7\x20\xe8\xbd\x19\x8e\xe2\xf7\xee\x95\x11\x97\x6d\x10\xee\xea\x24\x61\xe5\xc1\x3d\x2f\xc6\x53\xf8\x70\x6b\x7c\x65\x86\x12\xef\xce\xe2\x1f\xcf\xe3\xb3\xba\x3a\xdd\xbb\xab\x72\xbe\xf5\xb1\x2a\x4a\x0d\xe6\x74\x00\x82\x87\x59\xbd\x60\x47\xa8\x9a\x4a\x4a\xde\x9f\xa4\xe4\x2c\xdd\xdf\x99\x74\x6f\xac\xaf\x60\xb6\xe5\x89\x9a\x22\x30\x85\x7d\x3b\xaf\xb8\xbd\x76\xf9\xcb\x89\xf6\xe2\xca\xae\x3c\x09\x70\x06\x24\x2e\xdd\xa2\xe4\x6e\xcd\xae\x91\x90\xab\x2a\x49\xb0\x10\xbb\x8a\xda\xc8\x3d\xc9\x0e\x50\x94\xcd\xb4\x0f\xda\x90\x95\x54\x43\x3c\x3b\x4c\xa0\x47\x7f\xa4\x6c\x8b\xe8\x0a\x4b\x09\x65\x53\xa7\x64\x4b\xd0\xa3\x18\x67\x98\xa7\xa4\x0c\x26\xdf\x07\x58\x8b\x79\xc9\x49\x21\x9d\xdf\x02\xd4\xf0\x94\x40\x7f\x6f\x7c\x32\xe6\x7d\xf7\xbb\x71\xe3\x79\x7c\xb5\xc7\x34\x4c\xff\x3c\x47\x05\x64\xee\xdf\x22\x07\xb5\xa3\x04\x6c\x53\x61\xc9\x51\x46\x92\x01\x7e\x28\x19\x97\xd1\xed\xfc\x76\x76\x3d\x5f\xcc\xec\x75\xe0\xe2\xcd\xdf\x71\xb2\x67\xd1\xc9\x9b\x47\xcf\xf9\x3c\x5b\xaa\x9b\xc1\xd7\x93\xe8\x7f\x51\x52\xc9\x68\xb8\x3b\x8b\x86\xe9\xe9\xf0\xf4\x1f\x6e\x13\x75\x81\x58\xfd\xfa\xfe\x65\x8b\xcf\xed\xe2\xfe\x37\xde\x00\xde\xc3\x88\x8c\xa0\x02\x31\x2c\x1a\xee\x11\x4f\x23\x73\x53\x81\x83\xea\x77\x91\x81\x06\x4e\xc6\x58\xe7\x17\xe5\x57\x6f\x7f\xc3\xcd\x2d\x4f\xd9\x31\xe3\xee\x93\x65\xb5\x05\x34\xb0\x6f\xbf\x59\x18\x70\xd3\xef\xf4\x1b\x98\xdd\xc1\xa8\xcc\xf5\x27\x94\xe2\x59\x30\x26\x01\x7c\x92\x92\x40\xc7\x0d\x4a\x24\x85\x6b\x8e\xd9\x77\xa6\xae\x70\x1b\x18\x05\x6a\xa0\x84\x2d\xe9\xa8\x48\x5d\x6a\x45\xba\x66\xf3\x22\x25\xf7\x24\x85\xcb\xbd\x03\xbc\x5d\x7a\x9f\x23\x8c\xf6\x47\x9e\x0e\x82\x3e\xd0\x63\xbc\xe3\xbe\xe7\xc9\x5e\xdd\x44\xbd\x56\xc8\x67\x79\xa7\x99\xa0\x66\x01\xa8\x1e\x5e\xd0\xc3\x7c\xd7\xa9\xeb\x0e\xd9\xc9\xab\x9b\xa8\x90\x9f\x80\x6d\x25\x03\x82\x57\x40\x01\xcc\x59\x5e\xca\x83\xd5\xcd\x83\xf0\x0e\xa3\xcf\x2f\xfd\x86\xf5\x7a\x68\x81\x1f\xa4\x79\x57\x69\x3c\x69\xa1\x0a\x4a\x39\x8f\x13\x88\x3a\xaf\x72\x71\x10\x12\xe7\x22\x6e\x14\x7b\xac\x73\xcf\xdf\x83\xed\x54\x89\x75\x7c\xdd\xa5\xd8\x76\x47\x9f\x5f\x7a\x49\xe7\xbe\x7f\x06\xb0\xec\xc7\x10\x96\xe9\xfb\x5d\x98\x6c\x0e\x6a\x04\x73\xc0\xc4\xa6\xa3\xbe\xca\xbb\x5e\x69\xeb\xa7\xbf\xd6\xb0\x67\x1c\xdb\x70\x69\x23\x42\xbd\x4f\x83\x10\x2c\x38\x21\x04\x1d\xc1\x26\xd0\x12\x1a\x6c\x3f\xce\xbe\x8b\x27\xc0\x67\x8c\x6f\x3e\x92\x85\x7d\x2c\x18\xf3\xff\x0f\x00\x00\xff\xff\xe3\x0c\x5d\x73\xb1\x1d\x00\x00")

func templates_jenkins_normal_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_normal_job_xml,
		"templates/jenkins/normal-job.xml",
	)
}

func templates_jenkins_normal_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_normal_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/normal-job.xml", size: 7601, mode: os.FileMode(420), modTime: time.Unix(1434113657, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_pipeline_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templates_jenkins_pipeline_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_pipeline_xml,
		"templates/jenkins/pipeline.xml",
	)
}

func templates_jenkins_pipeline_xml() (*asset, error) {
	bytes, err := templates_jenkins_pipeline_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1432204627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templates_jenkins_multi_job_xml,
	"templates/jenkins/normal-job.xml": templates_jenkins_normal_job_xml,
	"templates/jenkins/pipeline.xml":   templates_jenkins_pipeline_xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"jenkins": &_bintree_t{nil, map[string]*_bintree_t{
			"multi-job.xml":  &_bintree_t{templates_jenkins_multi_job_xml, map[string]*_bintree_t{}},
			"normal-job.xml": &_bintree_t{templates_jenkins_normal_job_xml, map[string]*_bintree_t{}},
			"pipeline.xml":   &_bintree_t{templates_jenkins_pipeline_xml, map[string]*_bintree_t{}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
