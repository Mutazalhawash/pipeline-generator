package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_jenkins_multi_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x73\xdb\x36\x10\xbd\xfb\x57\x70\x74\xf1\x49\x90\x9d\x36\x9d\x1c\x68\xe5\x43\x89\x67\xd2\x89\x15\x8d\x14\x8d\xcf\x10\xb9\x96\x60\x81\x00\x07\x00\x5b\xa9\x99\xfc\xf7\x2e\x40\x00\x04\x4d\xa5\xb5\xc6\x39\x99\xd8\x2f\x2c\xde\xbe\x7d\x72\xfe\xf6\x50\xf1\xec\x2f\x50\x9a\x49\x71\x73\x79\x4d\xae\x2e\x33\x10\x85\x2c\x99\xd8\xde\x5c\xae\xbf\xdd\x8e\xdf\x5c\xbe\x9d\x5e\xe4\x85\xac\x88\x61\x7b\xca\xc9\x23\x88\x3d\x13\x9a\xd4\xbc\xd9\xda\xbf\x55\xc3\x0d\x7b\x94\x1b\x72\x67\x3f\xfe\x94\x9b\x85\x92\x8f\x50\x98\xac\x0d\xb8\x19\xf9\x84\x71\x08\x1c\xb7\x8e\x77\xd7\xe4\xfa\xf5\x68\x7a\x91\x65\x39\x2d\x0c\xde\xae\x27\xee\x50\x82\x2e\x14\xab\xad\x65\x9a\x4f\xd2\x93\xf5\xee\x01\xea\x8f\x50\x83\x28\xb1\x4b\x06\x7a\xfa\x40\xb9\x86\x7c\x32\xb0\xdb\xe0\x5a\xc9\x1a\x94\xf1\x47\x34\x68\x20\x25\xa3\x1b\x99\xbc\x82\xd5\xc0\x99\x00\xb2\xf0\x1f\x8b\x36\xe7\x18\xdb\x2f\xd1\x8c\xf8\x1c\xc7\x21\x34\xf4\x7f\x45\xde\x90\x3f\x46\x6d\x65\xac\x6d\xa8\xde\xcf\x69\x05\xd3\x9a\x2a\xca\x39\xf0\x0c\x0e\x50\x34\xb6\xf3\x7c\x12\x9d\x21\x5a\x1b\xba\x05\x67\xf9\xfe\x3d\x23\xab\x70\xca\x7e\xfc\xc8\x27\x9d\xaf\xed\x7a\x72\x46\xdb\xee\xdd\x93\xfe\xc3\x73\x5d\x54\x59\xc1\xa9\xd6\x37\xa3\x5d\x53\x6a\x29\x08\x5a\xc8\xbc\xe1\x7c\x35\xbb\x1b\xb5\xb0\x17\x54\x2c\x25\xad\xa6\x46\x35\x08\x67\x38\xb9\x81\x30\x4d\x37\x1c\xca\x00\x75\x3c\x5b\xe7\x86\xcb\x62\xff\xa1\x61\xbc\xbc\xdf\x81\xf8\x28\xff\x16\xda\x28\xa0\x95\x33\x21\x87\x42\xd2\xff\xc6\x0d\x8b\xad\xeb\xe7\x94\x1a\x44\xd9\x42\x46\xb1\xed\x16\x39\xed\x9f\x26\x45\xd1\x28\x05\xc2\xb8\xa0\x50\xe7\xa9\xd9\x75\x60\xbf\x30\xd1\x23\x7f\x06\xeb\x3f\xb4\x99\x71\xc0\xf5\x8e\xea\x76\x88\xee\xeb\x0a\x87\x12\x2d\xbd\x18\xcc\xd5\xc1\x92\x65\xc8\x06\x45\xc5\x16\x90\x13\xcd\xc6\xba\x90\x11\xd1\xf9\x9c\x7e\x16\xa1\xe6\x4c\x8a\x07\xb6\xed\x2a\x63\x3a\xfa\x23\xe5\x1c\xd3\x82\x21\x0d\xb2\x98\x2c\x90\xc2\x95\x0e\x5c\xe8\x0c\x69\x1c\x1c\x6a\xa9\xa1\x44\x06\x05\x40\x13\x4b\x1a\xe8\xf9\x82\x3d\x3d\x61\x90\xb5\xa4\x81\xb8\x38\x1a\x27\xb8\x6c\x38\xe8\x05\x35\x3b\x5c\xff\x81\x29\x8d\xaf\xe8\x61\x09\x38\x6a\x64\x39\xc2\x9b\x9c\x7a\x6d\x0a\x7b\x95\xf5\x1c\x57\x46\x51\x03\xdb\x63\xec\xf7\x84\x6b\x98\x8a\x38\x96\xcc\xe9\x4f\x2f\xad\x33\xa7\x29\xb8\xa4\xca\xbc\xe7\xdc\x3e\xad\x45\x2f\xb5\xf4\x60\x8e\xf9\x8e\x89\x27\x6a\xed\x19\xe7\x6e\x9a\x5f\x05\x26\x2f\x41\xe3\x88\xbb\x5b\x6f\xdf\x7f\xfe\xb2\x5e\x7e\x42\xe5\xfb\xcf\xb0\xb4\xa0\x23\xf7\x57\xc1\x8f\x9f\x1f\x70\x46\xb3\x9d\xe5\x59\x14\xd0\xd3\xce\x8e\x7a\x93\x97\x70\x0f\x09\x87\xca\xdc\x51\xd9\x2f\x43\x4a\x7d\x0b\x88\x61\xa2\xa1\xb6\xed\xae\xff\xd5\x7a\x36\xfb\xb4\x5a\xdd\xae\xbf\x38\x98\x4e\x44\x5c\x3c\xbb\xbd\x13\xab\xea\xdf\xed\x37\x3e\xaf\x9b\x0d\x67\x7a\x17\x05\x00\xfb\x66\x0f\x19\x99\xc3\xc1\xdc\x51\xbc\x99\xa7\x1b\x99\xd3\x86\xd8\x5b\x0b\x54\x10\xd5\x54\xfa\xa8\x0d\x54\x9a\x78\x85\x6d\x6f\x27\xae\x7c\x54\x6b\xaf\x4b\xc4\x75\x10\xa4\xfb\x5b\x6b\x8c\x3f\x38\x2e\x65\xf0\x6b\x73\x4d\x7e\x27\xbf\x8d\x52\xb4\x10\xe1\x56\xe0\xda\x2d\x8b\x92\xea\x7f\x7f\xed\x62\x6b\xb7\xea\x83\xf6\x71\x03\x4f\x47\x7b\x2c\x7f\xed\xc3\x22\x94\x09\x05\x3a\x99\xb3\xcd\xf5\x50\xed\x5d\x83\x53\xb4\xca\x03\x06\x14\xfb\x07\xca\xde\x35\x4f\x71\xeb\x45\x8e\x7d\xe8\xbb\x57\xe4\xd5\xeb\x01\x6c\x09\xaf\xcf\xbd\xee\x84\xac\x0e\x8a\x3e\xbb\xf0\x5c\x96\xb0\x08\x8e\x6e\x98\x81\xd1\x83\xb2\xf6\x3f\x1a\x3b\x2d\xdd\x49\x78\xb4\x9c\x16\x17\xbf\x3f\x3f\xd3\x18\xdf\xc8\x3d\x33\xbb\xb9\xec\x3a\x09\xa2\xf0\x33\x77\x22\x0b\x2f\xc3\xef\xc9\x2b\xcf\x2f\x37\x24\x17\x42\xd2\xdb\xe2\x56\xf6\xee\x15\xad\xeb\x16\xe3\xb3\xb4\xc2\xaf\xc7\xf4\xe2\xdf\x00\x00\x00\xff\xff\x09\x99\x6b\x44\x29\x0b\x00\x00")

func templates_jenkins_multi_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_multi_job_xml,
		"templates/jenkins/multi-job.xml",
	)
}

func templates_jenkins_multi_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_multi_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/multi-job.xml", size: 2857, mode: os.FileMode(420), modTime: time.Unix(1423172303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_normal_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xdd\x6f\x1b\xb9\x11\x7f\xd7\x5f\xb1\x70\x03\xb8\x3d\x54\xab\xd8\xd7\xe2\xae\x80\xac\x4b\x2c\x2b\x39\xb5\xb6\x62\x58\x52\xf2\x78\xa0\x76\x47\x12\xcf\xdc\xe5\x82\xe4\x3a\x56\xdd\xfc\xef\x1d\x7e\xed\x72\x3f\xec\xd8\xb8\x7b\x09\x10\xe8\x45\x9c\x19\x0e\x87\xf3\xf9\xe3\x8e\x7f\xb9\xcf\x58\x74\x07\x42\x52\x9e\x9f\x1d\x9f\xc4\xaf\x8f\x23\xc8\x13\x9e\xd2\x7c\x77\x76\xbc\x5e\xbd\x1b\xfe\x7c\xfc\xcb\x64\x30\x2e\x04\xff\x1d\x12\x35\x19\x44\xd1\x98\x24\x0a\x85\xe5\xc8\x2c\x52\x90\x89\xa0\x85\xa6\x58\x02\xe3\xbb\x1b\xae\x88\xe2\x22\x4a\x18\x91\xf2\xec\x68\x5f\xa6\x92\xe7\xb1\x22\xf2\x56\xc6\x97\x15\xfb\x48\x8b\x6b\x0d\xe4\x20\x57\xfc\x3f\x00\xc5\x64\x78\x32\x1e\x05\x4b\xcb\xcf\xcb\x2c\x60\xd7\x2b\xcb\x25\x42\xd1\x2d\x5a\x74\xd1\xd4\xd2\x43\x6e\xca\x2f\x2a\x3d\x81\xf4\x22\x54\x3e\x1e\xd5\x57\x31\xeb\x5b\x64\x5c\x40\x01\x79\x8a\x1e\xa2\x20\x27\x5b\xc2\x24\x8c\x47\x1d\xba\x16\x46\x87\x15\x80\x6a\xed\x12\x09\x12\xe2\x94\x92\x0d\x67\xf1\xef\x90\xdf\xd2\x5c\xc6\x05\x2d\x80\xd1\x1c\xe2\x6b\xf7\xe7\xda\xee\x39\x44\x05\x2b\x77\x34\x3f\x3b\x4a\x91\x8c\xb1\x39\x0c\xbd\xe8\xd0\x72\xde\xbc\x8e\x7f\x8e\x7f\x72\x0e\x44\xdd\xda\xb5\x0b\x92\xc1\xe4\xe1\x21\x8a\x57\x6e\x11\x7d\xf9\x32\x1e\x55\x1c\x2f\x2a\x15\xd9\x41\x25\xbb\xf4\x2b\x23\x5c\xf3\xac\xc9\xa3\x17\xd8\x6c\x3d\xd6\xbc\x35\x9e\x40\xb7\x51\x3c\x97\xf3\x9c\x2a\x4a\xd8\xbf\xf9\x06\xcf\xd1\x82\x32\xc9\x5a\xd9\x61\x2f\x26\xe3\x1d\x55\xf1\x7b\xaa\x96\xd3\xab\xa3\xca\x0d\x48\x7b\x73\x1a\x9f\xc6\xff\xf2\x29\x93\xf0\x7c\x4b\x77\x1f\x6d\xd6\x4e\x4e\xc7\xa3\x26\xc1\x0a\x95\x12\xc4\x0d\x64\x5c\xc1\xd4\x70\x65\xe5\x83\x9e\x23\xd7\x2d\x61\x2f\xab\xf5\x08\x66\x7c\x85\x56\xad\x6f\x2e\x8d\xa3\x34\xc9\x2b\x1b\x3d\x5b\x1b\xee\xeb\x37\x69\xbc\x11\x24\x4f\xf6\xf0\xa4\x85\xe7\x46\x66\x59\x40\x12\xd8\x96\xeb\x60\xfd\x30\xd2\xe6\xd5\x7c\xba\xa5\x20\x8c\x9d\x79\x18\xf9\x3e\x43\xdb\x4a\xc7\xa3\xa6\x29\xe3\x94\x4a\xb2\x61\xb0\x2c\x37\x19\x4f\x4b\x56\x27\x7d\x97\x61\x37\x08\x48\x4a\x8c\xc2\x5d\xc8\x51\xa2\xc4\x1d\x7d\x1c\x77\x08\x7f\x0f\x39\x08\xa2\x6a\x96\xf5\x4f\x89\x34\xdd\x6a\xaa\x43\xbf\x2a\xe8\x8a\xbc\x54\x7b\x2e\x3e\x88\x29\xcf\x32\xaa\x14\x08\xaf\xa0\xcb\x70\x09\xc5\x80\xe4\x26\xca\x53\xfd\xef\x13\x17\xb7\xb2\x20\x89\x2d\x0b\xcb\xb4\x82\x9f\x31\xed\x3f\x94\xaa\x12\xf0\x8a\x3b\x74\x2b\x5e\x88\x32\x87\x73\xef\x52\x27\xdb\x24\x7a\xb7\xe9\xac\xb8\xe6\x8c\x79\xa9\x80\x62\x45\xe8\x2e\xe7\x02\x16\x1c\x5b\xd5\xc1\xda\xef\x45\x7b\x38\x55\x09\x2c\xf7\x84\x31\xfe\x79\xca\x78\x0e\x2e\x10\x6d\xaa\xcb\xc1\x92\xb2\x74\xba\xe7\x1c\x73\xf4\x89\xda\x2c\x15\x65\xf1\x05\x6c\x49\xc9\xd4\x79\xb0\xe5\x68\xe4\xf4\xa0\xd0\x8a\x73\x36\x71\x32\xe3\x91\x27\xb8\x36\x58\x05\x6e\xbb\xf3\xc7\x30\x2a\x55\xb5\x5f\x00\xc3\x58\xde\xc1\x8a\x88\x1d\xa8\x0b\x2a\x6a\xc6\x16\x04\x76\x58\xf0\x04\xb8\x4f\x58\x99\x42\x7a\x03\xbb\x6a\x1e\x05\x64\x5d\x84\x32\xb0\xca\x66\x8a\x6e\x6f\x1d\xe2\x2c\x23\x94\x79\xaa\xbc\xa5\xc5\x8a\xec\x9c\xb3\xfc\xca\xc5\x20\x6f\x1c\x39\x71\x1d\x4e\x87\x1d\x07\x26\x1a\x8b\x09\xa3\xb3\xa8\x4d\xc0\xd9\x60\x52\xa9\xbd\xdf\x9d\x98\x64\xa1\x59\x7f\x7a\x39\x7c\xd5\xe7\x70\xaf\x20\x97\xf5\x50\x1f\xa1\x45\xe6\x8f\x12\x74\xb7\x43\x37\x5a\x39\x77\xdb\x75\x21\x95\x00\x92\x61\x3b\x97\xb6\x9f\xa3\xa4\x1f\x10\x7e\x47\x7c\x03\x1a\x55\x80\xc9\x91\x95\x25\xd6\x43\x08\x1b\xce\xa8\x5a\x95\x4e\xdf\xb5\xc5\x18\xc6\xab\xed\x43\x30\x6b\xdb\x52\xd5\xf0\xdb\x0b\x90\x7b\xce\xd2\x76\x5f\x5c\xae\xa7\xd3\xd9\x72\xd9\x6c\x83\xc8\xe4\x02\xd1\x0d\x61\x93\xd7\xe3\x91\xff\x5b\x33\x13\xce\x70\xdc\x9f\x5f\xae\x67\x7a\xaa\x30\x2e\x1a\xbc\xac\x60\xa0\xec\x9d\x5c\x7e\x34\x69\x55\xaf\x6d\x19\x35\x1e\x3d\xdf\x3f\x55\xba\x0c\xc2\x51\x50\xed\xc3\xc9\xd8\xe7\xce\xc9\x0f\x91\xfb\x61\xf4\x82\x21\xe1\xda\xc6\x35\x97\xca\xb6\x86\x5f\x39\xbf\x95\xcd\xce\xd1\x66\x0e\x1a\xf3\xe2\x91\x93\xf1\x8e\x41\x72\xd8\xf6\xf1\x49\x90\xa2\xa8\xd2\xa5\x3d\xc5\x08\xa6\x98\x71\x69\xfc\x16\xff\x4d\xf5\xbf\xf3\x60\x57\x35\xee\x2b\x39\x84\x39\xff\x88\x5f\xd7\x30\xc7\x10\xaf\x48\x61\x20\x0a\xa6\xac\xc8\x5c\x8c\x3c\x6d\xd0\x3b\xe8\xbe\x72\xee\xf3\xf1\x99\xc3\x17\x58\x63\x78\xf5\x4d\xa9\x21\xee\x4b\x91\x9a\x43\xda\x2b\xc0\xac\xc1\xba\x9d\xbc\x7a\x38\x5f\xcf\x2f\x2f\x7e\x5b\xac\xaf\xce\x67\x37\x5f\x86\xaf\x1e\xde\xcf\x57\xbf\xdd\xcc\x3e\xce\x97\xf3\x0f\x8b\xbf\x33\xc8\x77\x6a\x7f\xf6\x13\xe6\x7f\x7b\x67\x5d\x3d\x29\x2e\x2f\xa8\x44\xf2\xc1\x78\xc1\x75\xf9\x0e\xfd\xf9\xa0\xae\x7b\x51\x1b\xf1\x4e\x90\x75\xae\x62\x22\x7d\x83\xa8\xce\xf4\x84\x4e\x6b\xc0\x19\x63\x8a\x47\x8f\xdf\xad\x6c\x62\xad\xef\x38\xf0\x3b\x0e\xfc\x8e\x03\xbf\xe3\xc0\xa8\x8b\x03\x47\x3d\x40\xae\x06\x51\xdf\xf6\x68\x7c\xa4\xeb\x5b\x84\x52\x3f\xf2\x97\x8c\xdc\xc1\x25\xd9\x00\x73\xc3\x00\x23\x8a\xf9\x08\xe9\x82\xa7\xee\x5b\x43\x28\x81\x25\x18\xf2\x07\x4d\xd8\x33\x4e\x48\x7e\xc3\x49\xe6\x13\xdb\x2f\x07\x75\x27\x4a\x5b\x0d\x28\xb5\xae\x66\x3c\xb9\xb5\x37\xd8\x43\x7e\xc1\x3f\xe7\x16\x34\x1a\x12\x02\x72\xbf\xe9\xab\x72\x5d\x65\x1e\x90\x3e\xad\xaa\x23\x35\xb0\x83\x0d\x5b\x1e\xe6\xac\xad\x94\xea\x56\x2d\xf2\xe0\x09\x84\xfd\x02\x7c\x1d\xa2\xeb\x3f\x84\xad\xbb\xc8\xfa\x09\x5c\xfd\x04\xaa\x7e\x1c\x53\x3f\x17\x51\xb7\xf0\xf4\xf3\xd1\x74\x23\xa9\x4c\x1e\x87\x8f\x19\x6c\xbd\x3b\x88\xe2\xb7\xfe\x5b\x21\x14\x6d\xd4\xed\xeb\x24\xe1\xc5\xc1\x7f\x24\x8c\xa7\xb8\xf0\x7b\xaa\xca\x0c\x25\xde\x9c\xc4\x3f\x9e\xc6\x27\x75\x75\xfa\xaf\xa7\xda\xf9\xce\xc7\xba\x28\x0d\x96\x33\x01\x08\x3e\xaf\x9a\x0d\x5b\xca\xf4\x50\xd2\xf2\xd5\x49\x5a\xce\xd1\xab\xa7\x8f\xe9\x8d\xf5\x4b\xca\xb5\x3c\x59\x53\x24\x30\xd4\xdb\xf9\x16\xdb\x7b\x2f\xe7\x37\x48\x8d\x17\x97\x6e\xe7\x51\x00\x33\x30\x71\xd9\x86\x24\xb7\x2b\x7e\x49\xa4\x5a\x96\x49\x02\x52\x6e\x4b\xe6\x22\xf7\x28\x3b\x00\x51\x2e\xd3\xde\x99\x8b\x2c\x95\x9e\xe1\xbb\xc3\x04\x7b\xf4\x7b\xc6\x37\x84\x2d\x41\x29\x2c\x9b\x3a\x25\x5b\x82\x15\x88\xf1\x17\xab\x28\x29\xc7\xc1\xf7\x0e\xf7\x82\x28\x04\xcd\x95\xf7\x5b\x00\x1a\x1e\x13\xe8\xef\x8d\x8f\xc6\xfc\xc9\x67\x9a\xf9\xc8\xbd\xdc\x03\x0b\xd3\x3f\xcb\x48\x8e\x99\xfb\x97\xc8\x23\xed\x28\xc1\xbb\xe9\xb0\x64\x64\x47\x93\x01\xdc\x17\x5c\xa8\xe8\x7a\x7e\x3d\xbb\x9c\x2f\x66\xee\x35\x70\xf6\xea\xaf\x90\xec\x79\x74\xf4\xea\xa1\xe2\x7c\x9c\xdd\xe8\x87\xc1\x97\xa3\xe8\x7f\x51\x52\xaa\x68\xb8\x3d\x89\x86\xe9\xf1\xf0\xf8\x6f\x5e\x89\x7e\x3f\x2c\x7f\x7d\xfb\xbc\xcd\xa7\x6e\x73\xff\x97\xda\x00\xdd\xe3\x88\x8c\xb0\x02\x01\x37\x0d\xf7\x44\xa4\x91\x7d\xa8\xe0\x41\xf5\xe7\x8d\x81\xc1\x4d\xf6\xb2\xde\x2f\xda\xaf\xd5\xfd\x1b\x6e\x6e\x79\xca\x8d\x19\xff\x9c\x2c\xca\x0d\xa2\x81\x7d\xfb\xd3\x83\xc5\x36\xfd\x4e\xbf\xc2\xd9\x1d\x8c\xca\xcc\x2c\xb1\x14\x4f\x82\x31\x89\xd8\x93\x16\x14\x3b\x6e\x50\x22\x29\xbe\x72\xac\xde\x99\x7e\xc1\xad\x71\x14\xe8\x81\x12\xb6\xa4\x27\x45\xea\x52\xcb\xd3\x15\x9f\xe7\x29\xbd\xa3\x69\x89\x39\xe7\x91\x43\x87\xde\xe7\x08\x6b\x7d\x5f\x6a\xb9\xab\x07\x7d\xa0\xe7\xf2\x9e\xfb\x56\x24\x7b\xfd\x10\xad\xac\x22\x55\x96\x77\x9a\x09\x69\x16\x80\xee\xe1\x39\x3b\xcc\xb7\x9d\xba\xee\x90\xbd\xbc\x7e\x88\x4a\xf5\x01\xd9\x4e\x32\x20\x54\x06\x68\x80\x39\xcb\x0a\x75\x70\xb6\x55\x18\xbc\xc3\xe8\xf3\x4b\xff\xc5\x7a\x3d\xb4\x80\x7b\x75\x45\xf2\xd2\xa4\x6f\xfd\x65\x8a\x94\x58\xca\x59\x9c\x60\xd4\x45\x99\xc9\x83\x54\x90\xc9\xb8\x51\xec\xb1\xc9\xbd\xea\x19\xec\xa6\x4a\x6c\xe2\xeb\xdf\xc4\xae\x3b\x56\xf9\x65\xb6\x74\x9e\xfb\x27\x08\xcb\x7e\x0c\x61\x99\x79\xde\x85\xc9\xe6\xa1\x46\x30\x07\x6c\x6c\x3a\xe6\xeb\xbc\xeb\x95\x76\x7e\xfa\x73\x2f\xf6\x88\x63\xdd\x8c\xd4\xc6\x35\xbc\xda\x6a\x96\x05\x11\x68\x1a\x76\x6a\xfa\x5f\x48\x1b\xc7\xb4\xfd\xd6\x90\x1c\x3a\x51\xfd\x21\xe0\x9f\x1d\xb7\x05\x73\xe3\xa5\xc7\xb5\xdf\xfb\x7d\x4a\x9f\xad\x58\x43\xd4\x6b\xcf\xa8\x83\xe9\xbb\x5b\x47\xad\x9f\xf7\x36\xae\xe1\x80\x97\x6d\x8b\x52\xaa\xdf\xab\x35\xa4\xaa\x49\xa1\xa0\x33\xe4\x13\x55\xfb\x05\xaf\x2d\xf1\x95\xf4\x18\xbb\x76\x5f\x7b\xb6\xbd\xd0\x7f\xad\x5b\xbe\x5c\x5d\x37\xb9\xd0\x25\x41\x8b\x0f\x10\xd0\xff\x03\x00\x00\xff\xff\x14\x94\x90\x03\x92\x1e\x00\x00")

func templates_jenkins_normal_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_normal_job_xml,
		"templates/jenkins/normal-job.xml",
	)
}

func templates_jenkins_normal_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_normal_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/normal-job.xml", size: 7826, mode: os.FileMode(420), modTime: time.Unix(1425985491, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_pipeline_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templates_jenkins_pipeline_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_pipeline_xml,
		"templates/jenkins/pipeline.xml",
	)
}

func templates_jenkins_pipeline_xml() (*asset, error) {
	bytes, err := templates_jenkins_pipeline_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1423648470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templates_jenkins_multi_job_xml,
	"templates/jenkins/normal-job.xml": templates_jenkins_normal_job_xml,
	"templates/jenkins/pipeline.xml":   templates_jenkins_pipeline_xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"jenkins": &_bintree_t{nil, map[string]*_bintree_t{
			"multi-job.xml":  &_bintree_t{templates_jenkins_multi_job_xml, map[string]*_bintree_t{}},
			"normal-job.xml": &_bintree_t{templates_jenkins_normal_job_xml, map[string]*_bintree_t{}},
			"pipeline.xml":   &_bintree_t{templates_jenkins_pipeline_xml, map[string]*_bintree_t{}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
