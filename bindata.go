package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_jenkins_multi_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x55\x4b\x73\xdb\x36\x10\xbe\xfb\x57\x70\x74\xf1\x49\x90\x9d\x36\x9d\x1c\x68\xe5\xa1\xc4\x33\xe9\xc4\x8e\x46\x8a\xc6\x67\x88\x5c\x49\xb0\x40\x90\x03\x80\xad\xd4\x4c\xfe\x7b\x17\x4f\x82\xa6\xd2\x5a\xe3\x9c\x24\xec\x0b\x1f\xbe\xfd\x76\x99\xbf\x3d\x54\x3c\xfb\x0b\xa4\x62\xb5\xb8\xb9\xbc\x26\x57\x97\x19\x88\xa2\x2e\x99\xd8\xde\x5c\xae\xbe\xdd\x8e\xdf\x5c\xbe\x9d\x5e\xe4\x45\x5d\x11\xcd\xf6\x94\x93\x47\x10\x7b\x26\x14\x69\x78\xbb\x35\xbf\x55\xcb\x35\x7b\xac\xd7\xe4\xce\xfc\xf9\xb3\x5e\xcf\x65\xfd\x08\x85\xce\x5c\xc0\xcd\xc8\x27\x8c\x43\xe0\xd8\x39\xde\x5d\x93\xeb\xd7\xa3\xe9\x45\x96\xe5\xb4\xd0\x78\xbb\x9a\xd8\x43\x09\xaa\x90\xac\x31\x96\x69\x3e\x49\x4f\xc6\xbb\x07\x68\x3e\x42\x03\xa2\x44\x94\x0c\xd4\x74\x43\xb9\x82\x7c\x32\xb0\x9b\xe0\x46\xd6\x0d\x48\xed\x8f\x68\x50\x40\x4a\x46\xd7\x75\xf2\x0a\xd6\x00\x67\x02\xc8\xdc\xff\x99\xbb\x9c\x63\x84\x5f\xa2\x19\xf9\x39\x8e\x43\x68\xc0\x7f\x45\xde\x90\x3f\x46\xae\x32\xd6\xd6\x54\xed\xef\x69\x05\xd3\x86\x4a\xca\x39\xf0\x0c\x0e\x50\xb4\x06\x79\x3e\x89\xce\x10\xad\x34\xdd\x82\xb5\x7c\xff\x9e\x91\x65\x38\x65\x3f\x7e\xe4\x93\xce\xe7\x50\x4f\xce\x80\x6d\xdf\x3d\xe9\x3f\x3c\x57\x45\x95\x15\x9c\x2a\x75\x33\xda\xb5\xa5\xaa\x05\x41\x0b\xb9\x6f\x39\x5f\xce\xee\x46\x8e\xf6\x82\x8a\x45\x4d\xab\xa9\x96\x2d\xd2\x19\x4e\xb6\x21\x4c\xd1\x35\x87\x32\x50\x1d\xcf\xc6\xb9\xe6\x75\xb1\xff\xd0\x32\x5e\x3e\xec\x40\x7c\xac\xff\x16\x4a\x4b\xa0\x95\x35\xa1\x86\x42\xd2\xff\xc6\x0d\x8b\xad\x9a\xe7\x94\x1a\x44\x99\x42\x5a\xb2\xed\x16\x35\xed\x9f\x56\x8b\xa2\x95\x12\x84\xb6\x41\xa1\xce\x53\xb3\x45\x60\xfe\x61\xa2\x67\xfe\x0c\xd5\x7f\x70\x99\xb1\xc1\xcd\x8e\x2a\xd7\x44\xfb\xef\x0a\x9b\x12\x2d\xbd\x18\xcc\x55\xc1\x92\x65\xa8\x06\x49\xc5\x16\x50\x13\xed\xda\xb8\x50\x11\xd1\xf9\x1c\x3c\xf3\x50\x73\x56\x8b\x0d\xdb\x76\x95\x31\x1d\xfd\x51\x72\x56\x69\xc1\x90\x06\x19\x4e\xe6\x28\xe1\x4a\x05\x2d\x74\x86\x34\x0e\x0e\x4d\xad\xa0\x44\x05\x05\x42\x13\x4b\x1a\xe8\xf5\x82\x98\x9e\x28\xc8\x58\xd2\x40\x1c\x1c\x85\x1d\x5c\xb4\x1c\xd4\x9c\xea\x1d\x8e\xff\xc0\x94\xc6\x57\xf4\xb0\x00\x6c\x35\xaa\x1c\xe9\x4d\x4e\x3d\x98\xc2\x5c\x65\x3c\xc7\xa5\x96\x54\xc3\xf6\x18\xf1\x9e\x70\x0d\x53\x91\xc7\x92\xd9\xfd\xd3\x4b\xeb\xcc\x69\x0a\x0e\xa9\xd4\xef\x39\x37\x4f\x73\xec\xa5\x96\x1e\xcd\x31\xdf\x2a\xf1\x44\xad\x3d\xe3\xdc\x76\xf3\xab\xc0\xe4\x05\x28\x6c\x71\x77\xeb\xed\xfb\xcf\x5f\x56\x8b\x4f\xb8\xf9\xfe\x33\x2c\x2d\x68\xc5\xfd\x55\xf0\xe3\xe7\x0d\xf6\x68\xb6\x33\x3a\x8b\x0b\xf4\xb4\xb3\x93\xde\xe4\x25\xda\x43\xc1\xe1\x66\xee\xa4\xec\x87\x21\x95\xbe\x21\x44\x33\xd1\x52\x03\xbb\xc3\xbf\x5c\xcd\x66\x9f\x96\xcb\xdb\xd5\x17\x4b\xd3\x89\x88\x8b\x67\xc3\x3b\x31\xaa\xfe\xdd\x7e\xe2\xf3\xa6\x5d\x73\xa6\x76\x71\x01\x20\x6e\xb6\xc9\xc8\x3d\x1c\xf4\x1d\xc5\x9b\x79\x3a\x91\x39\x6d\x89\xb9\xb5\xc0\x0d\x22\xdb\x4a\x1d\x95\x86\x4a\x11\xbf\x61\xdd\xed\xc4\x96\x8f\xdb\xda\xef\x25\x62\x11\x84\xd5\xfd\xcd\x19\xe3\x07\xc7\xa6\x0c\xbe\x36\xd7\xe4\x77\xf2\xdb\x28\x65\x0b\x19\x76\x0b\xce\x4d\x59\x5c\xa9\xfe\xfb\x6b\x06\x5b\xd9\x51\x1f\xc0\xc7\x09\x3c\x1d\xed\xb9\xfc\xb5\x0f\x8b\x54\x26\x12\xe8\xd6\x9c\x01\xd7\x63\xb5\x77\x0d\x76\xd1\x6c\x1e\xd0\x20\xd9\x3f\x50\xf6\xae\x79\xca\x5b\x2f\x72\xec\x43\xdf\xbd\x22\xaf\x5e\x0f\x68\x4b\x74\x7d\xee\x75\x27\xd6\x6a\xe3\x28\x54\xdd\x5e\x8d\x96\xd3\x13\xef\x45\xfd\xb3\xc1\xf7\xd7\x3e\x30\xbd\xbb\xaf\xe7\x01\x50\x9c\xd4\x9f\xb9\x93\x59\x7d\xd9\xa3\x2c\xae\x8e\xa6\xf3\xcb\x0d\x3b\x8e\x94\xf4\x46\xcb\xed\xa2\x07\x49\x9b\xc6\x7d\xa6\xcf\x1a\x60\xaf\xd9\xe9\xc5\xbf\x01\x00\x00\xff\xff\x09\x37\xec\xab\xbe\x0a\x00\x00")

func templates_jenkins_multi_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_multi_job_xml,
		"templates/jenkins/multi-job.xml",
	)
}

func templates_jenkins_multi_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_multi_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/multi-job.xml", size: 2750, mode: os.FileMode(420), modTime: time.Unix(1434028053, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_normal_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\x5b\x6f\xdb\x38\xf6\x7f\xf7\xa7\x10\xf2\x2f\x90\xff\x0e\xd6\x72\x93\xd9\xc5\xcc\x02\x8e\xa7\x8d\xe3\x76\xbc\x9b\xb8\x81\x2f\xed\xe3\x80\x96\x68\x99\x13\x4a\x14\x48\x2a\x8d\x37\xdb\xef\xbe\x87\x57\x51\x17\xe7\x82\x9d\x97\x01\x0a\xbf\x58\xe7\xfc\x48\x1e\x1e\x9e\xcb\x8f\x1c\xff\xf2\x90\xd3\xe8\x1e\x73\x41\x58\x71\x71\x7a\x16\xbf\x3d\x8d\x70\x91\xb0\x94\x14\xd9\xc5\xe9\x66\xfd\x61\xf8\xf3\xe9\x2f\x93\xc1\xb8\xe4\xec\x77\x9c\xc8\xc9\x20\x8a\xc6\x28\x91\x00\x16\x23\xfd\x91\x62\x91\x70\x52\x2a\x89\x11\x50\x96\x2d\x99\x44\x92\xf1\x28\xa1\x48\x88\x8b\x93\x7d\x95\x0a\x56\xc4\x12\x89\x3b\x11\x5f\x7b\xf5\x89\x82\xab\x19\xd0\x41\xac\xd9\xbf\x30\x2e\x27\xc3\xb3\xf1\x28\xf8\x34\xfa\xa2\xca\x03\x75\xfd\x65\xb4\x88\x4b\xb2\x03\x8b\xae\x9a\xb3\xf4\x88\x9b\xf8\x85\x9f\x27\x40\x2f\xc2\xc9\xc7\xa3\x7a\x2b\xfa\xfb\x0e\x14\x57\xb8\xc4\x45\x0a\x1e\x22\x58\x4c\x76\x88\x0a\x3c\x1e\x75\xe4\x0a\x0c\x0e\x2b\x31\x4c\x6b\x3e\x41\x20\x70\x9c\x12\xb4\x65\x34\xfe\x1d\x17\x77\xa4\x10\x71\x49\x4a\x4c\x49\x81\xe3\x5b\xfb\xe7\xd6\x8c\x39\x44\x25\xad\x32\x52\x5c\x9c\xa4\x20\x86\xb3\x39\x0c\x1d\x74\x68\x34\xef\xde\xc6\x3f\xc7\x3f\x59\x07\xc2\xdc\xca\xb5\x0b\x94\xe3\xc9\xe3\x63\x14\xaf\xed\x47\xf4\xed\xdb\x78\xe4\x35\x0e\x2a\x24\xca\xb0\xc7\xae\xdc\x97\x06\xd7\x3a\x63\xf2\xe8\x15\x36\x1b\x8f\x35\x77\x0d\x2b\x90\x5d\x14\xcf\xc5\xbc\x20\x92\x20\xfa\x4f\xb6\x85\x75\x14\x50\x24\x79\x2b\x3a\xcc\xc6\x44\x9c\x11\x19\x7f\x24\x72\x35\xbd\x39\xf1\x6e\x00\xd9\xbb\xf3\xf8\x3c\xfe\x87\x0b\x99\x84\x15\x3b\x92\x7d\x36\x51\x3b\x39\x1f\x8f\x9a\x02\x03\xaa\x04\xe6\x4b\x9c\x33\x89\xa7\x5a\x2b\xbc\x0f\x7a\x96\xdc\xb4\xc0\x0e\xab\xe6\xe1\x54\xfb\x0a\xac\xda\x2c\xaf\xb5\xa3\x94\xc8\x4d\x36\x7a\xf1\x6c\x30\xae\xdf\xa4\xf1\x96\xa3\x22\xd9\xe3\x27\x2d\xbc\xd4\x98\x55\x89\x93\xc0\xb6\x42\x1d\xd6\x0f\x23\x65\x5e\xad\x27\x3b\x82\xb9\xb6\xb3\x08\x4f\xbe\xcf\xd0\xf6\xa4\xe3\x51\xd3\x94\x71\x4a\x04\xda\x52\xbc\xaa\xb6\x39\x4b\x2b\x5a\x07\x7d\x57\x61\x06\x70\x9c\x54\x70\x0a\xf7\xa1\x46\xf2\x0a\x46\xf4\x69\xec\x22\xec\x23\x2e\x30\x47\xb2\x56\x19\xff\x54\x20\x53\xa5\xc6\x2f\xfa\x2c\xd0\x26\x79\x25\xf7\x8c\x7f\xe2\x53\x96\xe7\x44\x4a\xcc\xdd\x04\x5d\x85\x0d\x28\x8a\x51\xa1\x4f\x79\xaa\xfe\x7d\x61\xfc\x4e\x94\x28\x31\x69\x61\x94\x06\xf8\x15\xc2\xfe\x53\x25\x3d\xc0\x4d\xdc\x91\x1b\x78\xc9\xab\x02\x5f\x3a\x97\x5a\x6c\x53\xe8\xdc\xa6\xa2\xe2\x96\x51\xea\x50\x81\xc4\x40\x48\x56\x30\x8e\x17\x0c\x4a\xd5\xc1\xd8\xef\xa0\x3d\x1a\x9f\x02\xab\x3d\xa2\x94\x7d\x9d\x52\x56\x78\x63\xdb\x62\x1b\x84\x15\xa1\xe9\x74\xcf\x18\x04\xe9\x13\xc9\x59\x49\x42\xe3\x2b\xbc\x43\x15\x95\x97\xc1\x90\x93\x91\x9d\x07\x40\x6b\xc6\xe8\xc4\x62\xc6\x23\x27\xb0\x75\xd0\x9f\xdc\x2e\x73\xcb\x50\x22\xa4\x1f\xcf\x31\x85\xc3\xbc\xc7\x6b\xc4\x33\x2c\xaf\x08\xaf\x15\x3b\xcc\xa1\xc4\x62\x27\xc0\x0f\x09\xad\x52\x9c\x2e\x71\xe6\x1b\x52\x20\x56\x59\x28\x02\xab\x4c\xa8\xa8\xfa\xd6\x11\xce\x72\x44\xa8\x93\x8a\x3b\x52\xae\x51\x66\xc3\xd6\x7d\xd9\x43\x28\x1a\x4b\x4e\x6c\x89\x53\xe7\x0e\x1d\x13\x8c\x85\x88\x51\x61\xd4\x16\x40\x73\xd0\xb1\xd4\x1e\x6f\x57\x4c\xf2\xd0\xac\x3f\x3c\x1f\x9e\xf5\x39\x7e\x90\xb8\x10\x75\x57\x1f\x81\x45\xfa\x8f\xe4\x24\xcb\xc0\x8d\x06\x67\x77\xbb\x29\x85\xe4\x18\xe5\x50\xcf\x85\x29\xe8\x80\x74\x1d\xc2\x8d\x88\x97\x58\xd1\x0a\xac\x63\x64\x6d\x84\x75\x17\x82\x8a\x33\xf2\x5f\x95\x9d\xef\xd6\x90\x0c\xed\xd5\xf6\x22\x10\xb5\x6d\x94\xef\x7e\x7b\x8e\xc5\x9e\xd1\xb4\x5d\x18\x57\x9b\xe9\x74\xb6\x5a\x35\xeb\x20\x28\x19\x07\x7a\x83\xe8\xe4\xed\x78\xe4\xfe\xd6\xca\x84\x51\xe8\xf7\x97\xd7\x9b\x99\x6a\x2b\x94\xf1\x86\x2e\x2f\x29\x96\x66\x4f\x36\x3e\x9a\x32\x5f\x6c\x5b\x46\x8d\x47\x2f\xf7\x8f\x0f\x97\xd0\xe7\x16\x81\xd3\x1b\x54\x54\x90\xbb\x07\x1b\x57\x10\x07\xfe\x08\x1c\xd1\x72\x2b\x40\x13\xed\x73\xfc\xe4\x87\xc8\xfe\xe0\x9c\x83\x7e\x62\x2b\xcc\x2d\x13\xd2\x54\x91\x5f\x19\xbb\x13\xcd\x22\xd3\x56\x0e\x1a\xad\xe5\xe8\xca\xe1\x96\xc0\x37\x41\x50\x99\xb2\xf3\x85\xa3\xb2\xf4\x61\xd6\x6e\x7f\x08\x42\x53\x1f\x45\xfc\x1e\xfe\x4d\xd5\xbf\xcb\x60\x94\xe7\x09\x1e\x07\xfc\xe8\x6f\xf1\xdb\x9a\x1f\x69\xe1\x0d\x2a\x35\xb7\x81\x50\xe7\xb9\x3d\x5b\x27\x1b\xf4\x76\xc8\x67\xd6\x7d\x39\xb1\xb3\xc4\x04\x72\x13\xb6\xbe\xad\x14\x37\x7e\x2d\xc5\xb3\x14\x7d\x8d\x21\xda\x20\xdf\x27\x6f\x1e\x2f\x37\xf3\xeb\xab\xdf\x16\x9b\x9b\xcb\xd9\xf2\xdb\xf0\xcd\xe3\xc7\xf9\xfa\xb7\xe5\xec\xf3\x7c\x35\xff\xb4\xf8\x2b\xc5\x45\x26\xf7\x17\x3f\x41\xde\xb4\x47\xd6\x59\x97\xc2\xe7\x15\x11\x20\x3e\x68\x2f\x98\x80\xee\xca\x5f\xce\x06\xbb\x1b\x35\xe5\xa4\x73\xc8\x8d\xd0\xfd\x53\xd1\x41\x5d\x4b\x3a\x25\x05\x7a\x93\x4e\x25\xd5\xb7\x77\xa2\x49\xd2\xbe\x13\xc8\xef\x04\xf2\x3b\x81\xfc\x4e\x20\xcd\x21\x14\xbd\x4b\x86\x0c\xb0\x66\x5f\x7f\xee\xde\x78\xa4\xec\x1b\x1e\x50\x3f\x0f\xac\x28\xba\xc7\xd7\x68\x8b\xa9\xed\x06\x70\xa2\x10\x90\x38\x5d\xb0\xd4\xbe\x52\x84\x08\xc8\xc1\x50\x3f\x68\x91\x8b\x04\x15\x4b\x86\x72\x17\xa9\xee\x73\x50\x97\xa2\xb4\x55\x81\x52\xe3\x6a\xca\x92\x3b\xb3\x83\x3d\x2e\xae\xd8\xd7\xc2\xb0\x4d\x2d\x02\x26\xef\x06\x3d\x8b\xeb\x4e\xe6\x98\xec\xd3\x53\x75\x50\x03\xd3\xd9\xa0\xe6\x41\xcc\x9a\x4c\xf1\xbb\x6a\x89\x07\x4f\x50\xf3\x57\x10\xf3\x90\x96\xff\x4f\xa4\xbc\x4b\xc9\x9f\x20\xe4\x4f\xd0\xf1\xe3\x64\xfc\xa5\x54\xbc\x45\xc4\x5f\x4e\xc3\x1b\x41\xa5\xe3\x38\xbc\x05\x41\xed\xcd\x70\x14\xbf\x77\xaf\x8c\xb8\x6c\x93\x70\x97\x27\x09\x2b\x0f\xee\x79\x31\x9e\xc2\x87\x1b\xe3\x33\x33\x44\xbc\x3b\x8b\x7f\x3c\x8f\xcf\xea\xec\x74\xef\xae\xca\xf9\xd6\xc7\x2a\x29\x35\x99\xd3\x07\x10\x3c\xcc\xea\x01\x3b\x42\x55\x57\x52\x78\xbf\x92\xc2\x59\xb9\xbf\x33\xe9\xda\x58\x5f\xc1\x6c\xc9\x13\xb5\x44\x60\x0a\xf3\x76\x5e\x71\x7b\xf7\xe5\x2f\x27\xda\x8b\x2b\x3b\xf2\x24\xe0\x19\x10\xb8\x74\x8b\x92\xbb\x35\xbb\x46\x42\xae\xaa\x24\xc1\x42\xec\x2a\x6a\x4f\xee\xa8\x3a\x60\x51\x36\xd2\x3e\xe8\x8d\xac\xa4\x6a\xe2\xd9\x61\x02\x35\xfa\x23\x65\x5b\x44\x57\x58\x4a\x48\x9b\x3a\x24\x5b\x40\xcf\x62\xdc\xc6\xbc\x24\x65\xd0\xf9\x3e\xc0\x58\xcc\x4b\x4e\x0a\xe9\xfc\x16\xb0\x86\x63\x80\xfe\xda\x78\xf4\xcc\xfb\xee\x77\xe3\xc6\xf3\xf8\x6a\x8f\x69\x18\xfe\x79\x8e\x0a\x88\xdc\xff\x8b\x1c\xd5\x8e\x12\xd8\x9b\x3a\x96\x1c\x65\x24\x19\xe0\x87\x92\x71\x19\xdd\xce\x6f\x67\xd7\xf3\xc5\xcc\x5e\x07\x2e\xde\xfc\x3f\x4e\xf6\x2c\x3a\x79\xf3\xe8\x35\x9f\x67\x4b\x75\x33\xf8\x76\x12\xfd\x27\x4a\x2a\x19\x0d\x77\x67\xd1\x30\x3d\x1d\x9e\xfe\xc5\x4d\xa2\x2e\x10\xab\x5f\xdf\xbf\x6c\xf0\xb9\x1d\xdc\xff\xc6\x1b\xd0\x7b\x68\x91\x11\x64\x20\x86\x41\xc3\x3d\xe2\x69\x64\x6e\x2a\xb0\x50\xfd\x2e\x32\xd0\xc4\xc9\x6c\xd6\xf9\x45\xf9\xd5\xef\xbf\xe1\xe6\x96\xa7\x6c\x9b\x71\xf7\xc9\xb2\xda\x02\x1b\xd8\xb7\xdf\x2c\x0c\xb9\xe9\x77\xfa\x0d\xf4\xee\xa0\x55\xe6\xfa\x13\x52\xf1\x2c\x68\x93\x40\x3e\x49\x49\xa0\xe2\x06\x29\x92\xc2\x35\xc7\xcc\x3b\x53\x57\xb8\x0d\xb4\x02\xd5\x50\xc2\x92\xf4\x24\xa4\x4e\xb5\x22\x5d\xb3\x79\x91\x92\x7b\x92\xc2\xe5\xde\x11\xde\xae\xbc\xcf\x11\xc6\xfa\x27\x9e\x0e\x82\x3a\xd0\xb3\x79\xa7\x7d\xcf\x93\xbd\xba\x89\x7a\xab\x90\x8f\xf2\x4e\x31\x41\xcd\x04\x50\x35\xbc\xa0\x87\xf9\xae\x93\xd7\x1d\xb1\xc3\xab\x9b\xa8\x90\x9f\x40\x6d\x91\x81\xc0\x1b\xa0\x08\xe6\x2c\x2f\xe5\xc1\xda\xe6\x49\x78\x47\xd1\xe7\x97\xfe\x8d\xf5\x7a\x68\x81\x1f\xa4\x79\x57\x69\x3c\x69\xa1\x0a\x52\x39\x8f\x13\x38\x75\x5e\xe5\xe2\x20\x24\xce\x45\xdc\x48\xf6\x58\xc7\x9e\xbf\x07\xdb\xae\x12\xeb\xf3\x75\x97\x62\x5b\x1d\x7d\x7c\xe9\x21\x9d\xfb\xfe\x19\xd0\xb2\x1f\x43\x5a\xa6\xef\x77\x61\xb0\x39\xaa\x11\xf4\x01\x73\x36\x1d\xf3\x55\xdc\xf5\xa2\xad\x9f\xfe\xd8\x8d\x1d\x71\xac\xed\x91\xca\xb8\x86\x57\x5b\xc5\xb2\x44\x1c\x4c\x83\x4a\x4d\xfe\x8d\xd3\xc6\x32\x6d\xbf\x35\x90\x43\x0b\x55\x2f\x01\x7f\xef\xb8\x2d\xe8\x1b\xaf\x5d\xae\x7d\xe1\xaf\x9b\xb0\x71\x76\xd8\x75\x45\x03\x06\x6b\xa7\x44\xdd\x22\x6b\x9e\x53\x8b\x42\xa0\x5d\xf6\x0b\x91\xfb\x05\xbb\x75\x06\xf9\x76\x73\x4c\x5d\xef\xa9\xdd\x70\x5e\xb9\x29\xf7\x40\x72\xac\x7f\x3d\x3b\x5d\xdf\xa3\x5e\x58\x77\x03\x5a\xf2\xdf\x00\x00\x00\xff\xff\x64\x18\x4b\x39\x61\x1e\x00\x00")

func templates_jenkins_normal_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_normal_job_xml,
		"templates/jenkins/normal-job.xml",
	)
}

func templates_jenkins_normal_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_normal_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/normal-job.xml", size: 7777, mode: os.FileMode(420), modTime: time.Unix(1434028028, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_pipeline_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templates_jenkins_pipeline_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_pipeline_xml,
		"templates/jenkins/pipeline.xml",
	)
}

func templates_jenkins_pipeline_xml() (*asset, error) {
	bytes, err := templates_jenkins_pipeline_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1432204627, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templates_jenkins_multi_job_xml,
	"templates/jenkins/normal-job.xml": templates_jenkins_normal_job_xml,
	"templates/jenkins/pipeline.xml":   templates_jenkins_pipeline_xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"jenkins": &_bintree_t{nil, map[string]*_bintree_t{
			"multi-job.xml":  &_bintree_t{templates_jenkins_multi_job_xml, map[string]*_bintree_t{}},
			"normal-job.xml": &_bintree_t{templates_jenkins_normal_job_xml, map[string]*_bintree_t{}},
			"pipeline.xml":   &_bintree_t{templates_jenkins_pipeline_xml, map[string]*_bintree_t{}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
