// Code generated by go-bindata.
// sources:
// templates/jenkins/multi-job.xml
// templates/jenkins/normal-job.xml
// templates/jenkins/pipeline.xml
// DO NOT EDIT!

package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJenkinsMultiJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdd\x6f\xdb\x36\x10\x7f\xae\xff\x0a\xc1\x2f\x01\x06\x44\x4a\xba\x0f\x74\x80\xe2\xb6\x71\xda\xa2\x43\x9b\x78\x76\xbc\x3c\xd3\xd2\x59\x66\x4d\x89\x02\x49\xa5\xf1\x8a\xfe\xef\x3b\x7e\xc9\x94\xa5\x34\x49\x57\x0c\xcb\x4b\xc5\xfb\xe2\xf1\xee\x77\x1f\x6e\xfa\xf2\xae\x64\xd1\x2d\x08\x49\x79\x75\x76\x74\x1a\x9f\x1c\x45\x50\x65\x3c\xa7\x55\x71\x76\xb4\xbc\x7e\x7b\xfc\xe2\xe8\xe5\x64\x94\x66\xbc\x8c\x15\xdd\x12\x16\x7f\x82\x6a\x4b\x2b\x19\xd7\xac\x29\xf4\xbf\x65\xc3\x14\xfd\xc4\x57\xf1\x47\xfd\xf1\x07\x5f\xcd\x04\xff\x04\x99\x8a\xac\xc0\xd9\xd8\x29\x1c\x7b\xc1\x63\xcb\x78\x75\x1a\x9f\xfe\x3a\x9e\x8c\xa2\x28\x25\x99\xc2\xdb\x65\x62\x0e\x39\xc8\x4c\xd0\x5a\x53\x26\x69\x12\x9e\x34\x77\x0b\x50\x5f\x40\x0d\x55\x8e\x5e\x52\x90\x93\x35\x61\x12\xd2\xa4\x47\xd7\xc2\xb5\xe0\x35\x08\xe5\x8e\x48\x90\x10\xe7\x94\xac\x78\xf0\x0a\x5a\x03\xa3\x15\xc4\x33\xf7\x31\xb3\x3a\xbb\xd6\xfd\x1c\xc9\x18\x9f\xdd\xb1\x17\xf5\xfe\x9f\xc4\x2f\xe2\xdf\xc6\xd6\x32\xda\x56\x44\x6e\x2f\x49\x09\x93\x9a\x08\xc2\x18\xb0\x08\xee\x20\x6b\xb4\xe7\x69\xd2\x32\xbd\xb4\x54\xa4\x00\x43\xf9\xf2\x25\x8a\x17\xfe\x14\x7d\xfd\x9a\x26\x7b\x9e\xf5\x3a\x79\x82\xdb\xe6\xdd\x49\xf7\xe1\xa9\xcc\xca\x28\x63\x44\xca\xb3\xf1\xa6\xc9\x25\xaf\xda\xe4\x15\x54\xc5\xef\xa8\x5a\x4c\x3f\x8e\xdb\x07\x23\xed\xd5\xf3\xf8\x97\xf8\x04\xdf\xf6\xec\x19\x66\xbe\x5a\xd3\xe2\x2f\x8b\x90\xc9\xf3\x34\xe9\x12\xb4\x48\x23\x41\xcc\xa1\xe4\x0a\xa6\x86\x27\x35\xf5\x59\x3a\x70\xd7\xf2\x40\xd2\x08\xa2\x01\xc1\x4c\x1c\xd0\x95\xe5\xfc\x83\x09\x82\x26\x19\x2b\xc9\x23\xcd\xa0\xca\x90\x1b\xe9\x4a\x90\x2a\xdb\xc0\xfd\x3e\x9d\x1b\x81\x45\x0d\x99\xf3\xa6\xd2\xa1\xff\x29\x29\x89\x54\x20\xd2\xc4\x1c\x47\xf7\x78\xd2\x55\x4e\x93\xf0\xb6\x34\xa7\x92\xac\x18\x2c\x9a\x55\xc9\xf3\x86\xed\xd1\xda\x67\xd8\x4c\x0b\x04\x0c\x86\xf5\x36\xe4\x28\xd1\xa0\xc6\x10\xc7\xea\xe4\xfc\x1d\x54\x20\x88\xda\xb3\xec\xf3\x1b\xa4\xe9\xb2\x6a\x2f\x7d\x50\xd0\x1a\x24\x8d\xda\x70\x71\x25\xa6\xbc\x2c\xa9\xc2\x10\x78\x03\x7d\x86\x55\xc8\x18\x90\xca\xe4\x6f\xaa\xbf\x6e\xb8\xd8\xca\x9a\x64\x16\xcc\x96\x69\x05\x3f\x23\x58\xaf\x1a\xd5\x0a\x78\xc3\x3d\xba\x15\xaf\x45\x53\xc1\xb9\x0f\xa8\x93\xed\x12\x7d\xd8\x74\xd2\x67\x9c\x31\x2f\x15\x50\xac\x08\x2d\x2a\x2e\xe0\x92\x2b\xba\xde\x59\xff\xbd\xe8\x00\xc7\xaa\x20\x9c\x16\x1b\xac\x64\xfe\x79\xca\x78\xd5\x3a\x7b\x48\xb6\xc2\xab\x86\xb2\x7c\xba\xe1\x1c\x31\xf8\x8d\x5a\xc3\x76\xc0\xe2\x0b\x58\x13\xec\x85\xe7\x81\xca\x38\x71\x76\x50\xe8\x9a\x73\x36\x71\x32\x69\xe2\x09\xae\x81\xb5\x99\x5b\x17\xfe\x1a\x46\xa5\x6a\xf5\x05\x30\x4c\xe6\x2d\x5c\x13\x51\x80\xba\xa0\x62\xcf\x58\x83\xc0\xde\x08\x9e\x00\x77\x19\x6b\x72\xc8\xe7\x50\xb4\xcd\x37\x20\xeb\x12\x93\x81\x57\x16\x2a\xba\x2b\xf5\x88\x6f\x4a\x42\x99\xa7\xca\x2d\xad\xaf\x49\xe1\x60\xeb\x4f\x8e\x97\x95\xa1\x81\x1f\x8e\xdc\x07\xa3\x03\x77\x0a\x2a\xe9\x9e\x8b\xd5\x8a\x0e\x4d\x46\xba\x43\x66\xa4\x9a\x73\x52\x3a\xaf\xfd\xc9\x8c\x23\x5b\xaa\xf9\x41\xe9\xe6\x86\xb9\x62\x3c\xdb\x9a\x3c\xde\x6c\xa0\xba\xe0\x9f\x2b\xa9\x04\x90\xd2\x90\x70\x82\x7a\xa5\x07\xe5\xfa\xc6\x96\xf5\x63\x4c\xf5\xa4\xb4\x21\x25\x68\x51\xf8\xec\xe9\xfe\x8d\xad\x03\x53\x6f\x01\xe7\xed\x1c\x92\x47\x1e\xc4\xa8\xe8\xeb\xfa\xf1\x33\xff\xdc\x6a\xb6\xe3\xad\xde\x10\x69\x47\x98\xf9\x3a\xc1\xba\x6d\x29\x1d\x19\xd4\x95\x9e\x12\x45\xd8\x43\xb0\xb2\x0b\xc0\x89\xd8\xac\x34\x0b\x5b\x48\xcb\x7c\x8c\x3f\x33\x6f\xd3\xcf\x85\xa8\xfd\x4b\x91\xdf\x0e\x5c\xd3\x9a\x3c\x21\x14\xd2\x31\x99\xe1\x00\x2f\x7d\xe3\x0d\x08\xa1\x1c\xdc\xd5\x58\xb7\x39\x0e\x4e\x1f\xd0\x80\x12\x0a\x3a\xbc\xa0\x4f\x07\x08\xd2\x94\x50\x10\xd7\x06\x89\x19\x9c\xeb\xd6\x3e\x23\x6a\x83\xcb\x4f\x8f\x14\xca\x97\xe4\x6e\x0e\x98\x6a\xec\x82\x18\xde\xe0\xd4\x71\xb3\xd2\x57\x69\xce\x6e\xa1\x74\x01\x15\xbb\xd6\xdf\x01\x56\x5f\x15\xe3\x98\x53\xb3\x7d\x75\xd4\xf6\xe4\x50\x05\x57\x14\xa1\x5e\x33\xa6\x9f\x66\xa3\x17\x52\x3a\x61\x6e\xf5\x0d\x12\x07\x6c\x6d\x29\x63\x26\x9b\x57\x15\x2a\xcf\x41\x62\x8a\xf7\xb7\xbe\x7d\xfd\xfe\xc3\x72\xfe\x06\xf7\xbe\x6f\x8a\x85\x06\x0d\xb8\xaf\x2a\xb6\x7b\xbf\xc6\x1c\x4d\x37\x1a\x67\x6d\x87\x19\x66\x1e\x78\x6c\x57\x8a\x28\xf8\x1b\x5a\x27\x70\x87\x99\xc3\x2d\xd5\x5d\xc6\x54\x85\x01\x0f\xe0\xb4\x94\x83\x1b\x56\xc7\x1c\x22\x7c\x85\xcb\xdc\x9f\x0d\x34\x90\xdb\x61\x24\xf7\x05\x3b\xc0\xeb\xaa\x0f\x2d\x28\xf7\xbb\xd3\x79\x5e\xd2\x7b\x9f\xb9\xf1\xbb\xeb\x0d\x8b\x0c\x77\xf1\x7d\xf9\xba\x06\x10\x96\xbb\x0e\xa9\xa2\x55\x63\x5a\xf8\x3e\x67\x8b\xe5\x74\xfa\x66\xb1\x78\xbb\xfc\x60\x9c\x1a\x90\x18\x3d\xda\xbd\x81\xf6\xe4\x72\xed\xde\x9f\xd6\xcd\x0a\x27\xc4\xa6\x0d\x07\xfa\x4d\xd7\x51\x7c\x89\x93\xe2\x23\xc1\x9b\x59\xd8\x85\x70\x35\x8a\xf5\xad\x19\x76\x4d\xd1\x94\x72\x87\x0b\x62\x29\xe3\x4e\xd4\x63\x63\xbe\xdd\xcf\x5d\x2f\x8e\x6d\xec\x1d\xf5\xda\x12\x5b\x3c\x18\x95\xde\xef\x8b\x53\x44\xc8\xcf\xe3\x30\x5a\x07\x09\xfa\x91\xe0\xfb\x17\xd0\xfb\x4e\xd8\xf5\x20\x87\xfb\x80\x9f\x8b\xee\x27\xa4\xee\xce\xd2\xf4\xeb\x5e\x3e\xf4\x52\x30\x28\xed\xc0\xf1\x63\x33\xd5\x62\x23\xc0\x74\x80\x94\x0e\x46\x0e\x82\x51\xfb\x87\xd3\xbf\x21\xef\xdc\x71\x88\x82\x8e\xe4\xb1\x13\xc5\x54\x3d\xff\xfd\x09\x20\x78\xf0\xba\x81\xc1\xf8\x5f\xb4\xb6\xff\x59\x73\xb3\xff\x39\xa0\x51\xb3\xc7\x57\x8b\xac\x96\x33\x3c\xb1\x5c\x83\xba\x6f\x70\xb9\xa0\xdf\x50\xb5\xb9\xe4\x81\x43\xee\xa5\xf7\xb1\xef\x2f\xa7\x27\xa6\xf4\xe0\xb5\x4f\x37\xd7\x07\x3b\x86\xa4\xd3\x26\xed\x2c\xbd\x11\xa4\xae\xed\x9a\xf9\xa4\x66\xec\xca\x75\x32\xfa\x27\x00\x00\xff\xff\x88\x32\x71\x6b\x7c\x12\x00\x00")

func templatesJenkinsMultiJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsMultiJobXml,
		"templates/jenkins/multi-job.xml",
	)
}

func templatesJenkinsMultiJobXml() (*asset, error) {
	bytes, err := templatesJenkinsMultiJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/multi-job.xml", size: 4732, mode: os.FileMode(420), modTime: time.Unix(1443624201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsNormalJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5a\x7b\x6f\x1b\xb9\x11\xff\xdf\x9f\x62\xe1\x06\x70\x7b\xa8\x56\xb1\x2f\xb8\xdc\x01\xb2\x2e\xb6\x25\x27\xba\xca\x8a\xaa\x47\xf2\x47\x51\x04\xd4\x2e\x25\x31\xe6\x2e\x17\x4b\xae\x13\x35\xcd\x77\xef\xf0\xb9\xdc\x87\x64\x1b\x09\x0e\x08\x6a\x04\x08\xb4\x33\xc3\x21\x39\x9c\xc7\x8f\x43\xf7\x7e\xff\x9c\xd0\xe0\x0e\xe7\x9c\xb0\xf4\xfc\xe4\x34\x7c\x7e\x12\xe0\x34\x62\x31\x49\x37\xe7\x27\xcb\xc5\x75\xe7\xd7\x93\xdf\xfb\x47\xbd\x2c\x67\x1f\x71\x24\xfa\x47\x41\xd0\x43\x91\x00\x61\xde\x55\x1f\x31\xe6\x51\x4e\x32\x49\xd1\x04\xca\x36\x33\x26\x90\x60\x79\x10\x51\xc4\xf9\xf9\xf1\xb6\x88\x39\x4b\x43\x81\xf8\x2d\x0f\xc7\x8e\x7d\x2c\xc5\xa5\x06\xb4\xe3\x0b\xf6\x0f\x8c\xb3\x7e\xe7\xb4\xd7\xf5\x3e\x35\x3f\x2d\x12\x8f\x5d\x7e\x69\x2e\xca\x05\x59\xc3\x8a\x06\x55\x2d\x2d\xe4\xaa\xfc\xc4\xe9\xf1\xa4\x27\xbe\xf2\x5e\xb7\xdc\x8a\xfa\xbe\x05\xc6\x00\x67\x38\x8d\xc1\x42\x04\xf3\xfe\x1a\x51\x8e\x7b\xdd\x06\x5d\x0a\x83\xc1\x32\x0c\x6a\xf5\x27\x10\x38\x0e\x63\x82\x56\x8c\x86\x1f\x71\x7a\x4b\x52\x1e\x66\x24\xc3\x94\xa4\x38\x9c\x9a\x1f\x53\x3d\x66\x17\x64\xb4\xd8\x90\xf4\xfc\x38\x06\x32\x9c\xcd\xae\x63\x45\x3b\x9a\xf3\xea\x79\xf8\x6b\xf8\xd2\x18\x10\x74\x4b\xd3\x4e\x50\x82\xfb\x5f\xbe\x04\xe1\xc2\x7c\x04\x5f\xbf\xf6\xba\x8e\x63\x45\xb9\x40\x1b\xec\x64\xe7\xf6\x4b\x09\x97\x3c\xbd\xe4\xee\x23\xd6\xac\x2d\x56\xdd\x35\xcc\x40\xd6\x41\x38\xe2\xa3\x94\x08\x82\xe8\x1f\x6c\x05\xf3\x48\x41\x1e\x25\x35\xef\xd0\x1b\xe3\xe1\x86\x88\xf0\x35\x11\xf3\xab\x9b\x63\x67\x06\xa0\xbd\x3a\x0b\xcf\xc2\xdf\xac\xcb\x44\x2c\x5d\x93\xcd\x3b\xed\xb5\xfd\xb3\x5e\xb7\x4a\xd0\x42\x05\xc7\xf9\x0c\x27\x4c\xe0\x2b\xc5\xe5\xce\x06\x2d\x53\x2e\x6b\xc2\x56\x56\xea\xc9\xa9\xb2\x15\xac\x6a\x39\x1b\x2b\x43\x49\x92\x55\xd6\x7d\xb0\x36\x18\xd7\xbe\xa4\xde\x2a\x47\x69\xb4\xc5\x07\x57\x78\xa9\x64\xe6\x19\x8e\xbc\xb5\xa5\xf2\xb0\x7e\xea\xca\xe5\x95\x7c\xb2\x26\x38\x57\xeb\x4c\xfd\x93\x6f\x5b\x68\x5d\x69\xaf\x5b\x5d\x4a\x2f\x26\x1c\xad\x28\x9e\x17\xab\x84\xc5\x05\x2d\x9d\xbe\xc9\xd0\x03\x72\x1c\x15\x70\x0a\x77\x3e\x47\xe4\x05\x8c\x68\xe3\x98\x49\xd8\x6b\x9c\xe2\x1c\x89\x92\xa5\xed\x53\x00\x4d\xa6\x1a\x37\xe9\xbd\x82\x26\xc8\x0b\xb1\x65\xf9\xdb\xfc\x8a\x25\x09\x11\x02\xe7\x56\x41\x93\x61\x1c\x8a\x62\x94\xaa\x53\xbe\x92\xbf\xde\xb3\xfc\x96\x67\x28\xd2\x61\xa1\x99\x5a\xf0\x13\xb8\xfd\xdb\x42\x38\x01\xab\xb8\x41\xd7\xe2\x59\x5e\xa4\xf8\xd2\x9a\xd4\xc8\x56\x89\xd6\x6c\xd2\x2b\xa6\x8c\x52\x2b\xe5\x51\xb4\x08\xd9\xa4\x2c\xc7\x13\x06\xa9\x6a\xa7\xd7\x6f\x45\x5b\x38\x2e\x04\xe6\x5b\x44\x29\xfb\x74\x45\x59\xea\x16\x5b\x27\x1b\x27\x2c\x08\x8d\xaf\xb6\x8c\x81\x93\x1e\x08\xce\x42\x10\x1a\x0e\xf0\x1a\x15\x54\x5c\x7a\x43\x8e\xbb\x46\x0f\x08\x2d\x18\xa3\x7d\x23\xd3\xeb\x5a\x82\xc9\x83\xee\xe4\xd6\x1b\x3b\x0d\x25\x5c\xb8\xf1\x39\xa6\x70\x98\x77\x78\x81\xf2\x0d\x16\x03\x92\x97\x8c\x35\xce\x21\xc5\x62\x4b\xc0\x9f\x23\x5a\xc4\x38\x9e\xe1\x8d\x2b\x48\x1e\x59\x46\x21\xf7\x56\xa5\x5d\x45\xe6\xb7\x06\x71\x98\x20\x42\x2d\x95\xdf\x92\x6c\x81\x36\xc6\x6d\xed\x97\x39\x84\xb4\x32\x65\xdf\xa4\x38\x79\xee\x50\x31\x61\xb1\xe0\x31\xd2\x8d\xea\x04\x28\x0e\xca\x97\xea\xe3\xcd\x8c\x51\xe2\x2f\xeb\xbb\xc7\xc3\xbd\x36\xc7\x9f\x05\x4e\x79\x59\xd5\xbb\xb0\x22\xf5\x43\xe4\x64\xb3\x01\x33\x6a\x39\xb3\xdb\x65\xc6\x45\x8e\x51\x02\xf9\x9c\xeb\x84\x0e\x92\xb6\x42\xd8\x11\xe1\x0c\x4b\x58\x81\x95\x8f\x2c\x34\xb1\xac\x42\x90\x71\xba\xee\xab\x30\xfa\xa6\x1a\x64\x28\xab\xd6\x27\x01\xaf\xad\x4b\xb9\xea\xb7\xcd\x31\xdf\x32\x1a\xd7\x13\xe3\x7c\x79\x75\x35\x9c\xcf\xab\x79\x10\x98\x2c\x07\x78\x83\x68\xff\x79\xaf\x6b\x7f\x96\xcc\x88\x51\xa8\xf7\x97\xe3\xe5\x50\x96\x15\xca\xf2\x0a\x2f\xc9\x28\x16\x7a\x4f\xc6\x3f\xaa\x34\x97\x6c\x6b\x8b\xea\x75\x1f\x6e\x1f\xe7\x2e\xbe\xcd\x8d\x04\x8e\x6f\x50\x5a\x40\xec\xee\x8c\x5f\x81\x1f\xb8\x23\xb0\x40\xcb\xce\x00\x45\xb4\xcd\xf0\xfd\x9f\x02\xf3\x0f\xce\xd9\xab\x27\x26\xc3\x4c\x19\x17\x3a\x8b\xbc\x61\xec\x96\x57\x93\x4c\x9d\x79\x54\x29\x2d\x7b\x67\xf6\xb7\x04\xb6\xf1\x9c\x4a\xa7\x9d\xf7\x39\xca\x32\xe7\x66\xf5\xf2\x87\xc0\x35\xd5\x51\x84\x17\xf0\xeb\x4a\xfe\xba\xf4\x46\x39\x9c\xe0\xe4\x00\x1f\xbd\x08\x9f\x97\xf8\x48\x11\x6f\x50\xa6\xb0\x0d\xb8\x7a\x9e\x98\xb3\xb5\xb4\xa3\xd6\x0a\x79\xcf\xbc\x0f\x07\x76\x06\x98\x40\x6c\xc2\xd6\x57\x85\xc4\xc6\x8f\x85\x78\x06\xa2\x2f\x30\x78\x1b\xc4\x7b\xff\xd9\x97\xcb\xe5\x68\x3c\xf8\x30\x59\xde\x5c\x0e\x67\x5f\x3b\xcf\xbe\xbc\x1e\x2d\x3e\xcc\x86\xef\x46\xf3\xd1\xdb\xc9\xdf\x29\x4e\x37\x62\x7b\xfe\x12\xe2\xa6\x3e\xb2\x8c\xba\x18\x3e\x07\x84\x03\x79\xa7\xac\xa0\x1d\xba\x49\x7f\x38\x1a\x6c\x6e\xb4\xfd\x44\x05\x49\x30\xa0\xcd\x04\xac\x18\x2e\xca\xdf\xad\xa7\xea\xc9\xbe\x3a\x0d\x7f\x09\xcf\x8e\x4d\x8e\x6a\x78\x4e\x25\x1e\x7e\x28\x8c\xa9\x12\x54\x23\x4f\x41\xc1\x53\xf1\x29\xc1\xc0\x9a\x57\x91\xdf\x13\x2a\x7d\x42\xa5\x4f\xa8\xf4\x09\x95\xea\x43\x48\x5b\xa7\xf4\x61\x65\x09\xe9\x7e\xec\x82\xbb\x27\xed\x6b\x70\x51\xf6\x1c\xe6\x14\xdd\xe1\x31\x5a\x61\x6a\xaa\x01\x9c\x28\x38\x24\x8e\x27\x2c\x36\xad\x0f\x5f\x02\x62\xd0\xe7\x1f\xd5\x10\x4b\x84\xd2\x19\x43\x89\xf5\x54\xfb\x79\x54\xa6\xa2\xb8\x96\x81\x62\x6d\x6a\xca\xa2\x5b\xbd\x83\x2d\x4e\x07\xec\x53\xaa\x21\xac\x22\xc1\xf5\xc0\x0e\xba\x57\xae\xa9\xcc\xc2\xe3\xc3\xaa\x1a\x52\x47\xba\xb2\x41\xce\x03\x9f\xd5\x91\xe2\x76\x55\x23\x1f\x1d\xc0\xfb\x8f\x40\xfb\x3e\xd6\xff\x26\xa4\xdf\xc4\xf9\x07\x50\xfe\x01\x8c\xbf\x1f\xe1\x3f\x14\xdf\xd7\xd0\xfd\xc3\xb1\x7d\xc5\xa9\x94\x1f\xfb\x57\x2b\xc8\xbd\x1b\x1c\x84\x17\xb6\x75\x89\xb3\x3a\xb2\xb7\x71\x12\xb1\x6c\x67\x7b\x96\xe1\x15\x7c\xd8\x31\x2e\x32\x7d\x09\x40\x4d\x3f\x9f\x85\xa7\x65\x74\xda\x66\xae\x34\xbe\xb1\xb1\x0c\x4a\x85\x10\xd5\x01\x78\xdd\x5e\x35\x60\x4d\xa8\xac\x4a\x52\xde\xcd\x24\xe5\x0c\xdd\x5d\xc4\x54\x6e\x2c\xef\x75\x26\xe5\xf1\x92\xc2\x31\x05\xbd\x8d\xd6\x70\xeb\xbe\xdc\x8d\x47\x59\x71\x6e\x46\x1e\x7b\x38\x03\x1c\x97\xae\x50\x74\xbb\x60\x63\xc4\xc5\xbc\x88\x22\xcc\xf9\xba\xa0\xe6\xe4\xf6\xb2\x3d\x14\x65\x3c\xed\x5a\x6d\x64\x2e\x64\x11\xdf\xec\xfa\x90\xa3\x5f\x53\xb6\x42\x74\x8e\x85\x80\xb0\x29\x5d\xb2\x26\xe8\x50\x8c\xdd\x98\xa3\xc4\x0c\x2a\xdf\x35\x8c\xc5\x79\x96\x93\x54\x58\xbb\x79\xa8\x61\x9f\x40\x7b\x6e\xdc\x7b\xe6\x6d\x97\xc6\x5e\xa5\xe7\x3e\xdf\x62\xea\xbb\x7f\x92\xa0\x14\x3c\xf7\x2f\x81\xc5\xef\x41\x04\x7b\x93\xc7\x92\xa0\x0d\x89\x8e\xf0\xe7\x8c\xe5\x22\x98\x8e\xa6\xc3\xf1\x68\x32\x34\x77\x8c\xf3\x67\x7f\xc5\xd1\x96\x05\xc7\xcf\xbe\x38\xce\xbb\xe1\x4c\x5e\x37\xbe\x1e\x07\xff\x0d\xa2\x42\x04\x9d\xf5\x69\xd0\x89\x4f\x3a\x27\x7f\xb3\x4a\xe4\xad\x64\xfe\xe6\xe2\x61\x83\xcf\xcc\xe0\xf6\xc6\xb1\x07\xef\xa1\x44\x06\x10\x81\x18\x06\x75\xb6\x28\x8f\x03\x7d\xfd\x81\x89\xca\x66\xcb\x91\x02\x4e\x7a\xb3\xd6\x2e\xd2\xae\x6e\xff\x15\x33\xd7\x2c\x65\xca\x8c\xbd\xa4\x66\xc5\x0a\xd0\xc0\xb6\xde\x08\xb9\x48\xe3\x9c\x91\x78\x0c\xc7\x17\x4e\x91\x44\x6e\xa9\x3b\x01\x96\x6f\xec\x3d\x29\x22\x5e\x85\x53\x23\x3e\x7c\xa0\x72\x8c\x1c\x38\xb5\xaa\xbd\xaa\xaa\x64\x3a\x52\x44\xde\x49\xca\xc0\xdd\x62\x44\xc5\x76\xe7\x75\x4e\xd2\x37\x75\x92\x4b\x4d\x63\x22\x21\x17\xc0\x29\x2f\x5d\x69\x9a\xcb\x03\x6a\x42\x55\x8f\xff\xe5\x4f\xfa\x6f\xc8\x00\x25\xcb\x79\xb4\x46\x4e\x43\xf3\x3a\x54\xce\x28\xcb\x61\x91\xbe\x4d\xaf\x01\xad\x94\x85\xb0\x46\x75\x2b\xe6\x78\x9a\xe3\x3b\xc2\x0a\xae\xe2\xfa\x82\xcf\x2c\x80\xf2\x80\xe0\x5e\x11\x4f\xcd\x5c\xc8\x42\x7b\x40\xc9\x1e\x01\x4f\xc5\x00\x53\x81\xde\x21\x5a\x94\x30\xb8\x46\x6d\x58\x95\x7b\xc7\x84\xe8\x8e\x13\xde\x89\x00\xe6\x42\x8e\x7d\xe9\x1d\x54\x01\x05\x5c\x4e\xbe\x60\x02\xd1\x0b\x4a\xbb\xed\x9c\x37\x64\xb3\xdd\xc3\x9a\xb0\x3c\x41\xfb\xc6\x8d\xd9\xa7\x92\xb3\x56\x06\x6e\xce\xe4\xd1\xe5\x3c\x3a\x7b\x7b\x0e\x7b\x5d\xe5\xeb\x84\x5e\x1b\xd3\xa2\x4b\x2f\xec\x90\x36\x2d\x51\xd7\x67\xc6\xb5\x68\xac\xec\xa6\xf4\xd5\xd2\xf8\xf0\x59\xd0\x78\x00\x45\x38\x12\x37\xd5\x0b\x5f\x1b\xab\x4c\xc1\xa9\xec\x55\x65\x85\xc0\x13\xfc\xc9\x14\x85\x1a\xb1\x92\xae\x67\x98\x33\x7a\x87\x67\x06\xea\x43\x44\x6f\xab\xe9\xba\x55\xc0\x45\x93\x4e\x00\x0d\xcb\x94\x89\x01\xc2\xca\xc8\x98\xdc\xf3\xe8\x1c\x71\xa0\x41\x08\xa5\x24\x5e\x15\x1b\x6e\xe7\xdb\x03\x1d\xd6\x56\x4c\xca\x5f\xc2\x8f\x66\xfe\xb1\x22\xaf\x5e\x84\xbf\x9c\xfe\x29\xc9\xe7\x7a\x34\x19\x5c\x2e\x5f\xcf\x9f\x12\xcf\x37\x26\x9e\x43\xa9\xe7\x60\xf2\xb9\x27\xfd\x1c\x4a\x40\xfb\x53\x50\x33\x09\xed\x61\x35\x67\xfb\x61\xd2\x83\x1d\xf6\x98\xec\xd0\x0c\xd5\x5a\x66\x90\x57\x7a\x3e\x43\xe9\xed\x45\x04\x9a\x00\x6a\x3a\xe7\xae\x93\x6b\x50\xdb\x28\x2c\xed\x65\x3a\x03\x55\x7a\x03\x5b\xee\x4f\x0a\x07\x12\xce\x34\x89\x1b\xa0\xa7\xa6\x37\x93\x22\x49\xdc\x4c\x31\xc0\x78\xf5\x73\xf8\xe2\xf9\x9f\x92\x5d\xa6\x37\x83\xa7\xc4\xf2\x94\x58\xfe\x0f\x12\x4b\x35\x24\x1b\x70\xe3\x9e\xe8\xec\x1f\xed\x0f\xf6\x05\xe6\xb0\x0c\x79\xa3\xe3\xed\x77\xcc\x8f\x05\x5c\xd5\xc2\x3f\x96\xf0\x3f\x2c\x17\xa2\xea\x22\x8f\xb6\xf2\x65\xcb\x79\x97\x92\x00\xaf\xf2\x82\x5e\x28\xad\x52\x5a\x77\x82\xaa\xb3\xc0\x99\x78\x7c\x3b\x46\xfe\xb5\xd5\x98\xa5\x9b\xb9\x88\x09\xf3\xff\x04\xab\x24\xfa\xea\x07\x48\x20\xb7\x43\xaf\x13\xa1\xf3\xcd\x3c\x42\x14\x5f\x23\x75\x73\x87\x95\x81\x89\x1a\xe4\xb6\x6b\xe2\xde\xcd\x1e\x48\x97\xba\x11\xde\x6e\xbc\x1b\xe9\x94\xa5\xa5\x12\xf5\x09\xa6\x3a\xf5\x6c\x95\xe3\x88\x64\x04\xa7\xc2\xdb\x84\x74\x2a\xad\x77\x28\xdf\x10\x97\x26\x92\xfc\xf6\xd5\x41\x91\xb2\x2d\x93\x42\x48\x8c\xd2\x98\xdc\x91\xb8\x00\x93\xda\x2e\x73\x83\xde\x66\x0d\xbd\xfa\x03\x5b\xf7\x7a\x46\x2d\x9b\xb7\xdc\xaa\x0d\x83\xf2\x4f\xf5\x78\xb3\xf1\x84\xaa\xcd\x12\x79\xdd\x4e\xe9\x6e\xb4\x6e\xf4\x80\x1a\x64\x2b\x2f\x9f\x42\xb9\x78\x0b\x6c\x23\xe9\x11\xdc\x02\xe4\x63\xc4\x30\xc9\xc4\xce\xac\xcd\x3d\xd8\x34\x18\x6d\x76\x69\xdf\x58\xbb\x73\xe0\xcf\x42\x3f\xec\x57\xfe\xa6\x02\x15\x61\xc4\x92\x30\x82\x53\xcf\x8b\x84\xef\xb8\xc0\x09\x0f\x2b\x61\x1c\xaa\x3e\x85\x7b\x88\x35\x1d\xc8\x50\x9d\xaf\x7d\x95\x35\x9d\x34\xe7\x5f\x6a\x48\xe3\xc1\xf9\x34\x7c\x11\xfe\xec\xb7\xf0\x2b\x0f\x9a\xcd\xe2\x6e\x5e\x51\x67\x50\xd7\xe4\x8b\xa8\x9e\x11\xe5\x50\x60\x21\xe7\xf0\xda\xc3\xaa\xff\x3a\x60\xd4\x27\x2b\x98\xfc\x9f\x05\x2e\x70\xac\x9f\x87\x78\xd9\x89\x6e\xe1\x95\xeb\x68\x7b\x32\xdc\xbf\x90\xbe\xd7\xf8\xa9\x3e\xd1\xc6\xae\xcf\xee\x35\x41\xb5\xb3\x35\xce\x43\x06\x52\xab\xb4\x39\xf8\xef\x7b\x52\xf7\x78\x4a\xc5\x47\xea\x49\xdd\x6e\x9c\xfc\x07\xc7\x95\x39\xea\x5e\x50\x91\xec\x18\x51\xd9\x6f\xfa\xed\x11\x4e\x70\xef\x74\xf5\xa7\xee\x36\xa5\xdf\xdd\xbb\xbe\xd1\xc3\xbe\xc1\xcb\x5a\x3d\x4d\x11\x33\xff\xc9\xc3\x3b\x45\xd7\x6d\xe7\x75\x23\xc5\x44\xbe\x1e\x97\xef\x1b\x25\xc9\x17\x34\x46\x7f\x4f\xc4\x76\xc2\xbc\x05\x99\x9d\xee\x63\xef\x0f\xa7\x47\x1e\x69\x6d\xb7\x8f\x57\xd7\x74\x76\x30\x89\xd7\x6f\xf5\x9e\x23\xfe\x17\x00\x00\xff\xff\xbf\x0e\xfe\x74\xae\x2e\x00\x00")

func templatesJenkinsNormalJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsNormalJobXml,
		"templates/jenkins/normal-job.xml",
	)
}

func templatesJenkinsNormalJobXml() (*asset, error) {
	bytes, err := templatesJenkinsNormalJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/normal-job.xml", size: 11950, mode: os.FileMode(420), modTime: time.Unix(1444133735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsPipelineXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templatesJenkinsPipelineXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsPipelineXml,
		"templates/jenkins/pipeline.xml",
	)
}

func templatesJenkinsPipelineXml() (*asset, error) {
	bytes, err := templatesJenkinsPipelineXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1443542096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templatesJenkinsMultiJobXml,
	"templates/jenkins/normal-job.xml": templatesJenkinsNormalJobXml,
	"templates/jenkins/pipeline.xml":   templatesJenkinsPipelineXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"jenkins": &bintree{nil, map[string]*bintree{
			"multi-job.xml":  &bintree{templatesJenkinsMultiJobXml, map[string]*bintree{}},
			"normal-job.xml": &bintree{templatesJenkinsNormalJobXml, map[string]*bintree{}},
			"pipeline.xml":   &bintree{templatesJenkinsPipelineXml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
