package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_jenkins_multi_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x56\x4d\x73\xdb\x36\x10\xbd\xfb\x57\x70\x74\xf1\x49\x90\x9d\x36\x9d\x1c\x68\xe5\x43\x89\x67\xd2\x89\x15\x8d\x14\x8d\xcf\x10\xb9\x96\x60\x81\x00\x07\x00\x5b\xa9\x99\xfc\xf7\x2e\x40\x00\x04\x4d\xa5\xb5\xc6\x39\x99\xd8\x2f\x2c\xde\xbe\x7d\x72\xfe\xf6\x50\xf1\xec\x2f\x50\x9a\x49\x71\x73\x79\x4d\xae\x2e\x33\x10\x85\x2c\x99\xd8\xde\x5c\xae\xbf\xdd\x8e\xdf\x5c\xbe\x9d\x5e\xe4\x85\xac\x88\x61\x7b\xca\xc9\x23\x88\x3d\x13\x9a\xd4\xbc\xd9\xda\xbf\x55\xc3\x0d\x7b\x94\x1b\x72\x67\x3f\xfe\x94\x9b\x85\x92\x8f\x50\x98\xac\x0d\xb8\x19\xf9\x84\x71\x08\x1c\xb7\x8e\x77\xd7\xe4\xfa\xf5\x68\x7a\x91\x65\x39\x2d\x0c\xde\xae\x27\xee\x50\x82\x2e\x14\xab\xad\x65\x9a\x4f\xd2\x93\xf5\xee\x01\xea\x8f\x50\x83\x28\xb1\x4b\x06\x7a\xfa\x40\xb9\x86\x7c\x32\xb0\xdb\xe0\x5a\xc9\x1a\x94\xf1\x47\x34\x68\x20\x25\xa3\x1b\x99\xbc\x82\xd5\xc0\x99\x00\xb2\xf0\x1f\x8b\x36\xe7\x18\xdb\x2f\xd1\x8c\xf8\x1c\xc7\x21\x34\xf4\x7f\x45\xde\x90\x3f\x46\x6d\x65\xac\x6d\xa8\xde\xcf\x69\x05\xd3\x9a\x2a\xca\x39\xf0\x0c\x0e\x50\x34\xb6\xf3\x7c\x12\x9d\x21\x5a\x1b\xba\x05\x67\xf9\xfe\x3d\x23\xab\x70\xca\x7e\xfc\xc8\x27\x9d\xaf\xed\x7a\x72\x46\xdb\xee\xdd\x93\xfe\xc3\x73\x5d\x54\x59\xc1\xa9\xd6\x37\xa3\x5d\x53\x6a\x29\x08\x5a\xc8\xbc\xe1\x7c\x35\xbb\x1b\xb5\xb0\x17\x54\x2c\x25\xad\xa6\x46\x35\x08\x67\x38\xb9\x81\x30\x4d\x37\x1c\xca\x00\x75\x3c\x5b\xe7\x86\xcb\x62\xff\xa1\x61\xbc\xbc\xdf\x81\xf8\x28\xff\x16\xda\x28\xa0\x95\x33\x21\x87\x42\xd2\xff\xc6\x0d\x8b\xad\xeb\xe7\x94\x1a\x44\xd9\x42\x46\xb1\xed\x16\x39\xed\x9f\x26\x45\xd1\x28\x05\xc2\xb8\xa0\x50\xe7\xa9\xd9\x75\x60\xbf\x30\xd1\x23\x7f\x06\xeb\x3f\xb4\x99\x71\xc0\xf5\x8e\xea\x76\x88\xee\xeb\x0a\x87\x12\x2d\xbd\x18\xcc\xd5\xc1\x92\x65\xc8\x06\x45\xc5\x16\x90\x13\xcd\xc6\xba\x90\x11\xd1\xf9\x9c\x7e\x16\xa1\xe6\x4c\x8a\x07\xb6\xed\x2a\x63\x3a\xfa\x23\xe5\x1c\xd3\x82\x21\x0d\xb2\x98\x2c\x90\xc2\x95\x0e\x5c\xe8\x0c\x69\x1c\x1c\x6a\xa9\xa1\x44\x06\x05\x40\x13\x4b\x1a\xe8\xf9\x82\x3d\x3d\x61\x90\xb5\xa4\x81\xb8\x38\x1a\x27\xb8\x6c\x38\xe8\x05\x35\x3b\x5c\xff\x81\x29\x8d\xaf\xe8\x61\x09\x38\x6a\x64\x39\xc2\x9b\x9c\x7a\x6d\x0a\x7b\x95\xf5\x1c\x57\x46\x51\x03\xdb\x63\xec\xf7\x84\x6b\x98\x8a\x38\x96\xcc\xe9\x4f\x2f\xad\x33\xa7\x29\xb8\xa4\xca\xbc\xe7\xdc\x3e\xad\x45\x2f\xb5\xf4\x60\x8e\xf9\x8e\x89\x27\x6a\xed\x19\xe7\x6e\x9a\x5f\x05\x26\x2f\x41\xe3\x88\xbb\x5b\x6f\xdf\x7f\xfe\xb2\x5e\x7e\x42\xe5\xfb\xcf\xb0\xb4\xa0\x23\xf7\x57\xc1\x8f\x9f\x1f\x70\x46\xb3\x9d\xe5\x59\x14\xd0\xd3\xce\x8e\x7a\x93\x97\x70\x0f\x09\x87\xca\xdc\x51\xd9\x2f\x43\x4a\x7d\x0b\x88\x61\xa2\xa1\xb6\xed\xae\xff\xd5\x7a\x36\xfb\xb4\x5a\xdd\xae\xbf\x38\x98\x4e\x44\x5c\x3c\xbb\xbd\x13\xab\xea\xdf\xed\x37\x3e\xaf\x9b\x0d\x67\x7a\x17\x05\x00\xfb\x66\x0f\x19\x99\xc3\xc1\xdc\x51\xbc\x99\xa7\x1b\x99\xd3\x86\xd8\x5b\x0b\x54\x10\xd5\x54\xfa\xa8\x0d\x54\x9a\x78\x85\x6d\x6f\x27\xae\x7c\x54\x6b\xaf\x4b\xc4\x75\x10\xa4\xfb\x5b\x6b\x8c\x3f\x38\x2e\x65\xf0\x6b\x73\x4d\x7e\x27\xbf\x8d\x52\xb4\x10\xe1\x56\xe0\xda\x2d\x8b\x92\xea\x7f\x7f\xed\x62\x6b\xb7\xea\x83\xf6\x71\x03\x4f\x47\x7b\x2c\x7f\xed\xc3\x22\x94\x09\x05\x3a\x99\xb3\xcd\xf5\x50\xed\x5d\x83\x53\xb4\xca\x03\x06\x14\xfb\x07\xca\xde\x35\x4f\x71\xeb\x45\x8e\x7d\xe8\xbb\x57\xe4\xd5\xeb\x01\x6c\x09\xaf\xcf\xbd\xee\x84\xac\x0e\x8a\x3e\xbb\xf0\x5c\x96\xb0\x08\x8e\x6e\x98\x81\xd1\x83\xb2\xf6\x3f\x1a\x3b\x2d\xdd\x49\x78\xb4\x9c\x16\x17\xbf\x3f\x3f\xd3\x18\xdf\xc8\x3d\x33\xbb\xb9\xec\x3a\x09\xa2\xf0\x33\x77\x22\x0b\x2f\xc3\xef\xc9\x2b\xcf\x2f\x37\x24\x17\x42\xd2\xdb\xe2\x56\xf6\xee\x15\xad\xeb\x16\xe3\xb3\xb4\xc2\xaf\xc7\xf4\xe2\xdf\x00\x00\x00\xff\xff\x09\x99\x6b\x44\x29\x0b\x00\x00")

func templates_jenkins_multi_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_multi_job_xml,
		"templates/jenkins/multi-job.xml",
	)
}

func templates_jenkins_multi_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_multi_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/multi-job.xml", size: 2857, mode: os.FileMode(420), modTime: time.Unix(1423172303, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_normal_job_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x58\xdd\x6f\x1b\xb9\x11\x7f\xd7\x5f\xb1\x70\x03\xb8\x3d\x54\xab\xd8\xd7\xe2\xae\x80\xac\x4b\x2c\x2b\x39\xb5\xb6\x62\x58\x52\xf2\x78\xa0\x76\x47\x12\xcf\xdc\xe5\x82\xe4\x3a\x56\xdd\xfc\xef\x1d\x2e\x3f\x96\xfb\x61\xc7\x46\xf3\x72\x45\xa0\x17\xed\xcc\x70\x38\x9c\xcf\x1f\x39\xfe\xe5\x3e\x63\xd1\x1d\x08\x49\x79\x7e\x76\x7c\x12\xbf\x3e\x8e\x20\x4f\x78\x4a\xf3\xdd\xd9\xf1\x7a\xf5\x6e\xf8\xf3\xf1\x2f\x93\xc1\xb8\x10\xfc\x77\x48\xd4\x64\x10\x45\x63\x92\x28\x14\x96\xa3\xea\x23\x05\x99\x08\x5a\x68\x8a\x21\x30\xbe\xbb\xe1\x8a\x28\x2e\xa2\x84\x11\x29\xcf\x8e\xf6\x65\x2a\x79\x1e\x2b\x22\x6f\x65\x7c\xe9\xd9\x47\x5a\x5c\x6b\x20\x07\xb9\xe2\xff\x02\x28\x26\xc3\x93\xf1\x28\xf8\x34\xfc\xbc\xcc\x02\x76\xfd\x65\xb8\x44\x28\xba\x45\x8b\x2e\x9a\x5a\x7a\xc8\x4d\xf9\x85\xd7\x13\x48\x2f\x42\xe5\xe3\x51\x7d\x94\xea\xfb\x16\x19\x17\x50\x40\x9e\xa2\x87\x28\xc8\xc9\x96\x30\x09\xe3\x51\x87\xae\x85\xd1\x61\x05\xa0\x5a\xf3\x89\x04\x09\x71\x4a\xc9\x86\xb3\xf8\x77\xc8\x6f\x69\x2e\xe3\x82\x16\xc0\x68\x0e\xf1\xb5\xfd\x73\x6d\xd6\x1c\xa2\x82\x95\x3b\x9a\x9f\x1d\xa5\x48\xc6\xd8\x1c\x86\x4e\x74\x68\x38\x6f\x5e\xc7\x3f\xc7\x3f\x59\x07\xa2\x6e\xed\xda\x05\xc9\x60\xf2\xf0\x10\xc5\x2b\xfb\x11\x7d\xf9\x32\x1e\x79\x8e\x13\x95\x8a\xec\xc0\xcb\x2e\xdd\x57\x25\x5c\xf3\x8c\xc9\xa3\x17\xd8\x6c\x3c\xd6\x3c\x35\xee\x40\xb7\x51\x3c\x97\xf3\x9c\x2a\x4a\xd8\x3f\xf9\x06\xf7\xd1\x82\x32\xc9\x5a\xd9\x61\x0e\x26\xe3\x1d\x55\xf1\x7b\xaa\x96\xd3\xab\x23\xef\x06\xa4\xbd\x39\x8d\x4f\xe3\x7f\xb8\x94\x49\x78\xbe\xa5\xbb\x8f\x26\x6b\x27\xa7\xe3\x51\x93\x60\x84\x4a\x09\xe2\x06\x32\xae\x60\x5a\x71\xa5\xf7\x41\xcf\x96\xeb\x96\xb0\x93\xd5\x7a\x04\xab\x7c\x85\x56\xad\x6f\x2e\x2b\x47\x69\x92\x53\x36\x7a\xb6\x36\x5c\xd7\x6f\xd2\x78\x23\x48\x9e\xec\xe1\x49\x0b\xcf\x2b\x99\x65\x01\x49\x60\x5b\xae\x83\xf5\xc3\x48\x9b\x57\xf3\xe9\x96\x82\xa8\xec\xcc\xc3\xc8\xf7\x19\xda\x56\x3a\x1e\x35\x4d\x19\xa7\x54\x92\x0d\x83\x65\xb9\xc9\x78\x5a\xb2\x3a\xe9\xbb\x0c\xb3\x40\x40\x52\x62\x14\xee\x42\x8e\x12\x25\xae\xe8\xe3\xd8\x4d\xf8\x7b\xc8\x41\x10\x55\xb3\x8c\x7f\x4a\xa4\xe9\x56\xe3\x37\xfd\xaa\xa0\x2d\xf2\x52\xed\xb9\xf8\x20\xa6\x3c\xcb\xa8\x52\x20\x9c\x82\x2e\xc3\x26\x14\x03\x92\x57\x51\x9e\xea\x7f\x9f\xb8\xb8\x95\x05\x49\x4c\x59\x18\xa6\x11\xfc\x8c\x69\xff\xa1\x54\x5e\xc0\x29\xee\xd0\x8d\x78\x21\xca\x1c\xce\x9d\x4b\xad\x6c\x93\xe8\xdc\xa6\xb3\xe2\x9a\x33\xe6\xa4\x02\x8a\x11\xa1\xbb\x9c\x0b\x58\x70\x6c\x55\x07\x63\xbf\x13\xed\xe1\xf8\x12\x58\xee\x09\x63\xfc\xf3\x94\xf1\xdc\x1b\xdb\x26\xdb\x24\x2c\x29\x4b\xa7\x7b\xce\x31\x49\x9f\x28\xce\x52\x51\x16\x5f\xc0\x96\x94\x4c\x9d\x07\x4b\x8e\x46\x56\x0f\x0a\xad\x38\x67\x13\x2b\x33\x1e\x39\x82\xed\x83\x3e\x72\xdb\x9d\xdb\x86\x51\xa9\xfc\x7a\x01\x0c\x83\x79\x07\x2b\x22\x76\xa0\x2e\xa8\xa8\x19\x5b\x10\xd8\x62\xc1\x11\xe0\x3e\x61\x65\x0a\xe9\x0d\xec\xfc\x40\x0a\xc8\xba\x0a\x65\x60\x95\x49\x15\xdd\xdf\x3a\xc4\x59\x46\x28\x73\x54\x79\x4b\x8b\x15\xd9\xd9\xb4\x75\x5f\x36\x08\x79\x63\xcb\x89\x6d\x71\x3a\xee\x38\x31\xd1\x58\xcc\x18\x9d\x46\x6d\x02\x0e\x87\x2a\x97\xda\xeb\xed\x8e\x49\x16\x9a\xf5\xcd\xeb\xe1\xab\x3e\x87\x7b\x05\xb9\xac\xa7\xfa\x08\x2d\xaa\xfe\x28\x41\x77\x3b\x74\xa3\x91\xb3\xa7\x5d\x17\x52\x09\x20\x19\xf6\x73\x69\x1a\x3a\x4a\xba\x09\xe1\x56\xc4\x37\xa0\x61\x05\x54\x39\xb2\x32\xc4\x7a\x0a\x61\xc7\x19\xf9\xaf\xd2\xea\xbb\x36\x20\xa3\xf2\x6a\x7b\x13\xcc\xda\xb6\x94\x9f\x7e\x7b\x01\x72\xcf\x59\xda\x6e\x8c\xcb\xf5\x74\x3a\x5b\x2e\x9b\x7d\x10\x99\x5c\x20\xbc\x21\x6c\xf2\x7a\x3c\x72\x7f\x6b\x66\xc2\x19\xce\xfb\xf3\xcb\xf5\x4c\x8f\x15\xc6\x45\x83\x97\x15\x0c\x94\x39\x93\xcd\x8f\x26\xcd\x37\xdb\x96\x51\xe3\xd1\xf3\xfd\xe3\xd3\x25\xf4\xb9\x95\x80\xf4\x8a\xe4\x25\xd6\xee\xc1\xe6\x15\xe6\x81\x0f\x81\x03\x5a\x6e\x07\x1c\xa2\x7d\x8e\x9f\xfc\x10\xd9\x1f\xc6\x39\x98\x27\xb6\xc3\x5c\x73\xa9\x4c\x17\xf9\x95\xf3\x5b\xd9\x6c\x32\x6d\xe6\xa0\x31\x5a\x1e\xdd\x39\x3c\x12\xfa\x26\x48\x2a\xd3\x76\x3e\x09\x52\x14\x3e\xcd\xda\xe3\x8f\x60\x6a\x56\xa1\x88\xdf\xe2\xbf\xa9\xfe\x77\x1e\xac\xf2\x38\xc1\xcb\x21\x3e\xfa\x5b\xfc\xba\xc6\x47\x15\xf1\x8a\x14\x15\xb6\xc1\x54\x17\x99\x8d\xad\xa3\x0d\x7a\x27\xe4\x57\xf6\x7d\x3e\xb0\xb3\xc0\x04\x6b\x13\x8f\xbe\x29\x35\x36\x7e\x29\xc4\xb3\x10\x7d\x05\x98\x6d\x58\xef\x93\x57\x0f\xe7\xeb\xf9\xe5\xc5\x6f\x8b\xf5\xd5\xf9\xec\xe6\xcb\xf0\xd5\xc3\xfb\xf9\xea\xb7\x9b\xd9\xc7\xf9\x72\xfe\x61\xf1\x57\x06\xf9\x4e\xed\xcf\x7e\xc2\xba\x69\xaf\xac\xab\x2e\xc5\xcf\x0b\x2a\x91\x7c\xa8\xbc\x60\x12\xba\x4b\x7f\x3e\x1a\xec\x1e\xd4\xb4\x93\x4e\x90\x1b\xa9\xfb\x87\x82\x83\x55\x2f\xe9\xb4\x14\x9c\x4d\x55\x29\xe9\xb9\xbd\x95\x4d\x90\xf6\x1d\x40\x7e\x07\x90\xff\x27\x00\xd2\x76\x88\xef\xf8\xf1\x1b\xe1\xc7\x51\x0f\x00\xac\xc1\xd7\x1f\x7b\x34\x3e\xd2\xf5\x0d\x0c\xa8\x5f\x07\x96\x8c\xdc\xc1\x25\xd9\x00\xb3\xc3\x00\x23\x8a\xf9\x08\xe9\x82\xa7\xf6\x91\x22\x94\xc0\x12\x0c\xf9\x83\x16\xb6\x48\x48\x7e\xc3\x49\xe6\x12\xdb\x7d\x0e\xea\x4e\x94\xb6\x1a\x50\x6a\x5c\xcd\x78\x72\x6b\x4e\xb0\x87\xfc\x82\x7f\xce\x0d\xd8\xac\x48\x08\xe4\xdd\xa2\xaf\xca\x75\x95\x39\x20\xfb\xb4\xaa\x8e\xd4\xc0\x0c\x36\x6c\x79\x98\xb3\xa6\x52\xfc\xa9\x5a\xe4\xc1\x13\xc8\xfc\x05\xb8\x3c\x44\xe5\xff\x13\x26\xef\x22\xf2\x27\xf0\xf8\x13\x68\xfc\x71\x2c\xfe\x5c\x24\xde\xc2\xe1\xcf\x47\xe1\x8d\xa4\xaa\xf2\x38\xbc\x04\x61\xeb\xdd\x41\x14\xbf\x75\x8f\x8c\x50\xb4\x31\xb8\xab\x93\x84\x17\x07\xf7\xba\x18\x4f\xf1\xc3\xad\xf1\x95\x19\x4a\xbc\x39\x89\x7f\x3c\x8d\x4f\xea\xea\x74\xcf\xae\xda\xf9\xd6\xc7\xba\x28\x2b\x2c\x57\x05\x20\x78\x97\xad\x16\x6c\x29\xd3\x43\x49\xcb\xfb\x9d\xb4\x9c\xa5\xfb\x2b\x53\xd5\x1b\xeb\x1b\x98\x6d\x79\xb2\xa6\x48\x60\xa8\xb7\xf3\x88\xdb\x7b\x2e\x7f\x37\xa9\xbc\xb8\xb4\x2b\x8f\x02\x98\x81\x89\xcb\x36\x24\xb9\x5d\xf1\x4b\x22\xd5\xb2\x4c\x12\x90\x72\x5b\x32\x1b\xb9\x47\xd9\x01\x88\xb2\x99\xf6\xae\x3a\xc8\x52\xe9\x19\xbe\x3b\x4c\xb0\x47\xbf\x67\x7c\x43\xd8\x12\x94\xc2\xb2\xa9\x53\xb2\x25\xe8\x41\x8c\x3b\x98\xa7\xa4\x1c\x07\xdf\x3b\x5c\x0b\xa2\x10\x34\x57\xce\x6f\x01\x68\x78\x4c\xa0\xbf\x37\x3e\x1a\xf3\xbe\xeb\xdd\xb8\xf1\x3a\xbe\xdc\x03\x0b\xd3\x3f\xcb\x48\x8e\x99\xfb\xa7\xc8\x21\xed\x28\xc1\xb3\xe9\xb0\x64\x64\x47\x93\x01\xdc\x17\x5c\xa8\xe8\x7a\x7e\x3d\xbb\x9c\x2f\x66\xf6\x36\x70\xf6\xea\xcf\x90\xec\x79\x74\xf4\xea\xc1\x73\x3e\xce\x6e\xf4\xc5\xe0\xcb\x51\xf4\x9f\x28\x29\x55\x34\xdc\x9e\x44\xc3\xf4\x78\x78\xfc\x17\xa7\x44\xdf\x1f\x96\xbf\xbe\x7d\xde\xe2\x53\xbb\xb8\xff\x89\x37\x40\xf7\x38\x22\x23\xac\x40\xc0\x45\xc3\x3d\x11\x69\x64\x2e\x2a\xb8\x51\xfd\x2c\x32\xa8\x70\x93\x39\xac\xf3\x8b\xf6\xab\x3f\x7f\xc3\xcd\x2d\x4f\xd9\x31\xe3\xae\x93\x45\xb9\x41\x34\xb0\x6f\x3f\x59\x18\x6c\xd3\xef\xf4\x2b\x9c\xdd\xc1\xa8\xcc\xaa\x4f\x2c\xc5\x93\x60\x4c\x22\xf6\xa4\x05\xc5\x8e\x1b\x94\x48\x8a\xb7\x1c\xa3\x77\xa6\x6f\x70\x6b\x1c\x05\x7a\xa0\x84\x2d\xe9\x49\x91\xba\xd4\xf2\x74\xc5\xe7\x79\x4a\xef\x68\x8a\x77\x7b\x87\x77\xbb\xf4\x3e\x47\x18\xeb\x9f\x78\x39\x08\xfa\x40\xcf\xe1\x1d\xf7\xad\x48\xf6\xfa\x22\xea\xad\x22\x3e\xcb\x3b\xcd\x84\x34\x0b\x40\xf7\xf0\x9c\x1d\xe6\xdb\x4e\x5d\x77\xc8\x4e\x5e\x5f\x44\xa5\xfa\x80\x6c\x2b\x19\x10\xbc\x01\x1a\x60\xce\xb2\x42\x1d\xac\x6d\x1e\x83\x77\x18\x7d\x7e\xe9\x3f\x58\xaf\x87\x16\x70\xaf\xcc\xb3\x4a\xe3\x45\x8b\x94\x58\xca\x59\x9c\x60\xd4\x45\x99\xc9\x83\x54\x90\xc9\xb8\x51\xec\x71\x95\x7b\xfe\x1a\x6c\xa7\x4a\x5c\xc5\xd7\xdd\x89\x6d\x77\xf4\xf9\x55\x2d\xe9\x5c\xf7\x4f\x10\x96\xfd\x18\xc2\xb2\xea\x7a\x17\x26\x9b\x83\x1a\xc1\x1c\x30\xb1\xe9\x98\xaf\xf3\xae\x57\xda\xfa\xe9\xdb\x1e\xec\x11\xc7\xda\x19\xa9\x8d\x6b\x78\xb5\xd5\x2c\x0b\x22\xd0\x34\xec\xd4\xf4\xdf\x90\x36\xb6\x69\xfb\xad\x21\x39\xb4\xa2\xfa\x21\xe0\xef\x1d\xb7\x05\x73\xe3\xa5\xdb\xb5\xef\xfb\x7d\x4a\x9f\xad\x58\x43\xd4\x6b\xc7\xa8\x83\xe9\xba\x5b\x47\xad\x9b\xf7\x26\xae\xe1\x80\x97\x6d\x8b\x52\xaa\xef\xab\x35\xa4\xaa\x49\xa1\xa0\x35\xe4\x13\x55\xfb\x05\xaf\x2d\x71\x95\xf4\x18\xbb\x76\x5f\x7b\xb6\xbd\xd0\x7f\xad\x53\xbe\x5c\x5d\xdf\xf3\x61\xd8\xe2\x03\x04\xf4\xdf\x00\x00\x00\xff\xff\x19\x08\x41\xa2\xcb\x1e\x00\x00")

func templates_jenkins_normal_job_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_normal_job_xml,
		"templates/jenkins/normal-job.xml",
	)
}

func templates_jenkins_normal_job_xml() (*asset, error) {
	bytes, err := templates_jenkins_normal_job_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/normal-job.xml", size: 7883, mode: os.FileMode(420), modTime: time.Unix(1429876245, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templates_jenkins_pipeline_xml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templates_jenkins_pipeline_xml_bytes() ([]byte, error) {
	return bindata_read(
		_templates_jenkins_pipeline_xml,
		"templates/jenkins/pipeline.xml",
	)
}

func templates_jenkins_pipeline_xml() (*asset, error) {
	bytes, err := templates_jenkins_pipeline_xml_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1423648470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templates_jenkins_multi_job_xml,
	"templates/jenkins/normal-job.xml": templates_jenkins_normal_job_xml,
	"templates/jenkins/pipeline.xml":   templates_jenkins_pipeline_xml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() (*asset, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"jenkins": &_bintree_t{nil, map[string]*_bintree_t{
			"multi-job.xml":  &_bintree_t{templates_jenkins_multi_job_xml, map[string]*_bintree_t{}},
			"normal-job.xml": &_bintree_t{templates_jenkins_normal_job_xml, map[string]*_bintree_t{}},
			"pipeline.xml":   &_bintree_t{templates_jenkins_pipeline_xml, map[string]*_bintree_t{}},
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	if err != nil { // File
		return RestoreAsset(dir, name)
	} else { // Dir
		for _, child := range children {
			err = RestoreAssets(dir, path.Join(name, child))
			if err != nil {
				return err
			}
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
