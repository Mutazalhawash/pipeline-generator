// Code generated by go-bindata.
// sources:
// templates/jenkins/multi-job.xml
// templates/jenkins/normal-job.xml
// templates/jenkins/pipeline.xml
// DO NOT EDIT!

package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesJenkinsMultiJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x58\xdd\x6f\xdb\x36\x10\x7f\xae\xff\x0a\xc1\x2f\x01\x06\x44\x4a\xba\x0f\x74\x80\xe2\xb6\x71\xda\xa2\x43\x9b\x78\x76\xbc\x3c\xd3\xd2\x59\x66\x4d\x89\x02\x49\xa5\xf1\x8a\xfe\xef\x3b\x7e\xc9\x94\xa5\x34\x49\x57\x0c\xcb\x4b\xc5\xfb\xe2\xf1\xee\x77\x1f\x6e\xfa\xf2\xae\x64\xd1\x2d\x08\x49\x79\x75\x76\x74\x1a\x9f\x1c\x45\x50\x65\x3c\xa7\x55\x71\x76\xb4\xbc\x7e\x7b\xfc\xe2\xe8\xe5\x64\x94\x66\xbc\x8c\x15\xdd\x12\x16\x7f\x82\x6a\x4b\x2b\x19\xd7\xac\x29\xf4\xbf\x65\xc3\x14\xfd\xc4\x57\xf1\x47\xfd\xf1\x07\x5f\xcd\x04\xff\x04\x99\x8a\xac\xc0\xd9\xd8\x29\x1c\x7b\xc1\x63\xcb\x78\x75\x1a\x9f\xfe\x3a\x9e\x8c\xa2\x28\x25\x99\xc2\xdb\x65\x62\x0e\x39\xc8\x4c\xd0\x5a\x53\x26\x69\x12\x9e\x34\x77\x0b\x50\x5f\x40\x0d\x55\x8e\x5e\x52\x90\x93\x35\x61\x12\xd2\xa4\x47\xd7\xc2\xb5\xe0\x35\x08\xe5\x8e\x48\x90\x10\xe7\x94\xac\x78\xf0\x0a\x5a\x03\xa3\x15\xc4\x33\xf7\x31\xb3\x3a\xbb\xd6\xfd\x1c\xc9\x18\x9f\xdd\xb1\x17\xf5\xfe\x9f\xc4\x2f\xe2\xdf\xc6\xd6\x32\xda\x56\x44\x6e\x2f\x49\x09\x93\x9a\x08\xc2\x18\xb0\x08\xee\x20\x6b\xb4\xe7\x69\xd2\x32\xbd\xb4\x54\xa4\x00\x43\xf9\xf2\x25\x8a\x17\xfe\x14\x7d\xfd\x9a\x26\x7b\x9e\xf5\x3a\x79\x82\xdb\xe6\xdd\x49\xf7\xe1\xa9\xcc\xca\x28\x63\x44\xca\xb3\xf1\xa6\xc9\x25\xaf\xda\xe4\x15\x54\xc5\xef\xa8\x5a\x4c\x3f\x8e\xdb\x07\x23\xed\xd5\xf3\xf8\x97\xf8\x04\xdf\xf6\xec\x19\x66\xbe\x5a\xd3\xe2\x2f\x8b\x90\xc9\xf3\x34\xe9\x12\xb4\x48\x23\x41\xcc\xa1\xe4\x0a\xa6\x86\x27\x35\xf5\x59\x3a\x70\xd7\xf2\x40\xd2\x08\xa2\x01\xc1\x4c\x1c\xd0\x95\xe5\xfc\x83\x09\x82\x26\x19\x2b\xc9\x23\xcd\xa0\xca\x90\x1b\xe9\x4a\x90\x2a\xdb\xc0\xfd\x3e\x9d\x1b\x81\x45\x0d\x99\xf3\xa6\xd2\xa1\xff\x29\x29\x89\x54\x20\xd2\xc4\x1c\x47\xf7\x78\xd2\x55\x4e\x93\xf0\xb6\x34\xa7\x92\xac\x18\x2c\x9a\x55\xc9\xf3\x86\xed\xd1\xda\x67\xd8\x4c\x0b\x04\x0c\x86\xf5\x36\xe4\x28\xd1\xa0\xc6\x10\xc7\xea\xe4\xfc\x1d\x54\x20\x88\xda\xb3\xec\xf3\x1b\xa4\xe9\xb2\x6a\x2f\x7d\x50\xd0\x1a\x24\x8d\xda\x70\x71\x25\xa6\xbc\x2c\xa9\xc2\x10\x78\x03\x7d\x86\x55\xc8\x18\x90\xca\xe4\x6f\xaa\xbf\x6e\xb8\xd8\xca\x9a\x64\x16\xcc\x96\x69\x05\x3f\x23\x58\xaf\x1a\xd5\x0a\x78\xc3\x3d\xba\x15\xaf\x45\x53\xc1\xb9\x0f\xa8\x93\xed\x12\x7d\xd8\x74\xd2\x67\x9c\x31\x2f\x15\x50\xac\x08\x2d\x2a\x2e\xe0\x92\x2b\xba\xde\x59\xff\xbd\xe8\x00\xc7\xaa\x20\x9c\x16\x1b\xac\x64\xfe\x79\xca\x78\xd5\x3a\x7b\x48\xb6\xc2\xab\x86\xb2\x7c\xba\xe1\x1c\x31\xf8\x8d\x5a\xc3\x76\xc0\xe2\x0b\x58\x13\xec\x85\xe7\x81\xca\x38\x71\x76\x50\xe8\x9a\x73\x36\x71\x32\x69\xe2\x09\xae\x81\xb5\x99\x5b\x17\xfe\x1a\x46\xa5\x6a\xf5\x05\x30\x4c\xe6\x2d\x5c\x13\x51\x80\xba\xa0\x62\xcf\x58\x83\xc0\xde\x08\x9e\x00\x77\x19\x6b\x72\xc8\xe7\x50\xb4\xcd\x37\x20\xeb\x12\x93\x81\x57\x16\x2a\xba\x2b\xf5\x88\x6f\x4a\x42\x99\xa7\xca\x2d\xad\xaf\x49\xe1\x60\xeb\x4f\x8e\x97\x95\xa1\x81\x1f\x8e\xdc\x07\xa3\x03\x77\x0a\x2a\xe9\x9e\x8b\xd5\x8a\x0e\x4d\x46\xba\x43\x66\xa4\x9a\x73\x52\x3a\xaf\xfd\xc9\x8c\x23\x5b\xaa\xf9\x41\xe9\xe6\x86\xb9\x62\x3c\xdb\x9a\x3c\xde\x6c\xa0\xba\xe0\x9f\x2b\xa9\x04\x90\xd2\x90\x70\x82\x7a\xa5\x07\xe5\xfa\xc6\x96\xf5\x63\x4c\xf5\xa4\xb4\x21\x25\x68\x51\xf8\xec\xe9\xfe\x8d\xad\x03\x53\x6f\x01\xe7\xed\x1c\x92\x47\x1e\xc4\xa8\xe8\xeb\xfa\xf1\x33\xff\xdc\x6a\xb6\xe3\xad\xde\x10\x69\x47\x98\xf9\x3a\xc1\xba\x6d\x29\x1d\x19\xd4\x95\x9e\x12\x45\xd8\x43\xb0\xb2\x0b\xc0\x89\xd8\xac\x34\x0b\x5b\x48\xcb\x7c\x8c\x3f\x33\x6f\xd3\xcf\x85\xa8\xfd\x4b\x91\xdf\x0e\x5c\xd3\x9a\x3c\x21\x14\xd2\x31\x99\xe1\x00\x2f\x7d\xe3\x0d\x08\xa1\x1c\xdc\xd5\x58\xb7\x39\x0e\x4e\x1f\xd0\x80\x12\x0a\x3a\xbc\xa0\x4f\x07\x08\xd2\x94\x50\x10\xd7\x06\x89\x19\x9c\xeb\xd6\x3e\x23\x6a\x83\xcb\x4f\x8f\x14\xca\x97\xe4\x6e\x0e\x98\x6a\xec\x82\x18\xde\xe0\xd4\x71\xb3\xd2\x57\x69\xce\x6e\xa1\x74\x01\x15\xbb\xd6\xdf\x01\x56\x5f\x15\xe3\x98\x53\xb3\x7d\x75\xd4\xf6\xe4\x50\x05\x57\x14\xa1\x5e\x33\xa6\x9f\x66\xa3\x17\x52\x3a\x61\x6e\xf5\x0d\x12\x07\x6c\x6d\x29\x63\x26\x9b\x57\x15\x2a\xcf\x41\x62\x8a\xf7\xb7\xbe\x7d\xfd\xfe\xc3\x72\xfe\x06\xf7\xbe\x6f\x8a\x85\x06\x0d\xb8\xaf\x2a\xb6\x7b\xbf\xc6\x1c\x4d\x37\x1a\x67\x6d\x87\x19\x66\x1e\x78\x6c\x57\x8a\x28\xf8\x1b\x5a\x27\x70\x87\x99\xc3\x2d\xd5\x5d\xc6\x54\x85\x01\x0f\xe0\xb4\x94\x83\x1b\x56\xc7\x1c\x22\x7c\x85\xcb\xdc\x9f\x0d\x34\x90\xdb\x61\x24\xf7\x05\x3b\xc0\xeb\xaa\x0f\x2d\x28\xf7\xbb\xd3\x79\x5e\xd2\x7b\x9f\xb9\xf1\xbb\xeb\x0d\x8b\x0c\x77\xf1\x7d\xf9\xba\x06\x10\x96\xbb\x0e\xa9\xa2\x55\x63\x5a\xf8\x3e\x67\x8b\xe5\x74\xfa\x66\xb1\x78\xbb\xfc\x60\x9c\x1a\x90\x18\x3d\xda\xbd\x81\xf6\xe4\x72\xed\xde\x9f\xd6\xcd\x0a\x27\xc4\xa6\x0d\x07\xfa\x4d\xd7\x51\x7c\x89\x93\xe2\x23\xc1\x9b\x59\xd8\x85\x70\x35\x8a\xf5\xad\x19\x76\x4d\xd1\x94\x72\x87\x0b\x62\x29\xe3\x4e\xd4\x63\x63\xbe\xdd\xcf\x5d\x2f\x8e\x6d\xec\x1d\xf5\xda\x12\x5b\x3c\x18\x95\xde\xef\x8b\x53\x44\xc8\xcf\xe3\x30\x5a\x07\x09\xfa\x91\xe0\xfb\x17\xd0\xfb\x4e\xd8\xf5\x20\x87\xfb\x80\x9f\x8b\xee\x27\xa4\xee\xce\xd2\xf4\xeb\x5e\x3e\xf4\x52\x30\x28\xed\xc0\xf1\x63\x33\xd5\x62\x23\xc0\x74\x80\x94\x0e\x46\x0e\x82\x51\xfb\x87\xd3\xbf\x21\xef\xdc\x71\x88\x82\x8e\xe4\xb1\x13\xc5\x54\x3d\xff\xfd\x09\x20\x78\xf0\xba\x81\xc1\xf8\x5f\xb4\xb6\xff\x59\x73\xb3\xff\x39\xa0\x51\xb3\xc7\x57\x8b\xac\x96\x33\x3c\xb1\x5c\x83\xba\x6f\x70\xb9\xa0\xdf\x50\xb5\xb9\xe4\x81\x43\xee\xa5\xf7\xb1\xef\x2f\xa7\x27\xa6\xf4\xe0\xb5\x4f\x37\xd7\x07\x3b\x86\xa4\xd3\x26\xed\x2c\xbd\x11\xa4\xae\xed\x9a\xf9\xa4\x66\xec\xca\x75\x32\xfa\x27\x00\x00\xff\xff\x88\x32\x71\x6b\x7c\x12\x00\x00")

func templatesJenkinsMultiJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsMultiJobXml,
		"templates/jenkins/multi-job.xml",
	)
}

func templatesJenkinsMultiJobXml() (*asset, error) {
	bytes, err := templatesJenkinsMultiJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/multi-job.xml", size: 4732, mode: os.FileMode(420), modTime: time.Unix(1443624201, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsNormalJobXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\xeb\x6f\xdb\xc8\x11\xff\xee\xbf\x82\x70\x03\xb8\x3d\x54\x54\xec\x2b\x9a\x3b\x40\xd6\xc5\x0f\x25\xf1\x55\x56\x5c\x49\x4e\x3e\x14\x45\xb0\x22\x57\xd4\xc6\x4b\x2e\xb1\xbb\x74\xa2\xa6\xf9\xdf\x6f\xf6\xc9\xe5\x43\xb2\x8d\xe4\xcb\x01\x41\x80\x40\x9c\x99\x7d\xcd\xf3\x37\xe3\xd1\x6f\x9f\x73\x1a\xdd\x63\x2e\x08\x2b\x4e\x8f\x8e\xe3\xe7\x47\x11\x2e\x12\x96\x92\x22\x3b\x3d\xba\x5d\xbe\x1a\xfc\x72\xf4\xdb\xf8\x60\x54\x72\xf6\x11\x27\x72\x7c\x10\x45\x23\x94\x48\x10\x16\x43\xfd\x91\x62\x91\x70\x52\x2a\x8a\x21\x50\x96\xcd\x99\x44\x92\xf1\x28\xa1\x48\x88\xd3\xc3\x4d\x95\x0a\x56\xc4\x12\x89\x3b\x11\x4f\x3d\xfb\x50\x89\xab\x1d\xd0\x56\x2c\xd9\xbf\x30\x2e\xc7\x83\xe3\xd1\x30\xf8\x34\xfc\xa2\xca\x03\x76\xfd\x65\xb8\x88\x4b\xb2\x86\x1b\x5d\x36\x77\xe9\x21\x37\xe5\x67\x7e\x9f\x40\x7a\x16\x6e\x3e\x1a\xd6\x4f\xd1\xdf\x77\xc0\xb8\xc4\x25\x2e\x52\xd0\x10\xc1\x62\xbc\x46\x54\xe0\xd1\xb0\x43\x57\xc2\xa0\xb0\x12\xc3\xb6\xe6\x13\x08\x02\xc7\x29\x41\x2b\x46\xe3\x8f\xb8\xb8\x23\x85\x88\x4b\x52\x62\x4a\x0a\x1c\xdf\xd8\x1f\x37\x66\xcd\x36\x2a\x69\x95\x91\xe2\xf4\x30\x05\x32\xd8\x66\x3b\x70\xa2\x03\xc3\x79\xf9\x3c\xfe\x25\x7e\x61\x15\x08\x7b\x2b\xd5\xce\x50\x8e\xc7\x5f\xbe\x44\xf1\xd2\x7e\x44\x5f\xbf\x8e\x86\x9e\xe3\x44\x85\x44\x19\xf6\xb2\x0b\xf7\xa5\x85\x6b\x9e\xb9\xf2\xf0\x09\x77\x36\x1a\x6b\xbe\x1a\x4e\x20\xeb\x28\xbe\x12\x57\x05\x91\x04\xd1\xdf\xd9\x0a\xce\x51\x82\x22\xc9\x5b\xde\x61\x1e\x26\xe2\x8c\xc8\xf8\x35\x91\x8b\x8b\xeb\x43\xaf\x06\xa0\xbd\x3c\x89\x4f\xe2\x5f\x9d\xcb\x24\xac\x58\x93\xec\x9d\xf1\xda\xf1\xc9\x68\xd8\x24\x18\xa1\x4a\x60\x3e\xc7\x39\x93\xf8\x42\x73\x85\xd7\x41\xcf\x91\xb7\x2d\x61\x27\xab\xf6\xe1\x54\xeb\x0a\x6e\x75\x3b\x9f\x6a\x45\x29\x92\xdb\x6c\xf8\xe8\xdd\x60\x5d\xff\x95\x46\x2b\x8e\x8a\x64\x83\xf7\xde\xf0\x5c\xcb\x2c\x4a\x9c\x04\x77\x2b\x94\xb1\x7e\x1a\xaa\xeb\xd5\x7c\xb2\x26\x98\xeb\x7b\x16\xa1\xe5\xfb\x2e\xda\xde\x74\x34\x6c\x5e\x65\x94\x12\x81\x56\x14\x2f\xaa\x55\xce\xd2\x8a\xd6\x4e\xdf\x65\x98\x05\x1c\x27\x15\x58\xe1\x3e\xe4\x48\x5e\xc1\x8a\x3e\x8e\x3d\x84\xbd\xc6\x05\xe6\x48\xd6\x2c\xa3\x9f\x0a\x68\x2a\xd5\xf8\x43\x1f\x14\xb4\x41\x5e\xc9\x0d\xe3\x6f\xf9\x05\xcb\x73\x22\x25\xe6\x6e\x83\x2e\xc3\x3a\x14\xc5\xa8\xd0\x56\xbe\x50\xbf\xde\x33\x7e\x27\x4a\x94\x98\xb0\x30\x4c\x23\xf8\x09\xdc\xfe\x6d\x25\xbd\x80\xdb\xb8\x43\x37\xe2\x25\xaf\x0a\x7c\xee\x54\x6a\x65\x9b\x44\xa7\x36\xe5\x15\x37\x8c\x52\x27\x15\x50\x8c\x08\xc9\x0a\xc6\xf1\x8c\x41\xaa\xda\x9a\xfb\x3b\xd1\x1e\x8e\x0f\x81\xc5\x06\x51\xca\x3e\x5d\x50\x56\xf8\xcb\xb6\xc9\xd6\x09\x2b\x42\xd3\x8b\x0d\x63\xe0\xa4\x7b\x82\xb3\x92\x84\xc6\x97\x78\x8d\x2a\x2a\xcf\x83\x25\x87\x43\xbb\x0f\x08\x2d\x19\xa3\x63\x2b\x33\x1a\x3a\x82\xcd\x83\xde\x72\xeb\xcc\x1d\x43\x89\x90\x7e\x3d\xc7\x14\x8c\x79\x8f\x97\x88\x67\x58\x5e\x12\x5e\x33\xd6\x98\x43\x8a\xc5\x8e\x80\x3f\x27\xb4\x4a\x71\x3a\xc7\x99\x2f\x48\x01\x59\x45\xa1\x08\x6e\x65\x5c\x45\xe5\xb7\x0e\x71\x92\x23\x42\x1d\x55\xdc\x91\x72\x89\x32\xeb\xb6\xee\xcb\x1a\xa1\x68\x1c\x39\xb6\x29\x4e\xd9\x1d\x2a\x26\x5c\x16\x3c\x46\xb9\x51\x9b\x00\xc5\x41\xfb\x52\x7b\xbd\x3d\x31\xc9\xc3\x6b\x7d\xf7\x78\x78\x50\xe7\xf8\xb3\xc4\x85\xa8\xab\xfa\x10\x6e\xa4\x7f\x48\x4e\xb2\x0c\xd4\x68\xe4\xec\x6b\x6f\x4b\x21\x39\x46\x39\xe4\x73\x61\x12\x3a\x48\xba\x0a\xe1\x56\xc4\x73\xac\x60\x05\xd6\x3e\xb2\x34\xc4\xba\x0a\x41\xc6\x19\xfa\xaf\xca\xee\x77\x63\x40\x86\xd6\x6a\xfb\x10\xf0\xda\xb6\x94\xaf\x7e\x1b\x8e\xc5\x86\xd1\xb4\x9d\x18\x17\xb7\x17\x17\x93\xc5\xa2\x99\x07\x81\xc9\x38\xc0\x1b\x44\xc7\xcf\x47\x43\xf7\xb3\x66\x26\x8c\x42\xbd\x3f\x9f\xde\x4e\x54\x59\xa1\x8c\x37\x78\x79\x49\xb1\x34\x6f\xb2\xfe\xd1\xa4\xf9\x64\xdb\xba\xd4\x68\xf8\x78\xfd\x78\x77\x09\x75\x6e\x25\x70\x7a\x8d\x8a\x0a\x62\x77\x6b\xfd\x0a\xfc\xc0\x9b\xc0\x01\x2d\x77\x02\x14\xd1\x3e\xc5\x8f\x7f\x8a\xec\x3f\xb0\x73\x50\x4f\x6c\x86\xb9\x61\x42\x9a\x2c\xf2\x86\xb1\x3b\xd1\x4c\x32\x6d\xe6\x41\xa3\xb4\xec\x3c\x39\x7c\x12\xe8\x26\x70\x2a\x93\x76\xde\x73\x54\x96\xde\xcd\xda\xe5\x0f\x81\x6b\x6a\x53\xc4\x67\xf0\xeb\x42\xfd\x3a\x0f\x56\x79\x9c\xe0\xe5\x00\x1f\xfd\x23\x7e\x5e\xe3\x23\x4d\xbc\x46\xa5\xc6\x36\xe0\xea\x3c\xb7\xb6\x75\xb4\x83\xde\x0a\xf9\xc0\xb9\x8f\x07\x76\x16\x98\x40\x6c\xc2\xd3\x57\x95\xc2\xc6\x4f\x85\x78\x16\xa2\x2f\x31\x78\x1b\xc4\xfb\xf8\xd9\x97\xf3\xdb\xab\xe9\xe5\x87\xd9\xed\xf5\xf9\x64\xfe\x75\xf0\xec\xcb\xeb\xab\xe5\x87\xf9\xe4\xdd\xd5\xe2\xea\xed\xec\xef\x14\x17\x99\xdc\x9c\xbe\x80\xb8\x69\xaf\xac\xa3\x2e\x85\xcf\x4b\x22\x80\xbc\xd5\x5a\x30\x0e\xdd\xa5\x3f\x1e\x0d\x76\x1f\xda\x6f\x51\x49\x72\x0c\x68\x33\x07\x2d\xc6\xcb\xfa\x77\xaf\x55\x03\xd9\x97\xc7\xf1\x3f\xe3\x93\x43\x9b\xa3\x3a\x9e\xd3\x88\x87\x3f\x15\xc6\xd4\x09\xaa\x93\xa7\xa0\xe0\xe9\xf8\x54\x60\x60\x2d\x9a\xc8\xef\x07\x2a\xfd\x81\x4a\x7f\xa0\xd2\x1f\xa8\xd4\x18\xa1\xe8\x3d\x32\x84\x95\x35\xa4\xfb\x73\x17\xdc\x1d\x69\xdf\x80\x8b\x7a\xe6\xb0\xa0\xe8\x1e\x4f\xd1\x0a\x53\x5b\x0d\xc0\xa2\xe0\x90\x38\x9d\xb1\xd4\x8e\x3e\x42\x09\x88\xc1\x90\x7f\xd0\x42\x2c\x09\x2a\xe6\x0c\xe5\xce\x53\xdd\xe7\x41\x9d\x8a\xd2\x56\x06\x4a\x8d\xaa\x29\x4b\xee\xcc\x0b\x36\xb8\xb8\x64\x9f\x0a\x03\x61\x35\x09\xda\x03\xb7\xe8\x41\xb9\xee\x66\x0e\x1e\xef\xdf\xaa\x23\x75\x60\x2a\x1b\xe4\x3c\xf0\x59\x13\x29\xfe\x55\x2d\xf2\xc1\x1e\xbc\xff\x04\xb4\x1f\x62\xfd\x6f\x42\xfa\x5d\x9c\xbf\x07\xe5\xef\xc1\xf8\xbb\x11\xfe\x63\xf1\x7d\x0b\xdd\x3f\x1e\xdb\x37\x9c\x4a\xfb\x71\xd8\x5a\x41\xee\xcd\x70\x14\x9f\xb9\xd1\x25\x2e\xdb\xc8\xde\xc5\x49\xc2\xca\xad\x9b\x59\xc6\x17\xf0\xe1\xd6\xf8\xc8\x0c\x25\x00\x35\xfd\x7c\x12\x1f\xd7\xd1\xe9\x86\xb9\x4a\xf9\x56\xc7\x2a\x28\x35\x42\xd4\x06\x08\xa6\xbd\x7a\xc1\x9a\x50\x55\x95\x94\xbc\x3f\x49\xc9\x59\xba\x6f\xc4\x74\x6e\xac\xfb\x3a\x9b\xf2\x44\x4d\x11\x98\xc2\xbe\x9d\xd1\x70\xef\xbb\x7c\xc7\xa3\xb5\xb8\xb0\x2b\x0f\x03\x9c\x01\x8e\x4b\x57\x28\xb9\x5b\xb2\x29\x12\x72\x51\x25\x09\x16\x62\x5d\x51\x6b\xb9\x9d\xec\x00\x45\x59\x4f\x7b\xa5\x1f\xb2\x90\xaa\x88\x67\xdb\x31\xe4\xe8\xd7\x94\xad\x10\x5d\x60\x29\x21\x6c\x6a\x97\x6c\x09\x7a\x14\xe3\x1e\xe6\x29\x29\x83\xca\xf7\x0a\xd6\x62\x5e\x72\x52\x48\xa7\xb7\x00\x35\xec\x12\xe8\xcf\x8d\x3b\x6d\xde\xd7\x34\x8e\x1a\x33\xf7\xc5\x06\xd3\xd0\xfd\xf3\x1c\x15\xe0\xb9\x7f\x89\x1c\x7e\x8f\x12\x78\x9b\x32\x4b\x8e\x32\x92\x1c\xe0\xcf\x25\xe3\x32\xba\xb9\xba\x99\x4c\xaf\x66\x13\xdb\x63\x9c\x3e\xfb\x2b\x4e\x36\x2c\x3a\x7c\xf6\xc5\x73\xde\x4d\xe6\xaa\xdd\xf8\x7a\x18\xfd\x3f\x4a\x2a\x19\x0d\xd6\xc7\xd1\x20\x3d\x1a\x1c\xfd\xcd\x6d\xa2\xba\x92\xc5\x9b\xb3\xc7\x2d\x3e\xb1\x8b\xfb\x07\xc7\x01\xbc\x87\x12\x19\x41\x04\x62\x58\x34\xd8\x20\x9e\x46\xa6\xfd\x81\x83\xea\x61\xcb\x81\x06\x4e\xe6\xb1\x4e\x2f\x4a\xaf\xfe\xfd\x0d\x35\xb7\x34\x65\xcb\x8c\x6b\x52\xcb\x6a\x05\x68\x60\xd3\x1e\x84\x9c\x15\x29\x67\x24\x9d\x82\xf9\xbc\xe6\x19\xcf\x5c\x7f\x94\x90\xa0\xb2\x69\xc9\x0f\x1f\x40\xdd\x32\x56\x0b\x6e\xdc\x96\x41\x35\xd5\x32\x03\x25\xa2\x7a\x91\x3a\x60\x37\x18\x51\xb9\xd9\x06\x13\x93\xe2\x4d\x9b\xe4\x53\xd2\x94\x28\xa8\x05\x30\x2a\x48\x53\x86\xe6\xe3\x5f\x1f\xa8\xeb\xf0\x7f\xc2\x43\xff\x0b\x91\x5f\xb3\xbc\x27\x1b\xc4\x34\xb1\x7f\x15\xaa\x4f\x54\x65\xb0\x2a\xde\x16\xaf\x00\xa5\xd4\x05\xb0\x45\xf5\x37\x16\xf8\x86\xe3\x7b\xc2\x2a\xa1\xe3\xf9\x4c\xcc\x1d\x70\x0a\x00\xe0\x4e\x91\x60\x9b\x85\x54\x05\x76\xcf\x26\x3b\x04\x82\x2d\x2e\x31\x95\xe8\x1d\xa2\x55\x0d\x7f\x5b\xd4\x8e\x56\x45\x60\x26\x44\xb7\x82\x88\x41\x02\xf0\x16\x72\xeb\x8b\xc0\x50\x15\x14\x6e\x75\xf8\x92\x49\x44\xcf\x28\x1d\xf6\x73\xde\x90\x6c\xb3\x83\x35\x63\x3c\x47\xbb\xd6\x4d\xd9\xa7\x9a\xb3\xd6\x0a\xee\x9e\x14\xd0\xd5\x39\xaa\x02\xb6\x49\x3d\xa2\xe6\xdc\x96\xb0\x25\xf6\x88\x37\x6e\x52\xfb\x59\xad\x38\xf8\xac\x68\x7a\x09\x85\x33\x91\xd7\xcd\x26\xad\x8f\x55\xa7\xcd\x42\xcd\x97\xca\x4a\xe2\x19\xfe\x64\x13\x79\x8b\xd8\x48\xb1\x73\x2c\x18\xbd\xc7\x73\x0b\xcf\x6f\x90\xdc\x34\x53\x6c\xaf\x80\x8f\x04\xa4\xda\x2d\xd3\x63\x35\x83\x19\x42\xc1\xf2\x6c\x9e\x78\x72\x5c\xef\x1b\xe6\x61\x01\xf7\x52\xf9\x51\xf4\x67\xec\x8f\x15\x24\xbe\xf8\xf7\x5b\xf8\x1f\xee\x0f\xd1\x77\xc6\x93\x8d\x9a\x13\x79\x2f\xd4\x12\xe0\x7d\x01\xe8\x96\x7a\x57\x25\x6d\x70\x55\xf3\x14\xb0\x52\xc0\x77\x6b\xd4\xdf\x2e\xa7\xac\xc8\x16\x32\x25\x2c\xfc\x83\x66\x4d\x0c\xb7\xbf\x44\x12\xf9\x07\x06\x75\xdd\x24\xa8\x45\x82\x28\x7e\x85\x74\x1d\x84\x9b\x41\x6e\xed\x90\xfb\x92\xee\xce\xc7\xee\xd1\xa0\x69\x2b\xfb\x95\x77\xad\xdc\xb4\xd6\x54\xae\x3f\x41\x55\xc7\x81\xae\xa0\xed\x27\x25\x01\xac\x1b\x3c\x42\xb9\x99\xd9\x77\xa2\x26\x72\xb7\x36\xf2\x42\x30\xb8\x57\xa4\x06\x39\x05\x04\xc9\x55\x91\x92\x7b\x92\x56\xa0\x52\xd7\xb3\x75\xe8\x7d\xda\x30\xb7\xdf\xf3\xf4\x00\x81\xf5\x3c\xde\x71\x9b\x3a\x8c\xea\x3f\x7c\x8b\x2e\x8c\x43\x4d\xe8\xa1\x8a\x58\x41\xb7\x57\xeb\x0e\xa2\xea\x90\x9d\xbc\x1a\x2c\x0a\xf9\x16\xd8\x56\x32\x20\xf8\x0b\xa8\xd6\x7e\x92\x97\x72\x6b\xef\xe6\xc7\x1f\x1d\x46\x9f\x5e\xfa\x1f\xd6\xef\x1c\xf8\xb3\x34\x63\xf2\xc6\x5f\x28\x50\x05\x20\x2a\x8f\x13\xb0\x3a\xaf\x72\xb1\x15\x12\xe7\x22\x6e\xc0\xac\x58\x57\x7d\x3f\xd6\xb4\x78\x3e\xd6\xf6\x75\x33\x4e\x8b\x4b\xbd\x7f\xe9\x25\x9d\xf1\xed\x31\x34\xc4\x3f\x87\x0d\x71\x63\x3c\xd8\x3f\x4c\x7b\xad\x02\xe0\x9e\xa8\xf9\xa2\x39\x11\x71\x28\xc4\x90\x84\x44\x6b\x4c\x19\xf6\xda\x76\xfb\x7c\x05\x87\xff\xbb\xc2\x15\x4e\xcd\xb0\x45\xd4\x7d\x5d\x0f\xaf\xbe\x47\xdf\x00\x6e\xf7\x45\xc6\x01\x8c\x6a\x0e\x3c\x53\xdf\xb5\x06\x2d\x85\x71\xb6\x8e\x3d\x54\x20\xf5\x4a\x5b\xc3\x7f\x5f\x4b\x3d\xe0\x29\x0d\x1f\x69\x29\xa3\x74\x0f\x27\xff\xc3\x69\xe3\x8c\xb6\x17\x34\x24\x07\x56\x54\xa1\xb8\x5f\x9f\xe0\x04\x0f\x1e\xd7\x1e\x1c\xf7\x6d\xfa\xdd\xbd\xeb\x1b\x3d\xec\x1b\xbc\xac\xd7\xd3\x34\xb1\x0c\x07\x08\x81\x15\x7d\xef\x2a\xda\x4a\x4a\x89\x9a\xc5\xd6\xd3\x82\x9a\x14\x0a\x5a\xa5\xbf\x27\x72\x33\x63\xc1\x85\xec\x4b\x77\xb1\x77\x87\xd3\x13\x4d\xda\x7a\xed\xd3\xb7\xeb\x3a\x3b\xa8\x24\xe8\x5e\x82\xe6\xfe\x8f\x00\x00\x00\xff\xff\x4e\x09\x1d\x6a\xfc\x25\x00\x00")

func templatesJenkinsNormalJobXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsNormalJobXml,
		"templates/jenkins/normal-job.xml",
	)
}

func templatesJenkinsNormalJobXml() (*asset, error) {
	bytes, err := templatesJenkinsNormalJobXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/normal-job.xml", size: 9724, mode: os.FileMode(420), modTime: time.Unix(1443813084, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJenkinsPipelineXml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x53\xcb\x6e\xdb\x30\x10\xbc\xfb\x2b\x08\xa1\x57\x53\x4e\x0f\x45\x0e\x34\xd3\xc2\x6d\x80\x16\x7d\xa4\x68\xda\x6b\xc1\x48\x6b\x9a\x2d\xb5\x24\xf8\xb0\x1d\x04\xf9\xf7\xae\x1e\x4c\xa2\xf4\x01\x04\x3d\x49\x9c\x99\x9d\x9d\xd5\x52\xe2\xec\xd8\x59\xb6\x87\x10\x8d\xc3\x75\x75\xc2\x57\x15\x03\x6c\x5c\x6b\x50\xaf\xab\xaf\x97\xe7\xcb\xd3\xea\x4c\x2e\x44\x04\xde\x1a\x75\xe5\x2c\xff\x01\xf8\xd3\x60\xe4\xde\x78\xb0\x06\x81\xbf\xa6\x07\x19\x5c\x5f\x4c\xc0\x37\x03\x07\xe6\x6d\xd6\x86\x0c\xdb\x89\x5c\x16\xf9\x72\x64\x5e\xae\xf8\x29\x7f\x51\xc9\x05\x63\x02\x55\x07\xf2\xe6\x86\xf1\x8f\xf4\xc2\x6e\x6f\x45\x3d\x20\x3d\xb5\x35\x36\x41\x78\x73\x84\x26\x27\x17\xa2\xdc\x2a\x1b\x41\xd4\x8f\xe1\x7b\xe9\xe7\x0c\x19\xe6\xb2\x11\xea\x25\x3e\x38\x0f\x21\x19\x88\xac\xb1\x2a\xc6\x75\xb5\xcb\x6d\x74\xc8\x3b\x47\x39\x79\x1f\xfc\xd9\xc5\xa8\xb9\x7e\x6f\x62\xaa\xea\xa1\xac\x71\x9d\x77\x08\x98\xbe\x78\x68\x86\x66\x04\x3e\xf1\x83\x7c\x5f\x6e\x1e\xba\x8c\x26\xff\x9c\x7d\xa0\xb7\x26\xc4\xf4\xce\x5d\xcd\x25\x77\xe8\x18\xa5\xfe\xff\x2c\xa2\xfe\x7d\x48\x81\xee\xd3\xb6\xd4\x45\x79\xb2\xa2\x6c\x33\xa4\xd7\xc4\x9d\x3b\xbc\xd2\x3a\x80\x56\x09\xda\xc2\x95\x05\xfc\x85\x2d\xe6\x1b\x67\x73\x87\x64\x3d\x3a\x97\xe3\xe0\xeb\x68\x4f\xa8\x25\x52\x26\xf2\x99\x4e\x77\x1d\xf7\x2a\xa9\xfb\xeb\xf0\x10\xea\x25\xd9\xb7\xd4\xef\x2d\xd2\xf2\xf7\xca\xca\xe7\xa2\x7e\x84\x14\x9f\xcd\x4e\xa1\x86\x99\x4f\x81\x7a\x89\xb2\xd6\x1d\x3e\x28\xcc\xca\x5e\x06\xa3\x35\xfd\x25\x32\x85\x4c\xca\x3f\x31\x7d\x05\x4d\x0a\x47\x7f\x3e\xed\x27\xd2\xfd\x79\xf2\x76\xe4\xe2\x57\x00\x00\x00\xff\xff\x5f\x40\xf2\x3f\x94\x03\x00\x00")

func templatesJenkinsPipelineXmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesJenkinsPipelineXml,
		"templates/jenkins/pipeline.xml",
	)
}

func templatesJenkinsPipelineXml() (*asset, error) {
	bytes, err := templatesJenkinsPipelineXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jenkins/pipeline.xml", size: 916, mode: os.FileMode(420), modTime: time.Unix(1443542096, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/jenkins/multi-job.xml":  templatesJenkinsMultiJobXml,
	"templates/jenkins/normal-job.xml": templatesJenkinsNormalJobXml,
	"templates/jenkins/pipeline.xml":   templatesJenkinsPipelineXml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"jenkins": &bintree{nil, map[string]*bintree{
			"multi-job.xml":  &bintree{templatesJenkinsMultiJobXml, map[string]*bintree{}},
			"normal-job.xml": &bintree{templatesJenkinsNormalJobXml, map[string]*bintree{}},
			"pipeline.xml":   &bintree{templatesJenkinsPipelineXml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
